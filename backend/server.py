from fastapi import FastAPI, APIRouter, HTTPException
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uuid
from datetime import datetime
import math

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# ============================================================================
# PIPE MATERIALS AND FITTINGS DATABASE
# ============================================================================

PIPE_MATERIALS = {
    "pvc": {
        "name": "PVC",
        "roughness": 0.0015,  # mm
        "description": "Polychlorure de vinyle"
    },
    "pehd": {
        "name": "PEHD",
        "roughness": 0.007,  # mm
        "description": "Poly√©thyl√®ne haute densit√©"
    },
    "steel": {
        "name": "Acier",
        "roughness": 0.045,  # mm
        "description": "Acier commercial"
    },
    "steel_galvanized": {
        "name": "Acier galvanis√©",
        "roughness": 0.15,  # mm
        "description": "Acier galvanis√©"
    },
    "cast_iron": {
        "name": "Fonte",
        "roughness": 0.25,  # mm
        "description": "Fonte"
    },
    "concrete": {
        "name": "B√©ton",
        "roughness": 0.3,  # mm
        "description": "B√©ton liss√©"
    }
}

FITTING_COEFFICIENTS = {
    "elbow_90": {"name": "Coude 90¬∞", "k": 0.9},
    "elbow_45": {"name": "Coude 45¬∞", "k": 0.4},
    "tee_through": {"name": "T√© passage direct", "k": 0.6},
    "tee_branch": {"name": "T√© d√©rivation", "k": 1.8},
    "gate_valve_open": {"name": "Vanne guillotine ouverte", "k": 0.15},
    "gate_valve_half": {"name": "Vanne guillotine mi-ouverte", "k": 5.6},
    "ball_valve": {"name": "Vanne √† boule", "k": 0.05},
    "check_valve": {"name": "Clapet anti-retour", "k": 2.0},
    "reducer": {"name": "R√©ducteur", "k": 0.5},
    "enlarger": {"name": "√âlargisseur", "k": 1.0},
    "entrance_sharp": {"name": "Entr√©e vive", "k": 0.5},
    "entrance_smooth": {"name": "Entr√©e arrondie", "k": 0.1},
    "exit": {"name": "Sortie", "k": 1.0}
}

# Table des DN normalis√©s (diam√®tres nominaux ISO)
DN_STANDARDS = [15, 20, 25, 32, 40, 50, 65, 80, 100, 125, 150, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000]

# Table de correspondance DN vers diam√®tres ext√©rieurs r√©els (mm)
DN_TO_DIAMETER = {
    20: 26.9,
    25: 33.7,
    32: 42.4,
    40: 48.3,
    50: 60.3,
    65: 76.1,
    80: 88.9,
    100: 114.3,
    125: 139.7,
    150: 168.3,
    200: 219.1,
    250: 273.1,
    300: 323.9,
    350: 355.6,
    400: 406.4,
    450: 457.2,
    500: 508.0
}

def get_dn_from_diameter(diameter_mm):
    """Convertit un diam√®tre en mm vers le DN correspondant le plus proche"""
    if diameter_mm <= 0:
        return 20
    
    # Trouver le DN dont le diam√®tre r√©el est le plus proche
    closest_dn = min(DN_TO_DIAMETER.keys(), key=lambda dn: abs(DN_TO_DIAMETER[dn] - diameter_mm))
    
    # Si le diam√®tre calcul√© est sup√©rieur au DN trouv√©, prendre le DN sup√©rieur pour √™tre s√ªr
    if diameter_mm > DN_TO_DIAMETER[closest_dn]:
        # Trouver le DN sup√©rieur
        available_dns = sorted(DN_TO_DIAMETER.keys())
        current_index = available_dns.index(closest_dn)
        if current_index < len(available_dns) - 1:
            closest_dn = available_dns[current_index + 1]
    
    return closest_dn

def get_closest_dn(diameter_mm):
    """Convertit un diam√®tre en mm vers le DN normalis√© le plus proche"""
    if diameter_mm <= 0:
        return DN_STANDARDS[0]
    
    # Trouver le DN le plus proche
    closest_dn = min(DN_STANDARDS, key=lambda dn: abs(dn - diameter_mm))
    
    # Si le diam√®tre calcul√© est sup√©rieur au DN trouv√© et qu'il y a une diff√©rence significative,
    # prendre le DN sup√©rieur pour √™tre s√ªr
    if diameter_mm > closest_dn and diameter_mm - closest_dn > closest_dn * 0.1:
        index = DN_STANDARDS.index(closest_dn)
        if index < len(DN_STANDARDS) - 1:
            closest_dn = DN_STANDARDS[index + 1]
    
    return closest_dn

def calculate_graduated_diameter_recommendations(current_diameter_mm, flow_rate_m3h, current_velocity, pipe_length_m, is_suction_pipe=False):
    """
    Calcule des recommandations gradu√©es d'augmentation de diam√®tre avec analyse co√ªt-b√©n√©fice
    respectant les vitesses hydrauliques normalis√©es selon le type de conduite
    """
    recommendations = []
    
    # Obtenir le DN actuel
    current_dn = get_dn_from_diameter(current_diameter_mm)
    
    # Vitesses recommand√©es selon les normes hydrauliques professionnelles
    # Bas√© sur la documentation technique fournie
    velocity_limits = {
        "aspiration": {
            "optimal": 1.2,      # Vitesse optimale aspiration
            "max_safe": 1.5,     # Maximum pour √©viter cavitation
            "description": "Aspiration (√©viter cavitation)"
        },
        "refoulement": {
            "optimal": 2.0,      # Vitesse optimale refoulement
            "max_safe": 2.5,     # Maximum recommand√©
            "description": "Refoulement standard"
        },
        "longue_distance": {
            "optimal": 1.5,      # Vitesse optimale longues distances
            "max_safe": 2.0,     # Maximum pour limiter pertes
            "description": "Conduites principales"
        },
        "circuits_fermes": {
            "optimal": 2.0,      # Vitesse optimale circuits ferm√©s
            "max_safe": 3.0,     # Maximum tol√©rable
            "description": "R√©seaux sous pression"
        },
        "metallique_court": {
            "optimal": 3.0,      # Vitesse acceptable tuyauteries r√©sistantes
            "max_safe": 4.0,     # Maximum absolu (cas sp√©ciaux)
            "description": "Tuyauteries m√©talliques courtes"
        }
    }
    
    # D√©terminer le type de conduite selon la longueur, la vitesse actuelle et le type de pipe
    if is_suction_pipe:
        # Pour les conduites d'aspiration, priorit√© aux limites d'aspiration
        if pipe_length_m < 20:
            conduite_type = "aspiration"
        elif pipe_length_m > 100:
            conduite_type = "longue_distance"
        else:
            conduite_type = "aspiration"  # Par d√©faut aspiration pour les conduites de succion
    else:
        # Pour les conduites de refoulement, logique existante
        if pipe_length_m > 100:
            conduite_type = "longue_distance"
        elif current_velocity > 3.0:
            conduite_type = "metallique_court"
        elif pipe_length_m < 20:
            conduite_type = "circuits_fermes"
        else:
            conduite_type = "refoulement"
    
    target_velocity = velocity_limits[conduite_type]["optimal"]
    max_velocity = velocity_limits[conduite_type]["max_safe"]
    conduite_description = velocity_limits[conduite_type]["description"]
    
    # Liste des DN disponibles tri√©s
    available_dns = sorted(DN_TO_DIAMETER.keys())
    current_index = available_dns.index(current_dn) if current_dn in available_dns else 0
    
    # Si la vitesse actuelle est acceptable, pas de recommandations
    if current_velocity <= max_velocity:
        return []
    
    # Calculer le diam√®tre requis pour atteindre la vitesse cible
    required_area = (flow_rate_m3h / 3600) / target_velocity
    required_diameter_mm = math.sqrt(4 * required_area / math.pi) * 1000
    target_dn = get_dn_from_diameter(required_diameter_mm)
    
    # Ajouter un en-t√™te explicatif
    recommendations.append(f"‚ö†Ô∏è VITESSE EXCESSIVE ({current_velocity:.1f} m/s) - {conduite_description.upper()}")
    recommendations.append(f"üéØ VITESSE CIBLE: {target_velocity:.1f} m/s (MAX: {max_velocity:.1f} m/s)")
    
    # Calculer les options gradu√©es jusqu'√† atteindre la vitesse cible
    options_count = 0
    for i in range(1, len(available_dns) - current_index):
        if options_count >= 3:  # Limiter √† 3 options maximum
            break
            
        next_dn = available_dns[current_index + i]
        next_diameter = DN_TO_DIAMETER[next_dn]
        
        # Calculer la nouvelle vitesse
        new_area = math.pi * (next_diameter / 1000 / 2) ** 2
        new_velocity = (flow_rate_m3h / 3600) / new_area
        
        # Ne pas proposer d'options qui d√©passent encore les limites
        if new_velocity > max_velocity:
            continue
            
        # Calculer la r√©duction de vitesse et l'augmentation de co√ªt
        velocity_reduction = ((current_velocity - new_velocity) / current_velocity) * 100
        cost_increase = ((next_diameter / current_diameter_mm) ** 2 - 1) * 100
        
        # Efficacit√© (r√©duction vitesse / augmentation co√ªt)
        efficiency_ratio = velocity_reduction / cost_increase if cost_increase > 0 else 0
        
        # D√©terminer la priorit√© selon la vitesse atteinte
        if new_velocity <= target_velocity:
            priority = "üü¢ OPTIMAL"
        elif new_velocity <= target_velocity * 1.2:
            priority = "üü° RECOMMAND√â"
        else:
            priority = "üî¥ LIMITE"
        
        # Formatage de la recommandation avec conformit√© aux normes
        norm_status = "‚úÖ CONFORME" if new_velocity <= target_velocity else "‚ö†Ô∏è ACCEPTABLE"
        recommendation = f"{priority} DN{current_dn}‚ÜíDN{next_dn}: {new_velocity:.1f}m/s {norm_status} (r√©duction -{velocity_reduction:.0f}%, co√ªt +{cost_increase:.0f}%)"
        recommendations.append(recommendation)
        
        options_count += 1
        
        # Arr√™ter si on a atteint une vitesse optimale
        if new_velocity <= target_velocity:
            break
    
    # Si aucune option n'est propos√©e, calculer directement le DN n√©cessaire
    if options_count == 0:
        recommendations.append(f"üîß SOLUTION DIRECTE: DN{current_dn}‚ÜíDN{target_dn} pour atteindre {target_velocity:.1f} m/s")
    
    return recommendations

FLUID_PROPERTIES = {
    "water": {
        "name": "Eau",
        "density_20c": 1000,  # kg/m¬≥
        "viscosity_20c": 0.001,  # Pa¬∑s
        "vapor_pressure_20c": 2340,  # Pa
        "temp_coeffs": {
            "density": -0.2,  # kg/m¬≥/¬∞C
            "viscosity": -0.00005,  # Pa¬∑s/¬∞C
            "vapor_pressure": 100  # Pa/¬∞C
        }
    },
    "oil": {
        "name": "Huile Hydraulique",
        "density_20c": 850,
        "viscosity_20c": 0.05,
        "vapor_pressure_20c": 100,
        "temp_coeffs": {
            "density": -0.7,
            "viscosity": -0.002,
            "vapor_pressure": 20
        }
    },
    "acid": {
        "name": "Solution Acide",
        "density_20c": 1200,
        "viscosity_20c": 0.002,
        "vapor_pressure_20c": 3000,
        "temp_coeffs": {
            "density": -0.3,
            "viscosity": -0.0001,
            "vapor_pressure": 150
        }
    },
    "glycol": {
        "name": "√âthyl√®ne Glycol",
        "density_20c": 1113,
        "viscosity_20c": 0.0161,
        "vapor_pressure_20c": 10,
        "temp_coeffs": {
            "density": -0.8,
            "viscosity": -0.0008,
            "vapor_pressure": 5
        }
    },
    # NOUVEAUX FLUIDES INDUSTRIELS - Extension Expertise Hydraulique
    "palm_oil": {
        "name": "Huile de Palme",
        "density_20c": 915,  # kg/m¬≥ (ASTM D1298)
        "viscosity_20c": 0.045,  # Pa¬∑s (√† 20¬∞C)
        "vapor_pressure_20c": 0.001,  # Pa (tr√®s faible)
        "temp_coeffs": {
            "density": -0.65,  # Coefficient thermique typique huiles v√©g√©tales
            "viscosity": -0.0018,  # Forte variation avec temp√©rature
            "vapor_pressure": 0.0001
        },
        "technical_specs": {
            "flash_point": 315,  # ¬∞C
            "pour_point": 2,  # ¬∞C
            "saponification_value": 199,  # mg KOH/g
            "iodine_value": 53,  # g I2/100g
            "compatibility": ["stainless_steel", "bronze", "pvc"],
            "incompatibility": ["galvanized_steel", "copper_alloys"]
        }
    },
    "gasoline": {
        "name": "Essence (Octane 95)",
        "density_20c": 740,  # kg/m¬≥ (ASTM D4052)
        "viscosity_20c": 0.00055,  # Pa¬∑s (tr√®s faible)
        "vapor_pressure_20c": 13000,  # Pa (tr√®s volatile)
        "temp_coeffs": {
            "density": -0.9,  # Fort coefficient pour hydrocarbures l√©gers
            "viscosity": -0.000015,  # Tr√®s faible viscosit√©
            "vapor_pressure": 850  # Augmentation rapide avec temp√©rature
        },
        "technical_specs": {
            "flash_point": -43,  # ¬∞C (tr√®s inflammable)
            "autoignition_temp": 280,  # ¬∞C
            "octane_rating": 95,
            "reid_vapor_pressure": 90,  # kPa
            "compatibility": ["stainless_steel", "ptfe", "viton"],
            "incompatibility": ["rubber", "pvc", "copper"]
        }
    },
    "diesel": {
        "name": "Gazole (Diesel)",
        "density_20c": 840,  # kg/m¬≥ (EN 590)
        "viscosity_20c": 0.0035,  # Pa¬∑s (√† 20¬∞C)
        "vapor_pressure_20c": 300,  # Pa
        "temp_coeffs": {
            "density": -0.75,  # Coefficient pour gazole
            "viscosity": -0.00012,
            "vapor_pressure": 25
        },
        "technical_specs": {
            "flash_point": 65,  # ¬∞C minimum (EN 590)
            "cetane_number": 51,  # minimum
            "sulfur_content": 10,  # mg/kg maximum
            "cold_filter_plugging_point": -5,  # ¬∞C
            "compatibility": ["carbon_steel", "stainless_steel", "aluminum"],
            "incompatibility": ["zinc", "copper"]
        }
    },
    "hydraulic_oil": {
        "name": "Huile Hydraulique ISO VG 46",
        "density_20c": 875,  # kg/m¬≥ (ISO 3675)
        "viscosity_20c": 0.046,  # Pa¬∑s (√©quivalent √† 46 cSt)
        "vapor_pressure_20c": 0.1,  # Pa (tr√®s faible)
        "temp_coeffs": {
            "density": -0.65,
            "viscosity": -0.0019,  # Indice de viscosit√© ~100
            "vapor_pressure": 0.02
        },
        "technical_specs": {
            "iso_grade": "VG 46",
            "viscosity_index": 100,  # Minimum selon ISO 11158
            "flash_point": 220,  # ¬∞C minimum
            "pour_point": -30,  # ¬∞C maximum
            "anti_wear_additives": True,
            "compatibility": ["steel", "cast_iron", "bronze", "nitrile"],
            "incompatibility": ["zinc", "natural_rubber"]
        }
    },
    "ethanol": {
        "name": "√âthanol (95%)",
        "density_20c": 810,  # kg/m¬≥
        "viscosity_20c": 0.0012,  # Pa¬∑s
        "vapor_pressure_20c": 5870,  # Pa (volatile)
        "temp_coeffs": {
            "density": -1.05,  # Fort coefficient pour alcool
            "viscosity": -0.00004,
            "vapor_pressure": 420
        },
        "technical_specs": {
            "flash_point": 17,  # ¬∞C (inflammable)
            "boiling_point": 78,  # ¬∞C
            "concentration": 95,  # % vol
            "ph": 7.0,  # Neutre
            "compatibility": ["stainless_steel", "ptfe", "epdm"],
            "incompatibility": ["aluminum", "zinc", "natural_rubber"]
        }
    },
    "seawater": {
        "name": "Eau de Mer",
        "density_20c": 1025,  # kg/m¬≥ (salinit√© 35‚Ä∞)
        "viscosity_20c": 0.00107,  # Pa¬∑s (l√©g√®rement sup√©rieure √† l'eau douce)
        "vapor_pressure_20c": 2280,  # Pa (l√©g√®rement inf√©rieure √† l'eau pure)
        "temp_coeffs": {
            "density": -0.25,  # L√©g√®rement diff√©rent de l'eau pure
            "viscosity": -0.000052,
            "vapor_pressure": 95
        },
        "technical_specs": {
            "salinity": 35,  # g/L (‚Ä∞)
            "chloride_content": 19000,  # mg/L
            "ph": 8.1,  # L√©g√®rement basique
            "electrical_conductivity": 50000,  # ¬µS/cm
            "compatibility": ["316L_stainless", "duplex_steel", "bronze_naval"],
            "incompatibility": ["carbon_steel", "aluminum", "zinc"]
        }
    },
    "methanol": {
        "name": "M√©thanol (99.5%)",
        "density_20c": 792,  # kg/m¬≥
        "viscosity_20c": 0.00059,  # Pa¬∑s
        "vapor_pressure_20c": 12800,  # Pa (tr√®s volatile)
        "temp_coeffs": {
            "density": -1.2,
            "viscosity": -0.000025,
            "vapor_pressure": 780
        },
        "technical_specs": {
            "flash_point": 12,  # ¬∞C (tr√®s inflammable)
            "boiling_point": 64.7,  # ¬∞C
            "purity": 99.5,  # % vol
            "water_content": 0.1,  # % max
            "compatibility": ["stainless_steel", "ptfe", "viton"],
            "incompatibility": ["natural_rubber", "pvc", "aluminum"]
        }
    },
    "glycerol": {
        "name": "Glyc√©rine (99%)",
        "density_20c": 1260,  # kg/m¬≥
        "viscosity_20c": 1.48,  # Pa¬∑s (tr√®s visqueux)
        "vapor_pressure_20c": 0.001,  # Pa (n√©gligeable)
        "temp_coeffs": {
            "density": -0.65,
            "viscosity": -0.058,  # Forte variation avec temp√©rature
            "vapor_pressure": 0.0002
        },
        "technical_specs": {
            "purity": 99.0,  # % minimum
            "water_content": 0.5,  # % max
            "ash_content": 0.01,  # % max
            "ph": 7.0,  # Neutre
            "compatibility": ["stainless_steel", "pvc", "ptfe", "epdm"],
            "incompatibility": ["natural_rubber", "neoprene"]
        }
    },
    # NOUVEAUX FLUIDES ALIMENTAIRES ET DOMESTIQUES - Extension Compl√®te
    "milk": {
        "name": "Lait (3.5% MG)",
        "density_20c": 1030,  # kg/m¬≥ (l√©g√®rement plus dense que l'eau)
        "viscosity_20c": 0.0015,  # Pa¬∑s (l√©g√®rement plus visqueux que l'eau)
        "vapor_pressure_20c": 2200,  # Pa (proche de l'eau)
        "temp_coeffs": {
            "density": -0.3,  # Coefficient similaire √† l'eau
            "viscosity": -0.00006,
            "vapor_pressure": 95
        },
        "technical_specs": {
            "fat_content": 3.5,  # % mati√®re grasse
            "ph": 6.7,  # pH l√©g√®rement acide
            "total_solids": 12.5,  # % mati√®res s√®ches
            "protein_content": 3.2,  # % prot√©ines
            "compatibility": ["stainless_steel", "ptfe", "epdm_food", "silicone"],
            "incompatibility": ["copper", "brass", "pvc_food"]
        }
    },
    "honey": {
        "name": "Miel (Naturel)",
        "density_20c": 1400,  # kg/m¬≥ (tr√®s dense)
        "viscosity_20c": 8.5,  # Pa¬∑s (tr√®s visqueux)
        "vapor_pressure_20c": 0.1,  # Pa (n√©gligeable)
        "temp_coeffs": {
            "density": -0.8,
            "viscosity": -0.25,  # Forte variation avec temp√©rature
            "vapor_pressure": 0.02
        },
        "technical_specs": {
            "sugar_content": 82,  # % sucres
            "water_content": 17,  # % eau
            "ph": 3.9,  # Acide
            "viscosity_index": "Newtonien √† faible cisaillement",
            "compatibility": ["316L_stainless", "glass", "ptfe", "food_grade_silicone"],
            "incompatibility": ["iron", "copper", "aluminum_contact"]
        }
    },
    "wine": {
        "name": "Vin Rouge (12¬∞ alcool)",
        "density_20c": 990,  # kg/m¬≥ (moins dense que l'eau √† cause de l'alcool)
        "viscosity_20c": 0.0012,  # Pa¬∑s (l√©g√®rement plus visqueux que l'eau)
        "vapor_pressure_20c": 2800,  # Pa (plus √©lev√© √† cause de l'alcool)
        "temp_coeffs": {
            "density": -0.9,  # Fort coefficient √† cause de l'alcool
            "viscosity": -0.00004,
            "vapor_pressure": 120
        },
        "technical_specs": {
            "alcohol_content": 12,  # % vol
            "ph": 3.4,  # Acide
            "sulfites": 150,  # mg/L
            "total_acidity": 6.0,  # g/L
            "compatibility": ["316L_stainless", "glass", "ptfe", "epdm_wine"],
            "incompatibility": ["iron", "lead", "pvc_standard"]
        }
    },
    "bleach": {
        "name": "Eau de Javel (5% NaClO)",
        "density_20c": 1050,  # kg/m¬≥
        "viscosity_20c": 0.0011,  # Pa¬∑s (proche de l'eau)
        "vapor_pressure_20c": 2100,  # Pa
        "temp_coeffs": {
            "density": -0.25,
            "viscosity": -0.000045,
            "vapor_pressure": 90
        },
        "technical_specs": {
            "active_chlorine": 5.0,  # % NaClO
            "ph": 12.5,  # Tr√®s basique
            "stability": "D√©gradation UV et temp√©rature",
            "concentration_available": "5-6% chlore actif",
            "compatibility": ["pvc", "cpvc", "ptfe", "viton_chlorine"],
            "incompatibility": ["stainless_steel_prolonged", "rubber", "metal_fittings"]
        }
    },
    "yogurt": {
        "name": "Yaourt Nature",
        "density_20c": 1050,  # kg/m¬≥
        "viscosity_20c": 0.15,  # Pa¬∑s (consistance cr√©meuse)
        "vapor_pressure_20c": 2150,  # Pa (proche de l'eau)
        "temp_coeffs": {
            "density": -0.35,
            "viscosity": -0.008,  # Forte variation avec temp√©rature
            "vapor_pressure": 92
        },
        "technical_specs": {
            "protein_content": 3.5,  # % prot√©ines
            "fat_content": 3.2,  # % mati√®re grasse
            "ph": 4.2,  # Acide lactique
            "lactic_acid": 0.8,  # % acide lactique
            "compatibility": ["316L_stainless", "glass", "ptfe", "silicone_food"],
            "incompatibility": ["copper_alloys", "aluminum_direct"]
        }
    },
    "tomato_sauce": {
        "name": "Sauce Tomate Concentr√©e",
        "density_20c": 1100,  # kg/m¬≥ (concentr√©e)
        "viscosity_20c": 2.5,  # Pa¬∑s (√©paisse)
        "vapor_pressure_20c": 1800,  # Pa
        "temp_coeffs": {
            "density": -0.4,
            "viscosity": -0.12,
            "vapor_pressure": 75
        },
        "technical_specs": {
            "concentration": 28,  # % mati√®re s√®che
            "ph": 4.1,  # Acide
            "salt_content": 2.5,  # % NaCl
            "lycopene_content": 150,  # mg/kg
            "compatibility": ["316L_stainless", "glass", "ptfe", "epdm_food"],
            "incompatibility": ["iron", "copper", "tin_prolonged"]
        }
    },
    "soap_solution": {
        "name": "Solution Savonneuse (2%)",
        "density_20c": 1010,  # kg/m¬≥
        "viscosity_20c": 0.0013,  # Pa¬∑s
        "vapor_pressure_20c": 2250,  # Pa
        "temp_coeffs": {
            "density": -0.28,
            "viscosity": -0.00005,
            "vapor_pressure": 95
        },
        "technical_specs": {
            "surfactant_content": 2.0,  # % agents actifs
            "ph": 10.5,  # Basique
            "foam_tendency": "√âlev√©e",
            "biodegradability": "Biod√©gradable",
            "compatibility": ["stainless_steel", "pvc", "pp", "ptfe"],
            "incompatibility": ["aluminum_prolonged", "zinc"]
        }
    },
    "fruit_juice": {
        "name": "Jus de Fruits (Orange)",
        "density_20c": 1045,  # kg/m¬≥ (sucres naturels)
        "viscosity_20c": 0.0018,  # Pa¬∑s
        "vapor_pressure_20c": 2100,  # Pa
        "temp_coeffs": {
            "density": -0.35,
            "viscosity": -0.00007,
            "vapor_pressure": 88
        },
        "technical_specs": {
            "sugar_content": 11,  # % Brix
            "ph": 3.7,  # Acide citrique
            "vitamin_c": 50,  # mg/100ml
            "pulp_content": 8,  # % pulpe
            "compatibility": ["316L_stainless", "glass", "ptfe", "silicone_food"],
            "incompatibility": ["iron", "copper", "tin_uncoated"]
        }
    }
}

# Base de donn√©es compl√®te de compatibilit√© fluide-mat√©riau pour recommandations expertes
FLUID_MATERIAL_COMPATIBILITY = {
    # Structure: fluide -> mat√©riau -> {niveau, recommandations, joints, alertes}
    "water": {
        "stainless_steel_316l": {
            "level": "excellent",
            "description": "Compatibilit√© parfaite pour installations eau potable",
            "recommended_gaskets": ["EPDM", "Viton", "PTFE"],
            "maintenance": "Maintenance standard - Contr√¥le annuel",
            "lifespan": "25+ ans",
            "special_notes": "Id√©al pour applications alimentaires et sanitaires"
        },
        "pvc": {
            "level": "excellent", 
            "description": "Excellent pour eau froide, bon march√©",
            "recommended_gaskets": ["EPDM", "NBR"],
            "maintenance": "Faible maintenance requise",
            "lifespan": "20+ ans",
            "special_notes": "Limiter √† 60¬∞C maximum"
        },
        "carbon_steel": {
            "level": "poor",
            "description": "Risque de corrosion importante",
            "recommended_gaskets": ["NBR"],
            "maintenance": "Maintenance pr√©ventive intensive - Inspection trimestrielle",
            "lifespan": "5-10 ans avec traitement",
            "special_notes": "ATTENTION: Traitement anticorrosion obligatoire",
            "alternatives": ["316L Stainless Steel", "PVC", "Fonte Ductile rev√™tue"]
        }
    },
    
    "seawater": {
        "duplex_2205": {
            "level": "excellent",
            "description": "Sp√©cialement con√ßu pour milieux marins",
            "recommended_gaskets": ["Viton", "PTFE"],
            "maintenance": "Inspection semestrielle - Nettoyage chimique",
            "lifespan": "20+ ans",
            "special_notes": "R√©sistance optimale aux chlorures"
        },
        "bronze_naval": {
            "level": "excellent",
            "description": "Alliage marin traditionnel √©prouv√©",
            "recommended_gaskets": ["Viton", "EPDM Naval"],
            "maintenance": "Polissage annuel - Contr√¥le galvanique",
            "lifespan": "15+ ans",
            "special_notes": "√âviter contact avec acier carbone (corrosion galvanique)"
        },
        "stainless_steel_316l": {
            "level": "good",
            "description": "Acceptable avec surveillance renforc√©e",
            "recommended_gaskets": ["Viton", "PTFE"],
            "maintenance": "Inspection trimestrielle - Contr√¥le piq√ªres",
            "lifespan": "10-15 ans",
            "special_notes": "ATTENTION: Risque de corrosion par piq√ªres √† long terme",
            "alternatives": ["Duplex 2205", "Super Duplex 2507", "Bronze Naval"]
        },
        "carbon_steel": {
            "level": "incompatible",
            "description": "INTERDIT - Corrosion massive assur√©e",
            "maintenance": "NON APPLICABLE",
            "lifespan": "D√©faillance en quelques mois",
            "special_notes": "DANGER: D√©faillance catastrophique pr√©vue",
            "alternatives": ["Duplex 2205", "Bronze Naval", "Super Duplex 2507"]
        }
    },

    "diesel": {
        "carbon_steel": {
            "level": "excellent",
            "description": "Standard de l'industrie p√©troli√®re",
            "recommended_gaskets": ["Viton FKM", "NBR Carburant"],
            "maintenance": "Inspection annuelle - Test √©tanch√©it√©",
            "lifespan": "20+ ans",
            "special_notes": "Solution √©conomique et √©prouv√©e"
        },
        "stainless_steel_316l": {
            "level": "excellent",
            "description": "Qualit√© premium - R√©sistance maximale",
            "recommended_gaskets": ["Viton FKM", "PTFE"],
            "maintenance": "Maintenance minimale",
            "lifespan": "25+ ans",
            "special_notes": "Investissement √† long terme"
        },
        "pvc": {
            "level": "poor",
            "description": "Non recommand√© - Gonflement et fragilisation",
            "maintenance": "Remplacement fr√©quent n√©cessaire",
            "lifespan": "2-5 ans maximum",
            "special_notes": "ATTENTION: Risque de fuite √† terme",
            "alternatives": ["Acier Carbone", "316L Stainless Steel", "HDPE Carburant"]
        }
    },

    "gasoline": {
        "stainless_steel_316l": {
            "level": "excellent",
            "description": "S√©curit√© maximale pour carburant volatile",
            "recommended_gaskets": ["Viton FKM", "PTFE"],
            "maintenance": "Inspection stricte semestrielle",
            "lifespan": "20+ ans",
            "special_notes": "Conforme r√©glementation carburants"
        },
        "aluminum_5052": {
            "level": "excellent",
            "description": "L√©ger et r√©sistant - Standard aviation",
            "recommended_gaskets": ["Viton FKM"],
            "maintenance": "Contr√¥le corrosion annuel",
            "lifespan": "15+ ans",
            "special_notes": "Excellent rapport poids/r√©sistance"
        },
        "pvc": {
            "level": "incompatible",
            "description": "INTERDIT - Dissolution du plastique",
            "maintenance": "NON APPLICABLE",
            "lifespan": "D√©faillance imm√©diate",
            "special_notes": "DANGER: Risque de fuite majeure et incendie",
            "alternatives": ["316L Stainless Steel", "Aluminum 5052", "Acier Rev√™tu PTFE"]
        }
    },

    "milk": {
        "stainless_steel_316l": {
            "level": "excellent",
            "description": "Standard alimentaire - Hygi√®ne maximale",
            "recommended_gaskets": ["EPDM Food Grade", "Silicone Alimentaire"],
            "maintenance": "Nettoyage CIP quotidien - St√©rilisation p√©riodique",
            "lifespan": "20+ ans",
            "special_notes": "Certification FDA/CE alimentaire"
        },
        "pvc_food": {
            "level": "good",
            "description": "Acceptable pour circuits froids",
            "recommended_gaskets": ["EPDM Food Grade"],
            "maintenance": "Nettoyage manuel quotidien",
            "lifespan": "10+ ans",
            "special_notes": "Limiter √† 40¬∞C - Certification alimentaire obligatoire"
        },
        "copper": {
            "level": "incompatible",
            "description": "INTERDIT - Contamination m√©tallique",
            "maintenance": "NON APPLICABLE",
            "special_notes": "DANGER: Contamination du lait - Non conforme normes alimentaires",
            "alternatives": ["316L Stainless Steel", "PVC Food Grade", "Verre Borosilicate"]
        }
    },

    "honey": {
        "stainless_steel_316l": {
            "level": "excellent",
            "description": "Id√©al pour produits sucr√©s acides",
            "recommended_gaskets": ["Silicone Food Grade", "EPDM Alimentaire"],
            "maintenance": "Nettoyage √† l'eau chaude - Pas de d√©tergent agressif",
            "lifespan": "25+ ans",
            "special_notes": "R√©sistance parfaite aux acides naturels du miel"
        },
        "copper": {
            "level": "incompatible", 
            "description": "INTERDIT - Catalyse fermentation",
            "special_notes": "DANGER: Acc√©l√©ration fermentation - Alt√©ration qualit√© miel",
            "alternatives": ["316L Stainless Steel", "Verre", "C√©ramique Alimentaire"]
        }
    },

    "bleach": {
        "pvc": {
            "level": "excellent",
            "description": "Mat√©riau de r√©f√©rence pour hypochlorite",
            "recommended_gaskets": ["Viton Chlore", "EPDM R√©sistant Chlore"],
            "maintenance": "Rin√ßage apr√®s usage - Contr√¥le visuel mensuel",
            "lifespan": "10+ ans",
            "special_notes": "Sp√©cialement formul√© pour r√©sister au chlore"
        },
        "cpvc": {
            "level": "excellent",
            "description": "Haute r√©sistance chimique et thermique",
            "recommended_gaskets": ["Viton Chlore", "PTFE"],
            "maintenance": "Inspection trimestrielle",
            "lifespan": "15+ ans",
            "special_notes": "Sup√©rieur au PVC pour applications chaudes"
        },
        "stainless_steel_316l": {
            "level": "incompatible",
            "description": "INTERDIT - Corrosion par piq√ªres rapide",
            "special_notes": "DANGER: D√©faillance structurelle assur√©e avec hypochlorite",
            "alternatives": ["PVC", "CPVC", "PVDF", "PTFE"]
        }
    }
}

# ============================================================================
# ENHANCED PYDANTIC MODELS FOR THREE TABS
# ============================================================================

class FluidProperties(BaseModel):
    name: str
    density: float  # kg/m¬≥
    viscosity: float  # Pa¬∑s
    vapor_pressure: float  # Pa

class FittingInput(BaseModel):
    fitting_type: str
    quantity: int = 1

class NPSHdCalculationInput(BaseModel):
    suction_type: str = "flooded"  # "flooded" or "suction_lift"
    hasp: float  # m (suction height - positive = flooded / negative = suction lift)
    flow_rate: float  # m¬≥/h
    fluid_type: str
    temperature: float = 20  # ¬∞C
    pipe_diameter: float  # mm
    pipe_material: str
    pipe_length: float  # m (suction side)
    suction_fittings: List[FittingInput] = []
    npsh_required: float = 3.5  # m (NPSH requis from pump manufacturer)

class HMTCalculationInput(BaseModel):
    installation_type: str = "surface"  # "surface" or "submersible"
    suction_type: str = "flooded"  # "flooded" or "suction_lift" (only for surface installation)
    hasp: float  # m (suction height - only for surface installation)
    discharge_height: float  # m
    useful_pressure: float = 0  # bar (required delivery pressure)
    suction_pipe_diameter: float  # mm
    discharge_pipe_diameter: float  # mm
    suction_pipe_length: float  # m
    discharge_pipe_length: float  # m
    suction_pipe_material: str
    discharge_pipe_material: str
    suction_fittings: List[FittingInput] = []
    discharge_fittings: List[FittingInput] = []
    fluid_type: str
    temperature: float = 20  # ¬∞C
    flow_rate: float  # m¬≥/h

class PerformanceAnalysisInput(BaseModel):
    flow_rate: float  # m¬≥/h
    hmt: float  # m
    pipe_diameter: float  # mm
    required_npsh: Optional[float] = None  # m (from pump datasheet) - Made optional
    calculated_npshd: Optional[float] = None  # m (from Tab 1) - Made optional
    fluid_type: str
    pipe_material: str
    pump_efficiency: float  # %
    motor_efficiency: float  # %
    absorbed_power: Optional[float] = None  # kW (P1)
    hydraulic_power: Optional[float] = None  # kW (P2)
    starting_method: str = "star_delta"  # or "direct_on_line"
    power_factor: float = 0.8  # cos œÜ
    cable_length: float  # m
    cable_material: str = "copper"  # or "aluminum"
    cable_section: Optional[float] = None  # mm¬≤
    voltage: int = 400  # V

class NPSHdResult(BaseModel):
    input_data: NPSHdCalculationInput
    fluid_properties: FluidProperties
    atmospheric_pressure: float  # Pa (constant at sea level)
    velocity: float  # m/s
    reynolds_number: float
    friction_factor: float
    linear_head_loss: float  # m
    singular_head_loss: float  # m
    total_head_loss: float  # m
    npshd: float  # m
    npsh_required: float  # m
    npsh_margin: float  # m (NPSHd - NPSHr)
    cavitation_risk: bool
    recommendations: List[str]  # Corrective actions for cavitation
    warnings: List[str]

class HMTResult(BaseModel):
    input_data: HMTCalculationInput
    fluid_properties: FluidProperties
    suction_velocity: Optional[float] = None  # m/s - Optional for submersible
    discharge_velocity: float  # m/s
    suction_head_loss: Optional[float] = None  # m - Optional for submersible
    discharge_head_loss: float  # m
    total_head_loss: float  # m
    static_head: float  # m
    useful_pressure_head: float  # m
    hmt: float  # m
    warnings: List[str]
    recommendations: List[str] = []  # Nouvelles recommandations intelligentes

class ExpertAnalysisInput(BaseModel):
    # Param√®tres hydrauliques
    flow_rate: float  # m¬≥/h
    fluid_type: str
    temperature: float = 20  # ¬∞C
    
    # Type d'aspiration
    suction_type: str = "flooded"  # "flooded" ou "suction_lift"
    
    # G√©om√©trie
    suction_pipe_diameter: float  # mm (pour calculs)
    discharge_pipe_diameter: float  # mm (pour calculs)
    suction_dn: Optional[int] = None  # DN s√©lectionn√© par l'utilisateur (pour recommandations)
    discharge_dn: Optional[int] = None  # DN s√©lectionn√© par l'utilisateur (pour recommandations)
    suction_height: float  # m
    discharge_height: float  # m
    suction_length: float  # m
    discharge_length: float  # m
    total_length: float  # m
    
    # Pression utile
    useful_pressure: float = 0  # bar
    
    # Mat√©riaux
    suction_material: str
    discharge_material: str
    
    # Singularit√©s d√©taill√©es ASPIRATION
    suction_elbow_90: int = 0
    suction_elbow_45: int = 0
    suction_elbow_30: int = 0
    suction_tee_flow: int = 0
    suction_tee_branch: int = 0
    suction_reducer_gradual: int = 0
    suction_reducer_sudden: int = 0
    suction_enlarger_gradual: int = 0
    suction_enlarger_sudden: int = 0
    suction_gate_valve: int = 0
    suction_globe_valve: int = 0
    suction_ball_valve: int = 0
    suction_butterfly_valve: int = 0
    suction_check_valve: int = 0
    suction_strainer: int = 0
    suction_foot_valve: int = 0
    
    # Singularit√©s d√©taill√©es REFOULEMENT
    discharge_elbow_90: int = 0
    discharge_elbow_45: int = 0
    discharge_elbow_30: int = 0
    discharge_tee_flow: int = 0
    discharge_tee_branch: int = 0
    discharge_reducer_gradual: int = 0
    discharge_reducer_sudden: int = 0
    discharge_enlarger_gradual: int = 0
    discharge_enlarger_sudden: int = 0
    discharge_gate_valve: int = 0
    discharge_globe_valve: int = 0
    discharge_ball_valve: int = 0
    discharge_butterfly_valve: int = 0
    discharge_check_valve: int = 0
    discharge_strainer: int = 0
    discharge_flow_meter: int = 0
    discharge_pressure_gauge: int = 0
    
    # √âlectrique
    pump_efficiency: float  # %
    motor_efficiency: float  # %
    voltage: int = 400  # V
    power_factor: float = 0.8
    starting_method: str = "star_delta"
    cable_length: float  # m
    cable_material: str = "copper"
    
    # Expert
    npsh_required: float  # m
    installation_type: str = "surface"
    pump_type: str = "centrifugal"
    operating_hours: float = 8760  # h/an
    electricity_cost: float = 0.12  # ‚Ç¨/kWh
    
    # Conditions environnementales
    altitude: float = 0
    ambient_temperature: float = 25
    humidity: float = 60

class ExpertAnalysisResult(BaseModel):
    input_data: ExpertAnalysisInput
    
    # R√©sultats combin√©s
    npshd_analysis: Dict[str, Any]
    hmt_analysis: Dict[str, Any]
    performance_analysis: Dict[str, Any]
    electrical_analysis: Dict[str, Any]
    
    # Analyse globale
    overall_efficiency: float  # %
    total_head_loss: float  # m
    system_stability: bool
    energy_consumption: float  # kWh/m¬≥
    
    # Recommandations d'expert
    expert_recommendations: List[Dict[str, Any]]
    optimization_potential: Dict[str, Any]
    
    # Donn√©es pour graphiques
    performance_curves: Dict[str, Any]
    system_curves: Dict[str, Any]

class PerformanceAnalysisResult(BaseModel):
    input_data: PerformanceAnalysisInput
    # Removed NPSH fields as requested
    pump_efficiency: float  # %
    motor_efficiency: float  # %
    overall_efficiency: float  # %
    velocity: float  # m/s - Added velocity data
    reynolds_number: float  # Added Reynolds number
    nominal_current: float  # A
    starting_current: float  # A
    recommended_cable_section: float  # mm¬≤
    power_calculations: Dict[str, float]
    electrical_data: Dict[str, Any]
    performance_curves: Dict[str, Any]  # Flow points and corresponding values
    recommendations: List[str]
    warnings: List[str]
    alerts: List[str]  # Added alerts field

# Legacy models for backward compatibility
class CalculationInput(BaseModel):
    flow_rate: float  # m¬≥/h
    suction_height: float  # m (positive for suction, negative for flooded)
    pipe_diameter: float  # mm
    pipe_length: float  # m
    fluid_type: str
    temperature: float = 20  # ¬∞C
    npsh_available: Optional[float] = None  # m
    pump_efficiency: float = 75  # %
    motor_efficiency: float = 90  # %
    voltage: int = 400  # V (230 or 400)
    cable_length: float = 50  # m

class CalculationResult(BaseModel):
    # Input parameters
    input_data: CalculationInput
    
    # Fluid properties
    fluid_properties: FluidProperties
    
    # Flow calculations
    flow_velocity: float  # m/s
    reynolds_number: float
    friction_factor: float
    
    # Pressure calculations
    linear_pressure_loss: float  # Pa
    total_pressure_loss: float  # Pa
    hmt_meters: float  # m
    hmt_bar: float  # bar
    
    # NPSH calculations
    npsh_required: float  # m
    npsh_available_calc: float  # m
    cavitation_risk: bool
    
    # Power calculations
    hydraulic_power: float  # kW
    absorbed_power: float  # kW
    total_efficiency: float  # %
    
    # Electrical calculations
    nominal_current: float  # A
    cable_section: float  # mm¬≤
    starting_method: str
    
    # Warnings and alerts
    warnings: List[str]

class PumpHistory(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    project_name: str
    calculation_result: CalculationResult
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class PumpHistoryCreate(BaseModel):
    project_name: str
    calculation_result: CalculationResult

# ========================================================================================================
# AUDIT SYSTEM - CLASSES ET MOD√àLES POUR AUDIT TERRAIN EXPERT
# ========================================================================================================

class AuditInput(BaseModel):
    """Input pour audit terrain professionnel - Donn√©es comparatives expert"""
    
    # Installation et contexte
    installation_age: Optional[int] = None
    installation_type: str = "surface"
    fluid_type: str = "water"
    fluid_temperature: float = 20.0
    
    # Mat√©riaux et diam√®tres CRITIQUES
    suction_material: str = "pvc"
    discharge_material: str = "pvc"
    suction_pipe_diameter: float = 114.3  # DN100
    discharge_pipe_diameter: float = 88.9  # DN80
    
    # PERFORMANCES HYDRAULIQUES - Comparaison ACTUEL vs REQUIS vs ORIGINAL
    current_flow_rate: Optional[float] = None      # D√©bit mesur√© actuellement (m¬≥/h)
    required_flow_rate: Optional[float] = None     # D√©bit requis process (m¬≥/h)
    original_design_flow: Optional[float] = None   # D√©bit conception (m¬≥/h)
    
    current_hmt: Optional[float] = None            # HMT mesur√©e actuellement (m)
    required_hmt: Optional[float] = None           # HMT requise process (m)
    original_design_hmt: Optional[float] = None    # HMT conception (m)
    
    # Pressions mesures TERRAIN
    suction_pressure: Optional[float] = None       # Pression aspiration (bar)
    discharge_pressure: Optional[float] = None     # Pression refoulement (bar)
    
    # PERFORMANCES √âLECTRIQUES - Comparaison MESURES vs PLAQUE
    measured_current: Optional[float] = None       # Intensit√© mesur√©e (A)
    rated_current: Optional[float] = None          # Intensit√© plaque (A)
    measured_power: Optional[float] = None         # Puissance mesur√©e (kW)
    rated_power: Optional[float] = None            # Puissance plaque (kW)
    measured_voltage: Optional[float] = None       # Tension mesur√©e (V)
    rated_voltage: float = 400.0                   # Tension nominale (V)
    measured_power_factor: Optional[float] = None  # Cos œÜ mesur√©
    
    # √âTAT M√âCANIQUE - Observations terrain
    vibration_level: Optional[float] = None        # Vibrations (mm/s)
    noise_level: Optional[float] = None            # Bruit (dB(A))
    motor_temperature: Optional[float] = None      # Temp√©rature moteur (¬∞C)
    bearing_temperature: Optional[float] = None    # Temp√©rature paliers (¬∞C)
    
    # √âtats visuels
    leakage_present: bool = False
    corrosion_level: str = "none"  # none, light, moderate, severe
    alignment_status: str = "good"  # excellent, good, fair, poor
    coupling_condition: str = "good"  # excellent, good, fair, poor
    foundation_status: str = "good"  # excellent, good, fair, poor
    
    # EXPLOITATION
    operating_hours_daily: Optional[float] = None
    operating_days_yearly: Optional[float] = None
    last_maintenance: Optional[str] = None
    maintenance_frequency: str = "monthly"
    
    # Probl√©matiques
    reported_issues: List[str] = []
    performance_degradation: bool = False
    energy_consumption_increase: bool = False
    
    # CONTEXTE √âNERG√âTIQUE
    electricity_cost_per_kwh: float = 0.12
    load_factor: float = 0.75
    has_vfd: bool = False
    has_soft_starter: bool = False
    has_automation: bool = False

class AuditComparisonAnalysis(BaseModel):
    """Analyse comparative des performances"""
    parameter_name: str
    current_value: Optional[float]
    required_value: Optional[float] 
    original_design_value: Optional[float]
    deviation_from_required: Optional[float]  # % d'√©cart vs requis
    deviation_from_design: Optional[float]    # % d'√©cart vs conception
    status: str  # "optimal", "acceptable", "problematic", "critical"
    interpretation: str
    impact: str

class AuditDiagnostic(BaseModel):
    """Diagnostic d√©taill√© d'un aspect"""
    category: str  # "hydraulic", "electrical", "mechanical", "operational"
    issue: str
    severity: str  # "critical", "high", "medium", "low"
    root_cause: str
    symptoms: List[str]
    consequences: List[str]
    urgency: str  # "immediate", "short_term", "medium_term", "long_term"

class AuditRecommendation(BaseModel):
    """Recommandation d'am√©lioration d√©taill√©e"""
    priority: str  # "critical", "high", "medium", "low"
    category: str  # "safety", "efficiency", "reliability", "maintenance"
    action: str
    description: str
    technical_details: List[str]
    cost_estimate_min: float
    cost_estimate_max: float
    timeline: str
    expected_benefits: List[str]
    roi_months: Optional[int]
    risk_if_not_done: str

class AuditResult(BaseModel):
    """R√©sultat complet d'audit expert"""
    audit_id: str
    audit_date: str
    
    # Scores globaux
    overall_score: int  # /100
    hydraulic_score: int  # /100
    electrical_score: int  # /100
    mechanical_score: int  # /100
    operational_score: int  # /100
    
    # Analyses comparatives d√©taill√©es
    performance_comparisons: List[AuditComparisonAnalysis]
    
    # Diagnostics par cat√©gorie
    diagnostics: List[AuditDiagnostic]
    
    # Recommandations prioris√©es
    recommendations: List[AuditRecommendation]
    
    # Synth√®se executive
    executive_summary: Dict[str, Any]
    
    # Analyse √©conomique
    economic_analysis: Dict[str, Any]
    
    # Plan d'action prioritaire
    action_plan: Dict[str, Any]
    
    # Rapport d'expertise exhaustif avec analyse crois√©e
    expert_installation_report: Optional[Dict[str, Any]] = None

# ============================================================================
# ENHANCED HYDRAULIC CALCULATION FUNCTIONS
# ============================================================================

def calculate_atmospheric_pressure(altitude: float) -> float:
    """Calculate atmospheric pressure based on altitude (m)"""
    # Barometric formula: P = P0 * (1 - 0.0065 * h / 288.15)^5.255
    P0 = 101325  # Pa at sea level
    return P0 * (1 - 0.0065 * altitude / 288.15) ** 5.255

def calculate_singular_head_loss(velocity: float, fittings: List[FittingInput]) -> float:
    """Calculate singular head losses from fittings"""
    total_k = 0
    for fitting in fittings:
        if fitting.fitting_type in FITTING_COEFFICIENTS:
            k_value = FITTING_COEFFICIENTS[fitting.fitting_type]["k"]
            total_k += k_value * fitting.quantity
    
    return total_k * (velocity**2) / (2 * 9.81)  # Head loss in meters

def calculate_linear_head_loss_enhanced(velocity: float, pipe_length: float, 
                                      pipe_diameter: float, pipe_material: str,
                                      reynolds_number: float) -> float:
    """Enhanced linear head loss calculation using pipe material roughness"""
    if pipe_material not in PIPE_MATERIALS:
        roughness = 0.045  # Default steel roughness
    else:
        roughness = PIPE_MATERIALS[pipe_material]["roughness"]
    
    diameter_m = pipe_diameter / 1000  # Convert mm to m
    relative_roughness = roughness / pipe_diameter  # Relative roughness
    
    # Calculate friction factor using Colebrook-White equation (Swamee-Jain approximation)
    if reynolds_number < 2300:
        # Laminar flow
        friction_factor = 64 / reynolds_number
    else:
        # Turbulent flow
        term1 = (relative_roughness / 3.7) ** 1.11
        term2 = 6.9 / reynolds_number
        friction_factor = 0.25 / (math.log10(term1 + term2) ** 2)
    
    # Darcy-Weisbach equation for head loss
    return friction_factor * (pipe_length / diameter_m) * (velocity**2) / (2 * 9.81)

def get_fluid_properties(fluid_type: str, temperature: float) -> FluidProperties:
    """Calculate temperature-dependent fluid properties"""
    if fluid_type not in FLUID_PROPERTIES:
        raise ValueError(f"Unknown fluid type: {fluid_type}")
    
    base_props = FLUID_PROPERTIES[fluid_type]
    temp_diff = temperature - 20
    
    # Calculate temperature-adjusted properties
    density = base_props["density_20c"] + (base_props["temp_coeffs"]["density"] * temp_diff)
    viscosity = base_props["viscosity_20c"] + (base_props["temp_coeffs"]["viscosity"] * temp_diff)
    vapor_pressure = base_props["vapor_pressure_20c"] + (base_props["temp_coeffs"]["vapor_pressure"] * temp_diff)
    
    # Ensure minimum values
    density = max(density, 500)
    viscosity = max(viscosity, 0.0001)
    vapor_pressure = max(vapor_pressure, 0)
    
    return FluidProperties(
        name=base_props["name"],
        density=density,
        viscosity=viscosity,
        vapor_pressure=vapor_pressure
    )

def analyze_chemical_compatibility(fluid_type: str, suction_material: str, discharge_material: str, temperature: float) -> Dict[str, Any]:
    """
    Analyser la compatibilit√© chimique entre le fluide et les mat√©riaux √† une temp√©rature donn√©e
    avec recommandations avanc√©es de mat√©riaux, joints et suggestions hydrauliques
    """
    if fluid_type not in FLUID_PROPERTIES:
        return {"status": "unknown_fluid", "recommendations": [], "warnings": []}
    
    fluid_data = FLUID_PROPERTIES[fluid_type]
    fluid_name = fluid_data["name"]
    
    # Dictionnaire de mapping des mat√©riaux (nom technique -> nom FLUID_PROPERTIES)
    material_mapping = {
        "pvc": ["pvc", "pvc_food"],
        "pehd": ["pehd", "pe", "polyethylene"],
        "steel": ["steel", "carbon_steel"],
        "steel_galvanized": ["galvanized_steel", "galvanized"],
        "stainless_steel_316": ["stainless_steel", "316L_stainless", "316L", "stainless"],
        "stainless_steel_304": ["stainless_steel", "304_stainless", "304", "stainless"],
        "copper": ["copper", "copper_alloys"],
        "brass": ["brass", "copper_alloys"],
        "cast_iron": ["cast_iron", "fonte"],
        "concrete": ["concrete"],
        "aluminum": ["aluminum"]
    }
    
    # Base de donn√©es avanc√©e des joints selon les fluides
    recommended_seals = {
        "acid": {
            "seals": ["PTFE", "FKM (Viton)", "EPDM"],
            "avoid": ["NBR (Nitrile)", "Caoutchouc naturel"],
            "notes": "Joints en PTFE pour acides concentr√©s, FKM pour acides dilu√©s"
        },
        "gasoline": {
            "seals": ["NBR (Nitrile)", "FKM (Viton)", "CR (N√©opr√®ne)"],
            "avoid": ["EPDM", "Caoutchouc naturel"],
            "notes": "FKM obligatoire pour temp√©ratures √©lev√©es >80¬∞C"
        },
        "diesel": {
            "seals": ["NBR (Nitrile)", "FKM (Viton)", "CR (N√©opr√®ne)"],
            "avoid": ["EPDM", "Caoutchouc naturel"],
            "notes": "Attention aux biocarburants - pr√©f√©rer FKM"
        },
        "seawater": {
            "seals": ["EPDM", "FKM (Viton)", "CR (N√©opr√®ne)"],
            "avoid": ["NBR", "Caoutchouc naturel"],
            "notes": "EPDM r√©sistant au chlore, FKM pour applications critiques"
        },
        "milk": {
            "seals": ["EPDM alimentaire", "Silicone FDA", "FKM alimentaire"],
            "avoid": ["NBR", "Caoutchouc naturel"],
            "notes": "Certifications FDA/CE obligatoires pour contact alimentaire"
        },
        "honey": {
            "seals": ["EPDM alimentaire", "Silicone FDA", "PTFE"],
            "avoid": ["NBR", "Caoutchouc naturel"],
            "notes": "R√©sistance aux sucres concentr√©s, nettoyage vapeur"
        },
        "water": {
            "seals": ["EPDM", "NBR", "CR (N√©opr√®ne)"],
            "avoid": [],
            "notes": "EPDM recommand√© pour eau potable"
        },
        "oil": {
            "seals": ["NBR (Nitrile)", "FKM (Viton)", "Polyur√©thane"],
            "avoid": ["EPDM"],
            "notes": "NBR √©conomique, FKM pour huiles haute temp√©rature"
        }
    }
    
    compatibility_analysis = {
        "fluid_name": fluid_name,
        "compatible_materials": [],
        "incompatible_materials": [],
        "suction_material_status": "unknown",
        "discharge_material_status": "unknown",
        "temperature_warnings": [],
        "recommendations": [],
        "optimal_materials": [],
        "seal_recommendations": [],
        "hydraulic_advice": []
    }
    
    # Obtenir les listes de compatibilit√© du fluide
    if "technical_specs" in fluid_data and "compatibility" in fluid_data["technical_specs"]:
        compatibility_analysis["compatible_materials"] = fluid_data["technical_specs"]["compatibility"]
    
    if "technical_specs" in fluid_data and "incompatibility" in fluid_data["technical_specs"]:
        compatibility_analysis["incompatible_materials"] = fluid_data["technical_specs"]["incompatibility"]
    
    # Analyser la compatibilit√© des mat√©riaux d'aspiration et refoulement
    def check_material_compatibility(material: str) -> str:
        """V√©rifier la compatibilit√© d'un mat√©riau avec le fluide"""
        if not material or material == "unknown":
            return "unknown"
        
        # Rechercher le mat√©riau dans le mapping
        material_variants = material_mapping.get(material, [material])
        material_variants.append(material)  # Ajouter le mat√©riau original
        
        # V√©rifier compatibilit√©
        for variant in material_variants:
            if variant in compatibility_analysis["compatible_materials"]:
                return "compatible"
            if variant in compatibility_analysis["incompatible_materials"]:
                return "incompatible"
        
        return "unknown"
    
    compatibility_analysis["suction_material_status"] = check_material_compatibility(suction_material)
    compatibility_analysis["discharge_material_status"] = check_material_compatibility(discharge_material)
    
    # === RECOMMANDATIONS AVANC√âES DE JOINTS ===
    if fluid_type in recommended_seals:
        seal_info = recommended_seals[fluid_type]
        compatibility_analysis["seal_recommendations"].extend([
            f"üîß JOINTS RECOMMAND√âS pour {fluid_name}:",
            f"‚úÖ Joints adapt√©s: {', '.join(seal_info['seals'])}",
            f"‚ùå Joints √† √©viter: {', '.join(seal_info['avoid'])}" if seal_info['avoid'] else "‚ùå Aucun joint sp√©cifiquement d√©conseill√©",
            f"üí° Note technique: {seal_info['notes']}"
        ])
    
    # === RECOMMANDATIONS SP√âCIFIQUES PAR FLUIDE ===
    if fluid_type == "acid":
        compatibility_analysis["recommendations"].extend([
            "‚ö†Ô∏è FLUIDE CORROSIF - Pr√©cautions sp√©ciales requises",
            "üèóÔ∏è Mat√©riaux recommand√©s: Inox 316L (optimal), PVC/PP (√©conomique)",
            "üîß Boulonnerie: Inox A4 (316L) obligatoire",
            "üõ°Ô∏è Rev√™tements: R√©sine √©poxy ou polyur√©thane",
            "üìä Surveillance pH et inspection trimestrielle",
            "üöø √âquipements rin√ßage d'urgence obligatoires"
        ])
        
        if temperature > 60:
            compatibility_analysis["recommendations"].append(
                "üå°Ô∏è HAUTE TEMP√âRATURE + ACIDE: Utiliser uniquement Inox 316L ou Hastelloy"
            )
    
    elif fluid_type in ["gasoline", "diesel"]:
        compatibility_analysis["recommendations"].extend([
            "‚õΩ FLUIDE INFLAMMABLE - Mise √† la terre obligatoire",
            "üèóÔ∏è Mat√©riaux: Inox 316L ou acier au carbone avec rev√™tement",
            "‚ö° √âquipements antid√©flagrants (ATEX Zone 1)",
            "üîß Joints FKM (Viton) - r√©sistance hydrocarbures",
            "üîÑ Syst√®me de r√©cup√©ration des vapeurs",
            "üìè Dilatation thermique importante - compensateurs requis"
        ])
        
        if fluid_type == "gasoline":
            compatibility_analysis["recommendations"].append(
                "üö® ESSENCE: Pression vapeur √©lev√©e - r√©servoirs sous pression"
            )
    
    elif fluid_type == "seawater":
        compatibility_analysis["recommendations"].extend([
            "üåä EAU DE MER - Corrosion saline critique",
            "üèóÔ∏è Mat√©riau OBLIGATOIRE: Inox 316L minimum (id√©al: Duplex 2205)",
            "üîß Anodes sacrificielles en zinc ou aluminium",
            "üõ°Ô∏è Protection cathodique active recommand√©e",
            "üß™ Surveillance chlorures et inspection mensuelle",
            "üíß Rin√ßage eau douce apr√®s arr√™t prolong√©"
        ])
    
    elif fluid_type in ["milk", "honey", "wine"]:
        compatibility_analysis["recommendations"].extend([
            "ü•õ FLUIDE ALIMENTAIRE - Normes sanitaires strictes",
            "üèóÔ∏è Mat√©riaux: Inox 316L poli sanitaire (Ra ‚â§ 0.8 Œºm)",
            "üîß Joints FDA/CE - Silicone ou EPDM alimentaire",
            "üßΩ Nettoyage CIP (Clean In Place) int√©gr√©",
            "üå°Ô∏è Tra√ßage vapeur pour maintien temp√©rature",
            "üìã Tra√ßabilit√© et validation HACCP"
        ])
        
        if fluid_type == "milk":
            compatibility_analysis["recommendations"].append(
                "‚ùÑÔ∏è LAIT: Refroidissement rapide <4¬∞C - √©changeurs plates"
            )
    
    # === CONSEILS HYDRAULIQUES AVANC√âS ===
    viscosity = fluid_data["viscosity_20c"]
    
    if viscosity > 0.1:  # Fluides visqueux
        compatibility_analysis["hydraulic_advice"].extend([
            "üåä FLUIDE VISQUEUX - Adaptations hydrauliques:",
            "üìè Diam√®tres major√©s +20% minimum",
            "‚öôÔ∏è Pompe volum√©trique recommand√©e si Œ∑ < 10 cP",
            "üîÑ Vitesses r√©duites: aspiration <1m/s, refoulement <2m/s",
            "üå°Ô∏è Pr√©chauffage pour r√©duire viscosit√©",
            "üìä Courbes de pompe √† recalculer selon viscosit√©"
        ])
    
    if "vapor_pressure_20c" in fluid_data and fluid_data["vapor_pressure_20c"] > 5000:  # Fluides volatils
        compatibility_analysis["hydraulic_advice"].extend([
            "üí® FLUIDE VOLATIL - Pr√©cautions NPSH:",
            "üìè Diam√®tres aspiration major√©s +30%",
            "‚¨áÔ∏è Hauteur aspiration minimis√©e (<3m si possible)",
            "‚ùÑÔ∏è Refroidissement fluide recommand√©",
            "üîí R√©servoir sous pression inerte (azote)",
            "üìä Calcul NPSH avec marge s√©curit√© +50%"
        ])
    
    # === RECOMMANDATIONS DE MAT√âRIAUX OPTIMAUX ===
    if fluid_type in ["acid", "seawater"]:
        compatibility_analysis["optimal_materials"] = [
            "Inox 316L (optimal)",
            "Duplex 2205 (haute performance)", 
            "Hastelloy C-276 (extr√™me)",
            "PVC/CPVC (√©conomique temp√©rature <60¬∞C)",
            "PTFE (joints et rev√™tements)"
        ]
    elif fluid_type in ["gasoline", "diesel", "ethanol", "methanol"]:
        compatibility_analysis["optimal_materials"] = [
            "Inox 316L",
            "Acier au carbone + rev√™tement √©poxy",
            "Aluminium 5083 (r√©servoirs)",
            "PTFE/FKM (joints)",
            "Acier galvanis√© (interdit - corrosion galvanique)"
        ]
    elif fluid_type in ["milk", "honey", "wine"]:
        compatibility_analysis["optimal_materials"] = [
            "Inox 316L poli sanitaire",
            "Inox 304L (acceptable usage non critique)",
            "PTFE/Silicone alimentaire (joints)",
            "PVC alimentaire (tuyauteries secondaires)",
            "Cuivre (interdit - contamination)"
        ]
    elif temperature > 80:
        compatibility_analysis["optimal_materials"] = [
            "Inox 316L (haute temp√©rature)",
            "Inox 321 (stabilis√© titane)",
            "Acier P91/P92 (vapeur)",
            "R√©fractaires (>200¬∞C)",
            "PVC (interdit >60¬∞C)"
        ]
    else:
        compatibility_analysis["optimal_materials"] = [
            "Inox 316L (polyvalent)",
            "PVC/CPVC (√©conomique)",
            "PEHD (enterr√©)",
            "Fonte ductile (r√©seaux)",
            "Acier galvanis√© (air comprim√©)"
        ]
    
    # G√©n√©rer des recommandations bas√©es sur l'analyse
    if compatibility_analysis["suction_material_status"] == "incompatible":
        compatibility_analysis["recommendations"].extend([
            f"‚ö†Ô∏è INCOMPATIBILIT√â D√âTECT√âE - Aspiration ({suction_material})",
            f"üîÑ Remplacement URGENT par: {compatibility_analysis['optimal_materials'][0]}",
            "‚è∞ Risque de d√©faillance pr√©matur√©e",
            "üí∞ Co√ªt remplacement < co√ªt panne"
        ])
    
    if compatibility_analysis["discharge_material_status"] == "incompatible":
        compatibility_analysis["recommendations"].extend([
            f"‚ö†Ô∏è INCOMPATIBILIT√â D√âTECT√âE - Refoulement ({discharge_material})",
            f"üîÑ Remplacement URGENT par: {compatibility_analysis['optimal_materials'][0]}",
            "‚è∞ Risque de d√©faillance pr√©matur√©e",
            "üí∞ Co√ªt remplacement < co√ªt panne"
        ])
    
    # Recommandations g√©n√©rales de temp√©rature
    if temperature > 100:
        compatibility_analysis["recommendations"].extend([
            f"üå°Ô∏è HAUTE TEMP√âRATURE ({temperature}¬∞C) - Pr√©cautions:",
            "üîß Compensateurs de dilatation obligatoires",
            "üõ°Ô∏è Isolation thermique et calorifugeage",
            "‚öôÔ∏è Supports coulissants/pendulaires",
            "üìä Calculs contraintes thermiques",
            "üî• Protection personnel - risque br√ªlure"
        ])
    elif temperature > 60:
        compatibility_analysis["recommendations"].append(
            f"üå°Ô∏è Temp√©rature √©lev√©e ({temperature}¬∞C) - √âviter PVC, pr√©voir dilatation"
        )
    
    return compatibility_analysis

def calculate_reynolds_number(velocity: float, diameter: float, density: float, viscosity: float) -> float:
    """Calculate Reynolds number"""
    return (density * velocity * diameter) / viscosity

def calculate_friction_factor(reynolds_number: float, roughness: float = 0.000045) -> float:
    """Calculate friction factor using Colebrook-White equation (approximation)"""
    if reynolds_number < 2300:
        # Laminar flow
        return 64 / reynolds_number
    else:
        # Turbulent flow - Swamee-Jain approximation
        relative_roughness = roughness / 1000  # Assume 1m diameter for relative roughness
        term1 = (roughness / 3.7) ** 1.11
        term2 = 6.9 / reynolds_number
        return 0.25 / (math.log10(term1 + term2) ** 2)

def calculate_npshd_enhanced(input_data: NPSHdCalculationInput) -> NPSHdResult:
    """Enhanced NPSHd calculation with corrected formulas based on suction type"""
    warnings = []
    
    # Atmospheric pressure constant at sea level
    atmospheric_pressure = 101325  # Pa
    
    # Get fluid properties
    fluid_props = get_fluid_properties(input_data.fluid_type, input_data.temperature)
    
    # Calculate velocity
    pipe_area = math.pi * (input_data.pipe_diameter / 1000 / 2) ** 2
    velocity = (input_data.flow_rate / 3600) / pipe_area
    
    # Reynolds number
    reynolds_number = calculate_reynolds_number(
        velocity, input_data.pipe_diameter / 1000, 
        fluid_props.density, fluid_props.viscosity
    )
    
    # Calculate friction factor
    friction_factor = calculate_friction_factor(reynolds_number)
    
    # Linear head loss
    linear_head_loss = calculate_linear_head_loss_enhanced(
        velocity, input_data.pipe_length, input_data.pipe_diameter,
        input_data.pipe_material, reynolds_number
    )
    
    # Singular head loss
    singular_head_loss = calculate_singular_head_loss(velocity, input_data.suction_fittings)
    
    # Total head loss
    total_head_loss = linear_head_loss + singular_head_loss
    
    # Calculate NPSHd using the corrected formulas based on suction type
    # Convert atmospheric pressure to meters of fluid column
    patm_head = atmospheric_pressure / (fluid_props.density * 9.81)
    
    # Convert vapor pressure to meters of fluid column
    vapor_pressure_head = fluid_props.vapor_pressure / (fluid_props.density * 9.81)
    
    # Calculate NPSHd according to the corrected formulas
    if input_data.suction_type == "flooded":
        # En charge: NPSHd = Patm + œÅ*g*H_aspiration - Pertes de charges totales - Pression de vapeur saturante
        npshd = patm_head + abs(input_data.hasp) - total_head_loss - vapor_pressure_head
    else:  # suction_lift
        # En aspiration: NPSHd = Patm - œÅ*g*H_aspiration - Pertes de charges totales - Pression de vapeur saturante
        npshd = patm_head - abs(input_data.hasp) - total_head_loss - vapor_pressure_head
    
    # Enhanced warnings and alerts
    if velocity > 3.0:
        warnings.append(f"Vitesse √©lev√©e ({velocity:.2f} m/s) - RECOMMANDATION: Augmenter le diam√®tre de la tuyauterie")
    if velocity < 0.5:
        warnings.append(f"Vitesse faible ({velocity:.2f} m/s) - risque de s√©dimentation")
    if velocity > 2.5:
        warnings.append("ALERTE: Vitesse excessive - augmenter le diam√®tre de la tuyauterie pour r√©duire les pertes de charge")
    
    if npshd < 0:
        warnings.append("ATTENTION: NPSHd n√©gatif - conditions d'aspiration impossibles")
        warnings.append("RECOMMANDATION: R√©duire la hauteur d'aspiration et/ou la longueur de tuyauterie")
    if npshd < 2:
        warnings.append("ATTENTION: NPSHd tr√®s faible - risque de cavitation √©lev√©")
        warnings.append("RECOMMANDATION: V√©rifier le clapet anti-retour et r√©duire les pertes de charge")
    
    if total_head_loss > 3:
        warnings.append(f"Pertes de charge √©lev√©es ({total_head_loss:.2f} m) - RECOMMANDATION: Augmenter le diam√®tre ou r√©duire la longueur")
    
    if input_data.hasp > 6 and input_data.suction_type == "suction_lift":
        warnings.append("ALERTE: Hauteur d'aspiration excessive - r√©duire la hauteur d'aspiration")
    
    if input_data.pipe_length > 100:
        warnings.append("ALERTE: Longueur de tuyauterie excessive - r√©duire la longueur pour diminuer les pertes de charge")
    
    # Temperature and material alerts
    if input_data.temperature > 60:
        material_warnings = {
            "pvc": "ALERTE MAT√âRIAU: PVC non recommand√© au-dessus de 60¬∞C - utiliser PEHD ou acier",
            "pehd": "ATTENTION: PEHD pr√®s de sa limite de temp√©rature - v√©rifier la r√©sistance",
            "steel": "Mat√©riau acier adapt√© aux hautes temp√©ratures",
            "steel_galvanized": "Mat√©riau acier galvanis√© adapt√© aux hautes temp√©ratures",
            "cast_iron": "Mat√©riau fonte adapt√© aux hautes temp√©ratures",
            "concrete": "Mat√©riau b√©ton adapt√© aux hautes temp√©ratures"
        }
        if input_data.pipe_material in material_warnings:
            warnings.append(material_warnings[input_data.pipe_material])
    
    if input_data.temperature > 80:
        warnings.append("ALERTE TEMP√âRATURE: Temp√©rature tr√®s √©lev√©e - v√©rifier la compatibilit√© de tous les mat√©riaux")
    
    # Check valve alerts
    has_check_valve = any(fitting.fitting_type == "check_valve" for fitting in input_data.suction_fittings)
    if input_data.suction_type == "suction_lift" and not has_check_valve:
        warnings.append("RECOMMANDATION: Ajouter un clapet anti-retour pour l'aspiration en d√©pression")
    
    # Fitting-specific alerts
    total_fittings = sum(fitting.quantity for fitting in input_data.suction_fittings)
    if total_fittings > 5:
        warnings.append("ALERTE: Nombre excessif de raccords - r√©duire les raccords pour diminuer les pertes de charge")
    
    # NPSH Comparison and Cavitation Analysis
    npsh_required = input_data.npsh_required
    npsh_margin = npshd - npsh_required
    cavitation_risk = npshd <= npsh_required
    
    # Initialize recommendations list
    recommendations = []
    
    # Cavitation risk analysis and recommendations
    if cavitation_risk:
        warnings.append("üö® RISQUE DE CAVITATION D√âTECT√â!")
        warnings.append(f"NPSHd calcul√© ({npshd:.2f} m) ‚â§ NPSH requis ({npsh_required:.2f} m)")
        warnings.append(f"Marge de s√©curit√©: {npsh_margin:.2f} m (N√âGATIVE)")
        
        # Detailed corrective recommendations
        recommendations.append("üîß CORRECTIONS POUR √âLIMINER LA CAVITATION:")
        
        # 1. Reduce suction height
        if input_data.suction_type == "suction_lift" and input_data.hasp > 0:
            new_hasp = input_data.hasp - abs(npsh_margin) - 0.5
            if new_hasp > 0:
                recommendations.append(f"‚Ä¢ R√©duire la hauteur d'aspiration de {input_data.hasp:.1f}m √† {new_hasp:.1f}m")
            else:
                recommendations.append(f"‚Ä¢ Passer en aspiration en charge (pompe sous le niveau du liquide)")
        
        # 2. Increase pipe diameter with graduated recommendations
        current_velocity = velocity
        if current_velocity > 1.5:
            current_dn = get_dn_from_diameter(input_data.pipe_diameter)
            
            # Calculer plusieurs options de diam√®tre avec analyse co√ªt-b√©n√©fice
            diameter_options = calculate_graduated_diameter_recommendations(
                input_data.pipe_diameter, 
                input_data.flow_rate, 
                current_velocity,
                input_data.pipe_length,
                is_suction_pipe=True  # This is called from NPSHd calculation, so it's a suction pipe
            )
            
            if diameter_options:
                recommendations.append("‚Ä¢ OPTIMISATION DIAM√àTRE - Options gradu√©es :")
                for option in diameter_options:
                    recommendations.append(f"  {option}")
            else:
                # Fallback vers l'ancienne m√©thode si pas d'options
                pipe_area = math.pi * (input_data.pipe_diameter / 1000 / 2) ** 2
                required_area = (input_data.flow_rate / 3600) / 1.5
                required_diameter = math.sqrt(4 * required_area / math.pi) * 1000
                required_dn = get_dn_from_diameter(required_diameter)
                recommendations.append(f"‚Ä¢ Augmenter le diam√®tre de DN{current_dn} √† DN{required_dn}")
        
        # 3. Reduce pipe length
        if input_data.pipe_length > 20:
            max_length = input_data.pipe_length * 0.7  # Reduce by 30%
            recommendations.append(f"‚Ä¢ R√©duire la longueur de tuyauterie de {input_data.pipe_length:.1f}m √† {max_length:.1f}m")
        
        # 4. Reduce fittings
        if total_fittings > 2:
            recommendations.append(f"‚Ä¢ R√©duire le nombre de raccords de {total_fittings} √† maximum 2")
        
        # 5. Use smoother pipe material
        rough_materials = ["concrete", "cast_iron", "steel_galvanized"]
        if input_data.pipe_material in rough_materials:
            recommendations.append(f"‚Ä¢ Utiliser un mat√©riau plus lisse (PVC ou PEHD) au lieu de {PIPE_MATERIALS[input_data.pipe_material]['name']}")
        
        # 6. Lower fluid temperature
        if input_data.temperature > 20:
            recommendations.append(f"‚Ä¢ R√©duire la temp√©rature du fluide de {input_data.temperature}¬∞C √† 20¬∞C si possible")
        
        # 7. Change pump location
        recommendations.append("‚Ä¢ Repositionner la pompe plus pr√®s du r√©servoir")
        recommendations.append("‚Ä¢ Installer la pompe en charge (niveau pompe < niveau liquide)")
    
    else:
        # No cavitation risk
        if npsh_margin < 0.5:
            warnings.append("‚ö†Ô∏è ATTENTION: Marge de s√©curit√© NPSH faible")
            warnings.append(f"NPSHd calcul√© ({npshd:.2f} m) > NPSH requis ({npsh_required:.2f} m)")
            warnings.append(f"Marge de s√©curit√©: {npsh_margin:.2f} m (RECOMMAND√â: > 0.5 m)")
            recommendations.append("‚Ä¢ Am√©liorer la marge de s√©curit√© en r√©duisant les pertes de charge")
        elif npsh_margin < 1.0:
            warnings.append("‚úÖ NPSH acceptable avec marge de s√©curit√© limit√©e")
            warnings.append(f"NPSHd calcul√© ({npshd:.2f} m) > NPSH requis ({npsh_required:.2f} m)")
            warnings.append(f"Marge de s√©curit√©: {npsh_margin:.2f} m (RECOMMAND√â: > 1.0 m)")
        else:
            warnings.append("‚úÖ NPSH excellent - Aucun risque de cavitation")
            warnings.append(f"NPSHd calcul√© ({npshd:.2f} m) >> NPSH requis ({npsh_required:.2f} m)")
            warnings.append(f"Marge de s√©curit√©: {npsh_margin:.2f} m (EXCELLENTE)")
    
    # ========================================================================================================
    # ANALYSE DE COMPATIBILIT√â CHIMIQUE INT√âGR√âE DANS NPSHd
    # ========================================================================================================
    
    # Analyser la compatibilit√© chimique entre le fluide et le mat√©riau de tuyauterie
    compatibility_analysis = analyze_chemical_compatibility(
        input_data.fluid_type, 
        input_data.pipe_material, 
        input_data.pipe_material,  # M√™me mat√©riau pour aspiration
        input_data.temperature
    )
    
    # Int√©grer les recommandations de compatibilit√© chimique dans les recommendations NPSHd
    if compatibility_analysis["recommendations"]:
        recommendations.append("\nüß™ COMPATIBILIT√â CHIMIQUE FLUIDE-MAT√âRIAU:")
        recommendations.extend([f"  {rec}" for rec in compatibility_analysis["recommendations"]])
    
    # Int√©grer les recommandations de joints
    if compatibility_analysis["seal_recommendations"]:
        recommendations.append("\nüîß RECOMMANDATIONS DE JOINTS:")
        recommendations.extend([f"  {rec}" for rec in compatibility_analysis["seal_recommendations"]])
    
    # V√©rifications sp√©cifiques de compatibilit√©
    if compatibility_analysis["suction_material_status"] == "incompatible":
        warnings.append("üö® INCOMPATIBILIT√â CHIMIQUE D√âTECT√âE!")
        warnings.append(f"Le mat√©riau {PIPE_MATERIALS[input_data.pipe_material]['name']} n'est pas compatible avec {compatibility_analysis['fluid_name']}")
        recommendations.append(f"\n‚ö†Ô∏è CHANGEMENT DE MAT√âRIAU URGENT REQUIS:")
        
        # Sugg√©rer des mat√©riaux compatibles
        if compatibility_analysis["compatible_materials"]:
            compatible_materials_names = []
            material_mapping = {
                "stainless_steel": "Acier inoxydable 316L",
                "pvc": "PVC",
                "pehd": "PEHD", 
                "steel": "Acier au carbone",
                "bronze": "Bronze",
                "ptfe": "PTFE",
                "viton": "Joints Viton/FKM"
            }
            
            for mat in compatibility_analysis["compatible_materials"]:
                if mat in material_mapping:
                    compatible_materials_names.append(material_mapping[mat])
            
            if compatible_materials_names:
                recommendations.append(f"  ‚Ä¢ Mat√©riaux compatibles recommand√©s: {', '.join(compatible_materials_names)}")
    
    elif compatibility_analysis["suction_material_status"] == "compatible":
        recommendations.append(f"\n‚úÖ COMPATIBILIT√â CHIMIQUE: {PIPE_MATERIALS[input_data.pipe_material]['name']} compatible avec {compatibility_analysis['fluid_name']}")
    
    # Ajouter conseils hydrauliques sp√©cifiques au fluide
    if compatibility_analysis["hydraulic_advice"]:
        recommendations.append("\nüíß CONSEILS HYDRAULIQUES SP√âCIFIQUES:")
        recommendations.extend([f"  {advice}" for advice in compatibility_analysis["hydraulic_advice"]])
    
    return NPSHdResult(
        input_data=input_data,
        fluid_properties=fluid_props,
        atmospheric_pressure=atmospheric_pressure,
        velocity=velocity,
        reynolds_number=reynolds_number,
        friction_factor=friction_factor,
        linear_head_loss=linear_head_loss,
        singular_head_loss=singular_head_loss,
        total_head_loss=total_head_loss,
        npshd=npshd,
        npsh_required=npsh_required,
        npsh_margin=npsh_margin,
        cavitation_risk=cavitation_risk,
        recommendations=recommendations,
        warnings=warnings
    )

def calculate_hmt_enhanced(input_data: HMTCalculationInput) -> HMTResult:
    """Enhanced HMT calculation for Tab 2"""
    warnings = []
    recommendations = []  # Nouvelle liste de recommandations
    
    # Get fluid properties
    fluid_props = get_fluid_properties(input_data.fluid_type, input_data.temperature)
    
    # Calculate velocities
    discharge_area = math.pi * (input_data.discharge_pipe_diameter / 1000 / 2) ** 2
    discharge_velocity = (input_data.flow_rate / 3600) / discharge_area
    
    # Calculate Reynolds numbers
    discharge_reynolds = calculate_reynolds_number(
        discharge_velocity, input_data.discharge_pipe_diameter / 1000,
        fluid_props.density, fluid_props.viscosity
    )
    
    # Calculate head losses
    if input_data.installation_type == "surface":
        suction_area = math.pi * (input_data.suction_pipe_diameter / 1000 / 2) ** 2
        suction_velocity = (input_data.flow_rate / 3600) / suction_area
        suction_reynolds = calculate_reynolds_number(
            suction_velocity, input_data.suction_pipe_diameter / 1000,
            fluid_props.density, fluid_props.viscosity
        )
        suction_linear_loss = calculate_linear_head_loss_enhanced(
            suction_velocity, input_data.suction_pipe_length, 
            input_data.suction_pipe_diameter, input_data.suction_pipe_material,
            suction_reynolds
        )
        suction_singular_loss = calculate_singular_head_loss(suction_velocity, input_data.suction_fittings)
        suction_head_loss = suction_linear_loss + suction_singular_loss
    else:  # submersible - no suction calculations
        suction_velocity = None
        suction_head_loss = 0
    
    discharge_linear_loss = calculate_linear_head_loss_enhanced(
        discharge_velocity, input_data.discharge_pipe_length,
        input_data.discharge_pipe_diameter, input_data.discharge_pipe_material,
        discharge_reynolds
    )
    discharge_singular_loss = calculate_singular_head_loss(discharge_velocity, input_data.discharge_fittings)
    discharge_head_loss = discharge_linear_loss + discharge_singular_loss
    
    # Total head losses
    total_head_loss = (suction_head_loss or 0) + discharge_head_loss
    
    # Static head
    if input_data.installation_type == "surface":
        static_head = input_data.discharge_height - input_data.hasp
    else:  # submersible
        static_head = input_data.discharge_height
    
    # Useful pressure head
    useful_pressure_head = (input_data.useful_pressure * 100000) / (fluid_props.density * 9.81)  # bar to m
    
    # Total HMT
    hmt = static_head + total_head_loss + useful_pressure_head
    
    # ========================================================================================================
    # NOUVELLES RECOMMANDATIONS INTELLIGENTES POUR HMT
    # ========================================================================================================
    
    # 1. ANALYSE DE COMPATIBILIT√â CHIMIQUE
    compatibility_analysis = analyze_chemical_compatibility(
        input_data.fluid_type,
        input_data.suction_pipe_material,
        input_data.discharge_pipe_material,
        input_data.temperature
    )
    
    if compatibility_analysis["recommendations"]:
        recommendations.append("\nüß™ COMPATIBILIT√â CHIMIQUE:")
        recommendations.extend([f"  {rec}" for rec in compatibility_analysis["recommendations"]])
    
    if compatibility_analysis["seal_recommendations"]:
        recommendations.append("\nüîß RECOMMANDATIONS JOINTS:")
        recommendations.extend([f"  {rec}" for rec in compatibility_analysis["seal_recommendations"]])
    
    # Alertes de compatibilit√© critique
    if compatibility_analysis["suction_material_status"] == "incompatible":
        warnings.append("üö® INCOMPATIBILIT√â ASPIRATION D√âTECT√âE!")
        recommendations.append(f"\n‚ö†Ô∏è CHANGEMENT MAT√âRIAU ASPIRATION REQUIS - {PIPE_MATERIALS[input_data.suction_pipe_material]['name']} incompatible avec {compatibility_analysis['fluid_name']}")
    
    if compatibility_analysis["discharge_material_status"] == "incompatible":
        warnings.append("üö® INCOMPATIBILIT√â REFOULEMENT D√âTECT√âE!")
        recommendations.append(f"\n‚ö†Ô∏è CHANGEMENT MAT√âRIAU REFOULEMENT REQUIS - {PIPE_MATERIALS[input_data.discharge_pipe_material]['name']} incompatible avec {compatibility_analysis['fluid_name']}")
    
    # 2. RECOMMANDATIONS GRADU√âES POUR OPTIMISATION HYDRAULIQUE
    
    # Analyser l'aspiration si applicable (surface pump)
    if input_data.installation_type == "surface" and suction_velocity is not None:
        if suction_velocity > 1.5:  # Vitesse d'aspiration excessive
            suction_diameter_options = calculate_graduated_diameter_recommendations(
                input_data.suction_pipe_diameter,
                input_data.flow_rate,
                suction_velocity,
                input_data.suction_pipe_length,
                is_suction_pipe=True
            )
            
            if suction_diameter_options:
                recommendations.append("\nüíß OPTIMISATION ASPIRATION:")
                recommendations.extend([f"  {option}" for option in suction_diameter_options])
    
    # Analyser le refoulement
    if discharge_velocity > 2.5:  # Vitesse de refoulement excessive
        discharge_diameter_options = calculate_graduated_diameter_recommendations(
            input_data.discharge_pipe_diameter,
            input_data.flow_rate,
            discharge_velocity,
            input_data.discharge_pipe_length,
            is_suction_pipe=False
        )
        
        if discharge_diameter_options:
            recommendations.append("\nüöÄ OPTIMISATION REFOULEMENT:")
            recommendations.extend([f"  {option}" for option in discharge_diameter_options])
    
    # 3. RECOMMANDATIONS G√âN√âRALES HMT
    if total_head_loss > hmt * 0.3:  # Pertes de charge > 30% du HMT
        recommendations.append(f"\n‚ö†Ô∏è PERTES DE CHARGE √âLEV√âES ({total_head_loss:.2f}m = {(total_head_loss/hmt)*100:.0f}% du HMT)")
        recommendations.append("  ‚Ä¢ Consid√©rer augmentation diam√®tres (voir recommandations ci-dessus)")
        recommendations.append("  ‚Ä¢ R√©duire longueurs de tuyauteries si possible")
        recommendations.append("  ‚Ä¢ V√©rifier nombre de singularit√©s (coudes, vannes, etc.)")
    
    if useful_pressure_head > hmt * 0.4:  # Pression utile > 40% du HMT
        recommendations.append(f"\nüìä PRESSION UTILE DOMINANTE ({useful_pressure_head:.2f}m = {(useful_pressure_head/hmt)*100:.0f}% du HMT)")
        recommendations.append("  ‚Ä¢ Consid√©rer syst√®me avec surpresseur d√©di√©")
        recommendations.append("  ‚Ä¢ V√©rifier si pression utile r√©ellement n√©cessaire")
    
    # Warnings - Only check suction velocity if it exists
    if suction_velocity is not None and suction_velocity > 3.0:
        warnings.append(f"Vitesse d'aspiration √©lev√©e ({suction_velocity:.2f} m/s)")
    if discharge_velocity > 5.0:
        warnings.append(f"Vitesse de refoulement √©lev√©e ({discharge_velocity:.2f} m/s)")
    if hmt > 200:
        warnings.append(f"HMT tr√®s √©lev√©e ({hmt:.1f} m) - v√©rifier le dimensionnement")
    if input_data.useful_pressure > 10:
        warnings.append(f"Pression utile √©lev√©e ({input_data.useful_pressure} bar)")
    
    return HMTResult(
        input_data=input_data,
        fluid_properties=fluid_props,
        suction_velocity=suction_velocity,
        discharge_velocity=discharge_velocity,
        suction_head_loss=suction_head_loss,
        discharge_head_loss=discharge_head_loss,
        total_head_loss=total_head_loss,
        static_head=static_head,
        useful_pressure_head=useful_pressure_head,
        hmt=hmt,
        warnings=warnings,
        recommendations=recommendations  # Ajout des recommandations
    )

def calculate_darcy_head_loss(flow_rate: float, pipe_diameter: float, pipe_length: float, 
                             pipe_material: str, fluid_density: float, fluid_viscosity: float) -> float:
    """Calculate head loss using Darcy-Weisbach formula"""
    if flow_rate <= 0 or pipe_diameter <= 0:
        return 0
    
    # Convert units
    diameter_m = pipe_diameter / 1000  # mm to m
    pipe_area = math.pi * (diameter_m / 2) ** 2  # m¬≤
    velocity = (flow_rate / 3600) / pipe_area  # m/s
    
    # Calculate Reynolds number
    reynolds_number = calculate_reynolds_number(velocity, diameter_m, fluid_density, fluid_viscosity)
    
    # Get pipe roughness
    if pipe_material not in PIPE_MATERIALS:
        roughness = 0.045  # Default steel roughness in mm
    else:
        roughness = PIPE_MATERIALS[pipe_material]["roughness"]  # mm
    
    # Calculate friction factor using Colebrook-White equation (Swamee-Jain approximation)
    relative_roughness = roughness / pipe_diameter  # Relative roughness
    
    if reynolds_number < 2300:
        # Laminar flow
        friction_factor = 64 / reynolds_number
    else:
        # Turbulent flow - Swamee-Jain approximation
        term1 = (relative_roughness / 3.7) ** 1.11
        term2 = 6.9 / reynolds_number
        friction_factor = 0.25 / (math.log10(term1 + term2) ** 2)
    
    # Darcy-Weisbach formula: ŒîH = f √ó (L/D) √ó (V¬≤/2g)
    head_loss = friction_factor * (pipe_length / diameter_m) * (velocity**2) / (2 * 9.81)
    
    return head_loss

def generate_performance_curves(input_data: PerformanceAnalysisInput) -> Dict[str, List[float]]:
    """Generate comprehensive performance curves with operating point matching input values and Darcy head loss"""
    flow_points = []
    hmt_points = []
    efficiency_points = []
    power_points = []
    head_loss_points = []
    
    base_flow = input_data.flow_rate
    base_hmt = input_data.hmt
    base_efficiency = input_data.pump_efficiency
    
    # Calculate base power using the corrected formula
    base_hydraulic_power = ((base_flow * base_hmt) / (base_efficiency * 367)) * 100
    
    # Operating point corresponds exactly to input values (not 85% of max flow)
    operating_point_flow = base_flow
    operating_point_hmt = base_hmt
    operating_point_efficiency = base_efficiency
    
    # Get fluid properties for Darcy calculations
    fluid_props = get_fluid_properties(input_data.fluid_type, 20)  # Default temperature for curves
    
    # Generate curve points from 0% to 150% of nominal flow
    for i in range(0, 151, 10):  # 0% to 150% of nominal flow
        flow_ratio = i / 100
        flow = base_flow * flow_ratio
        
        # HMT curve (quadratic curve: HMT = H0 - a*Q - b*Q¬≤)
        # Adjusted to pass through the operating point exactly
        h0 = base_hmt * 1.2  # Shut-off head
        a = 0.2 * base_hmt / base_flow if base_flow > 0 else 0
        b = 0.5 * base_hmt / (base_flow**2) if base_flow > 0 else 0
        
        if flow == 0:
            hmt = h0
        else:
            hmt = h0 - a * flow - b * (flow**2)
        
        # Efficiency curve (parabolic with peak at operating point)
        if flow == 0:
            efficiency = 0
        else:
            # Peak efficiency at operating point flow
            efficiency_ratio = flow / operating_point_flow if operating_point_flow > 0 else 0
            efficiency = base_efficiency * (1 - 0.3 * (efficiency_ratio - 1)**2)
            efficiency = max(0, min(100, efficiency))
        
        # Power curve using corrected formula: P = ((Q * H) / (Œ∑ * 367)) * 100
        if flow == 0:
            power = 0
        else:
            power = ((flow * hmt) / (efficiency * 367)) * 100 if efficiency > 0 else 0
        
        # Head loss curve using Darcy-Weisbach formula
        # Adjusted to intersect with HMT curve at operating point
        if flow == 0:
            head_loss = 0
        else:
            # Calculate base head loss at operating point
            base_head_loss = calculate_darcy_head_loss(
                flow_rate=operating_point_flow,
                pipe_diameter=input_data.pipe_diameter,
                pipe_length=50.0,  # Assumed standard length for curves
                pipe_material=input_data.pipe_material,
                fluid_density=fluid_props.density,
                fluid_viscosity=fluid_props.viscosity
            )
            
            # Scale head loss to ensure intersection at operating point
            # Head loss should equal HMT at operating point
            scaling_factor = operating_point_hmt / base_head_loss if base_head_loss > 0 else 1
            
            head_loss = calculate_darcy_head_loss(
                flow_rate=flow,
                pipe_diameter=input_data.pipe_diameter,
                pipe_length=50.0,
                pipe_material=input_data.pipe_material,
                fluid_density=fluid_props.density,
                fluid_viscosity=fluid_props.viscosity
            ) * scaling_factor
        
        flow_points.append(flow)
        hmt_points.append(max(0, hmt))
        efficiency_points.append(max(0, efficiency))
        power_points.append(max(0, power))
        head_loss_points.append(max(0, head_loss))
    
    # Operating point power using corrected formulas
    operating_point_power = ((operating_point_flow * operating_point_hmt) / (operating_point_efficiency * 367)) * 100
    
    return {
        "flow": flow_points,
        "hmt": hmt_points,
        "efficiency": efficiency_points,
        "power": power_points,
        "head_loss": head_loss_points,
        "best_operating_point": {
            "flow": operating_point_flow,
            "hmt": operating_point_hmt,
            "efficiency": operating_point_efficiency,
            "power": operating_point_power
        }
    }

def calculate_performance_analysis(input_data: PerformanceAnalysisInput) -> PerformanceAnalysisResult:
    """Performance analysis calculation for Tab 3 with corrected power formulas"""
    warnings = []
    recommendations = []
    alerts = []
    
    # Calculate velocity and Reynolds number
    diameter_m = input_data.pipe_diameter / 1000  # Convert mm to m
    pipe_area = math.pi * (diameter_m / 2) ** 2  # m¬≤
    velocity = (input_data.flow_rate / 3600) / pipe_area  # m/s
    
    # Get fluid properties
    fluid_props = get_fluid_properties(input_data.fluid_type, 20)  # Default temperature
    reynolds_number = calculate_reynolds_number(velocity, diameter_m, fluid_props.density, fluid_props.viscosity)
    
    # Power calculations using the corrected formulas
    if input_data.hydraulic_power:
        # Use provided hydraulic power
        hydraulic_power = input_data.hydraulic_power
    else:
        # Calculate hydraulic power using the corrected formula:
        # P2 = ((d√©bit √ó HMT) / (rendement pompe √ó 367)) * 100
        hydraulic_power = ((input_data.flow_rate * input_data.hmt) / (input_data.pump_efficiency * 367)) * 100
    
    if input_data.absorbed_power:
        # Use provided absorbed power
        absorbed_power = input_data.absorbed_power
        # Calculate actual motor efficiency
        actual_motor_efficiency = (hydraulic_power / absorbed_power) * 100
    else:
        # Calculate absorbed power using the corrected formula:
        # P1 = P2 / (rendement moteur / 100)
        absorbed_power = hydraulic_power / (input_data.motor_efficiency / 100)
        actual_motor_efficiency = input_data.motor_efficiency
    
    # Overall efficiency: Rendement Global = Rendement Moteur √ó Rendement Pompe
    overall_efficiency = (actual_motor_efficiency / 100) * (input_data.pump_efficiency / 100) * 100
    
    # Electrical calculations adapted for starting method
    if input_data.voltage == 230:
        # Single phase
        nominal_current = (absorbed_power * 1000) / (input_data.voltage * input_data.power_factor)
        if input_data.starting_method == "direct_on_line":
            starting_current = nominal_current * 7.0
        else:  # star_delta
            starting_current = nominal_current * 2.0
    else:
        # Three phase
        nominal_current = (absorbed_power * 1000) / (input_data.voltage * 1.732 * input_data.power_factor)
        if input_data.starting_method == "direct_on_line":
            starting_current = nominal_current * 6.0
        else:  # star_delta
            starting_current = nominal_current * 2.0
    
    # Cable section calculation
    if input_data.cable_section:
        recommended_cable_section = input_data.cable_section
    else:
        # Basic cable sizing
        if input_data.voltage == 230:
            current_density = 6  # A/mm¬≤
        else:
            current_density = 8  # A/mm¬≤
        
        base_section = nominal_current / current_density
        length_factor = 1 + (input_data.cable_length / 100) * 0.2
        required_section = base_section * length_factor
        
        # Round to standard cable sections
        standard_sections = [1.5, 2.5, 4, 6, 10, 16, 25, 35, 50, 70, 95, 120, 150, 185, 240, 300]
        recommended_cable_section = next((s for s in standard_sections if s >= required_section), 300)
    
    # Generate performance curves (d√©bit en fonction de HMT)
    performance_curves = generate_performance_curves(input_data)
    
    # Velocity alerts
    if velocity > 3.0:
        alerts.append(f"Vitesse √©lev√©e ({velocity:.2f} m/s) - Risque d'√©rosion")
        recommendations.append("Consid√©rer un diam√®tre de tuyauterie plus grand")
    elif velocity < 0.5:
        alerts.append(f"Vitesse faible ({velocity:.2f} m/s) - Risque de s√©dimentation")
        recommendations.append("Consid√©rer un diam√®tre de tuyauterie plus petit")
    
    # Reynolds number alerts
    if reynolds_number < 2300:
        alerts.append("√âcoulement laminaire d√©tect√©")
    elif reynolds_number > 4000:
        alerts.append("√âcoulement turbulent d√©tect√©")
    
    # Warnings and recommendations
    if overall_efficiency < 60:
        warnings.append(f"Rendement global faible ({overall_efficiency:.1f}%)")
        recommendations.append("V√©rifier le dimensionnement de la pompe et du moteur")
    
    if input_data.pump_efficiency < 70:
        warnings.append(f"Rendement pompe faible ({input_data.pump_efficiency:.1f}%)")
        recommendations.append("Consid√©rer une pompe plus efficace")
    
    if input_data.motor_efficiency < 85:
        warnings.append(f"Rendement moteur faible ({input_data.motor_efficiency:.1f}%)")
        recommendations.append("Consid√©rer un moteur plus efficace")
    
    if starting_current > 150:
        warnings.append(f"Courant de d√©marrage √©lev√© ({starting_current:.1f} A)")
        recommendations.append("Consid√©rer un d√©marreur progressif ou √©toile-triangle")
    
    if absorbed_power > 100:
        warnings.append(f"Puissance absorb√©e √©lev√©e ({absorbed_power:.1f} kW)")
        recommendations.append("V√©rifier le dimensionnement du syst√®me")
    
    # Power formula verification
    if hydraulic_power > absorbed_power:
        warnings.append("ERREUR: Puissance hydraulique > puissance absorb√©e - v√©rifier les valeurs")
    
    # ========================================================================================================
    # NOUVELLES RECOMMANDATIONS INTELLIGENTES POUR PERFORMANCE
    # ========================================================================================================
    
    # 1. ANALYSE DE COMPATIBILIT√â CHIMIQUE POUR PERFORMANCE
    fluid_props = get_fluid_properties(input_data.fluid_type, 20)  # Temp√©rature par d√©faut
    compatibility_analysis = analyze_chemical_compatibility(
        input_data.fluid_type,
        input_data.pipe_material,
        input_data.pipe_material,  # M√™me mat√©riau
        20  # Temp√©rature par d√©faut pour Performance
    )
    
    if compatibility_analysis["recommendations"]:
        recommendations.append("\nüß™ COMPATIBILIT√â CHIMIQUE PERFORMANCE:")
        recommendations.extend([f"  {rec}" for rec in compatibility_analysis["recommendations"]])
    
    # Alertes de compatibilit√© critique pour Performance
    if compatibility_analysis["suction_material_status"] == "incompatible":
        warnings.append("üö® INCOMPATIBILIT√â MAT√âRIAU-FLUIDE D√âTECT√âE!")
        recommendations.append(f"\n‚ö†Ô∏è MAT√âRIAU INCOMPATIBLE - {PIPE_MATERIALS[input_data.pipe_material]['name']} avec {compatibility_analysis['fluid_name']}")
    
    # 2. RECOMMANDATIONS GRADU√âES DIAM√àTRE POUR PERFORMANCE
    if velocity > 2.5:  # Vitesse excessive pour performance
        # Calcul de la longueur approximative pour syst√®me Performance
        estimated_pipe_length = input_data.cable_length  # Approximation longueur tuyauterie = longueur c√¢ble
        
        diameter_options = calculate_graduated_diameter_recommendations(
            input_data.pipe_diameter,
            input_data.flow_rate,
            velocity,
            estimated_pipe_length,
            is_suction_pipe=False
        )
        
        if diameter_options:
            recommendations.append("\nüöÄ OPTIMISATION DIAM√àTRE PERFORMANCE:")
            recommendations.extend([f"  {option}" for option in diameter_options])
    
    # 3. RECOMMANDATIONS SP√âCIFIQUES PERFORMANCE √âNERG√âTIQUE
    if overall_efficiency < 70:
        recommendations.append("\n‚ö° OPTIMISATION √âNERG√âTIQUE:")
        efficiency_improvement = 80 - overall_efficiency
        energy_savings = (efficiency_improvement / overall_efficiency) * 100 if overall_efficiency > 0 else 0
        recommendations.append(f"  ‚Ä¢ Am√©lioration rendement possible: +{efficiency_improvement:.1f}%")
        recommendations.append(f"  ‚Ä¢ √âconomies √©nerg√©tiques potentielles: -{energy_savings:.0f}% consommation")
        
        if input_data.pump_efficiency < 75:
            recommendations.append(f"  üîß Pompe: Remplacer par pompe rendement >{input_data.pump_efficiency + 10:.0f}%")
        if input_data.motor_efficiency < 90:
            recommendations.append(f"  üîå Moteur: Remplacer par moteur IE3/IE4 (>{input_data.motor_efficiency + 10:.0f}%)")
    
    # 4. RECOMMANDATIONS CO√õT D'EXPLOITATION
    if absorbed_power > 0:
        # Estimation co√ªts annuels (bas√© sur 8h/jour, 250 jours/an, 0.15‚Ç¨/kWh)
        annual_hours = 8 * 250  # 2000h/an
        energy_cost_per_kwh = 0.15  # ‚Ç¨/kWh
        annual_cost = absorbed_power * annual_hours * energy_cost_per_kwh
        
        if annual_cost > 5000:  # Plus de 5000‚Ç¨/an
            recommendations.append(f"\nüí∞ IMPACT √âCONOMIQUE:")
            recommendations.append(f"  ‚Ä¢ Co√ªt √©nerg√©tique annuel estim√©: {annual_cost:.0f}‚Ç¨")
            
            # Calculer √©conomies potentielles avec am√©lioration rendement
            if overall_efficiency < 75:
                improved_efficiency = 80  # Cible rendement
                improved_power = absorbed_power * (overall_efficiency / improved_efficiency)
                annual_savings = (absorbed_power - improved_power) * annual_hours * energy_cost_per_kwh
                payback_period = 15000 / annual_savings if annual_savings > 0 else float('inf')  # Investissement approximatif
                
                recommendations.append(f"  ‚Ä¢ √âconomies potentielles avec optimisation: {annual_savings:.0f}‚Ç¨/an")
                if payback_period < 5:
                    recommendations.append(f"  ‚Ä¢ Retour sur investissement estim√©: {payback_period:.1f} ans")
    
    return PerformanceAnalysisResult(
        input_data=input_data,
        pump_efficiency=input_data.pump_efficiency,
        motor_efficiency=actual_motor_efficiency,
        overall_efficiency=overall_efficiency,
        velocity=velocity,
        reynolds_number=reynolds_number,
        nominal_current=nominal_current,
        starting_current=starting_current,
        recommended_cable_section=recommended_cable_section,
        power_calculations={
            "hydraulic_power": hydraulic_power,
            "absorbed_power": absorbed_power,
            "overall_efficiency": overall_efficiency
        },
        electrical_data={
            "voltage": input_data.voltage,
            "power_factor": input_data.power_factor,
            "starting_method": input_data.starting_method,
            "cable_length": input_data.cable_length,
            "cable_material": getattr(input_data, 'cable_material', 'copper')
        },
        performance_curves=performance_curves,
        recommendations=recommendations,
        warnings=warnings,
        alerts=alerts
    )

def organize_expert_recommendations_intelligently(expert_recommendations, npshd_result, hmt_result, perf_result, compatibility_analysis, overall_efficiency, annual_energy_cost, input_data):
    """
    Organise intelligemment les recommandations expertes en √©liminant les doublons,
    en priorisant par criticit√© et en regroupant par th√©matiques
    """
    
    # Structure organis√©e finale
    organized_recommendations = {
        "critical_safety": [],      # Priorit√© 1: S√©curit√©/Cavitation/Incompatibilit√©
        "hydraulic_optimization": [],  # Priorit√© 2: Optimisation hydraulique
        "energy_efficiency": [],    # Priorit√© 3: Efficacit√© √©nerg√©tique  
        "installation_guidance": [], # Priorit√© 4: Guidance installation
        "maintenance_prevention": [] # Priorit√© 5: Maintenance pr√©ventive
    }
    
    # Suivre les sujets d√©j√† trait√©s pour √©viter doublons
    treated_topics = {
        "cavitation": False,
        "diameter_optimization": False,
        "chemical_compatibility": False,
        "energy_optimization": False,
        "installation_complexity": False
    }
    
    # 1. RECOMMANDATIONS CRITIQUES DE S√âCURIT√â (Priorit√© absolue)
    
    # Cavitation critique (une seule recommandation consolid√©e)
    if npshd_result.cavitation_risk and not treated_topics["cavitation"]:
        # Consolider toutes les recommandations de cavitation
        cavitation_solutions = []
        
        # Recommandations gradu√©es de diam√®tre pour cavitation
        if npshd_result.velocity > 1.5:
            diameter_options = calculate_graduated_diameter_recommendations(
                float(getattr(npshd_result.input_data, 'pipe_diameter', 100.0)),
                npshd_result.input_data.flow_rate,
                npshd_result.velocity,
                float(getattr(npshd_result.input_data, 'pipe_length', 50.0)),
                is_suction_pipe=True
            )
            if diameter_options and len(diameter_options) > 1:
                cavitation_solutions.extend([
                    "üîß OPTIMISATION DIAM√àTRE ASPIRATION - Options anti-cavitation:"
                ])
                cavitation_solutions.extend([f"  {opt}" for opt in diameter_options[1:3]])  # 2 meilleures options
        
        # Autres solutions de cavitation
        hasp = abs(getattr(npshd_result.input_data, 'hasp', 3.0))
        cavitation_solutions.extend([
            f"üìè R√©duire hauteur aspiration: {hasp:.1f}m ‚Üí {max(0.5, hasp - 2):.1f}m",
            "‚ö° Installer pompe en charge (sous niveau fluide)",
            "üå°Ô∏è Augmenter temp√©rature fluide (si possible)", 
            "üîß Supprimer singularit√©s aspiration non essentielles"
        ])
        
        organized_recommendations["critical_safety"].append({
            "type": "critical",
            "priority": 1,
            "title": "üö® CAVITATION CRITIQUE - ARR√äT IMM√âDIAT REQUIS",
            "description": f"NPSHd ({npshd_result.npshd:.2f}m) ‚â§ NPSHr ({npshd_result.npsh_required:.2f}m) - Destruction pompe imminente",
            "impact": "DESTRUCTION POMPE, ARR√äT PRODUCTION, R√âPARATIONS CO√õTEUSES",
            "solutions": cavitation_solutions,
            "urgency": "IMM√âDIATE - 24H MAX",
            "cost_impact": "TR√àS √âLEV√â (>50k‚Ç¨ potentiel)"
        })
        treated_topics["cavitation"] = True
    
    # Incompatibilit√© chimique critique  
    if (compatibility_analysis["suction_material_status"] == "incompatible" or 
        compatibility_analysis["discharge_material_status"] == "incompatible") and not treated_topics["chemical_compatibility"]:
        
        organized_recommendations["critical_safety"].append({
            "type": "critical", 
            "priority": 1,
            "title": "üß™ INCOMPATIBILIT√â CHIMIQUE CRITIQUE",
            "description": f"Mat√©riaux incompatibles avec {compatibility_analysis['fluid_name']} - Corrosion/contamination active",
            "impact": "CONTAMINATION FLUIDE, D√âGRADATION ACC√âL√âR√âE, NON-CONFORMIT√â",
            "solutions": compatibility_analysis["recommendations"][:4] + [
                "üî¨ Analyse mat√©riaux urgente recommand√©e",
                "‚öñÔ∏è V√©rification conformit√© r√©glementaire"
            ],
            "urgency": "IMM√âDIATE - 48H MAX", 
            "cost_impact": "√âLEV√â (changement mat√©riaux)"
        })
        treated_topics["chemical_compatibility"] = True
    
    # 2. OPTIMISATION HYDRAULIQUE (Regroupement intelligent)
    
    hydraulic_solutions = []
    hydraulic_impact_desc = []
    
    # Optimisation diam√®tres (consolid√©e aspiration + refoulement)
    if ((npshd_result.velocity > 1.5) or 
        (hmt_result.suction_velocity and hmt_result.suction_velocity > 1.5) or 
        (hmt_result.discharge_velocity > 2.5)) and not treated_topics["diameter_optimization"]:
        
        # Aspiration si n√©cessaire
        if npshd_result.velocity > 1.5 or (hmt_result.suction_velocity and hmt_result.suction_velocity > 1.5):
            suction_options = calculate_graduated_diameter_recommendations(
                float(getattr(npshd_result.input_data, 'pipe_diameter', 100.0)),
                npshd_result.input_data.flow_rate,
                npshd_result.velocity,
                float(getattr(npshd_result.input_data, 'pipe_length', 50.0)),
                is_suction_pipe=True
            )
            if suction_options and len(suction_options) > 1:
                hydraulic_solutions.append("üíß ASPIRATION - Options gradu√©es:")
                hydraulic_solutions.extend([f"  {opt}" for opt in suction_options[1:3]])
        
        # Refoulement si n√©cessaire  
        if hmt_result.discharge_velocity > 2.5:
            discharge_options = calculate_graduated_diameter_recommendations(
                getattr(hmt_result.input_data, 'discharge_pipe_diameter', 80.0),
                hmt_result.input_data.flow_rate,
                hmt_result.discharge_velocity, 
                getattr(hmt_result.input_data, 'discharge_pipe_length', 50.0),
                is_suction_pipe=False
            )
            if discharge_options and len(discharge_options) > 1:
                hydraulic_solutions.append("üöÄ REFOULEMENT - Options gradu√©es:")
                hydraulic_solutions.extend([f"  {opt}" for opt in discharge_options[1:3]])
        
        hydraulic_impact_desc.append("R√©duction pertes de charge, am√©lioration NPSHd")
        treated_topics["diameter_optimization"] = True
    
    # Pertes de charge excessives
    if hmt_result.total_head_loss > hmt_result.hmt * 0.25:  # >25% du HMT
        hydraulic_solutions.extend([
            f"‚ö†Ô∏è Pertes √©lev√©es: {hmt_result.total_head_loss:.1f}m ({(hmt_result.total_head_loss/hmt_result.hmt)*100:.0f}% HMT)",
            "üîß Simplifier trac√© hydraulique (moins coudes)",
            "üìè R√©duire longueurs si possible"
        ])
        hydraulic_impact_desc.append("R√©duction consommation √©nerg√©tique")
    
    if hydraulic_solutions:
        organized_recommendations["hydraulic_optimization"].append({
            "type": "hydraulic",
            "priority": 2,
            "title": "üíß OPTIMISATION HYDRAULIQUE SYST√àME",
            "description": "Am√©lioration performances hydrauliques et r√©duction pertes",
            "impact": ", ".join(hydraulic_impact_desc),
            "solutions": hydraulic_solutions[:8],  # Max 8 solutions
            "urgency": "√âLEV√âE",
            "cost_impact": "MOYEN (ROI < 2 ans)"
        })
    
    # 3. EFFICACIT√â √âNERG√âTIQUE (Consolid√©e)
    
    if ((overall_efficiency < 70 or annual_energy_cost > 3000) and not treated_topics["energy_optimization"]):
        energy_solutions = []
        
        # Am√©lioration rendements
        if overall_efficiency < 70:
            energy_improvement = 75 - overall_efficiency  
            annual_savings = (energy_improvement / overall_efficiency) * annual_energy_cost if overall_efficiency > 0 else 0
            energy_solutions.extend([
                f"üìà Rendement actuel: {overall_efficiency:.0f}% ‚Üí Cible: 75% (+{energy_improvement:.0f}%)",
                f"üí∞ √âconomies potentielles: {annual_savings:.0f}‚Ç¨/an"
            ])
        
        # Recommandations √©quipements
        if perf_result.pump_efficiency < 75:
            energy_solutions.append(f"üîß Pompe: Remplacer par rendement >75% (actuel: {perf_result.pump_efficiency:.0f}%)")
        if perf_result.motor_efficiency < 90:
            energy_solutions.append(f"‚ö° Moteur: IE3/IE4 >90% (actuel: {perf_result.motor_efficiency:.0f}%)")
        
        # ROI si co√ªt √©lev√©
        if annual_energy_cost > 5000:
            payback = 15000 / (annual_energy_cost * 0.15) if annual_energy_cost > 0 else 10  # Estimation investissement
            energy_solutions.append(f"üìä ROI estim√©: {payback:.1f} ans")
        
        organized_recommendations["energy_efficiency"].append({
            "type": "energy",
            "priority": 2,
            "title": "‚ö° OPTIMISATION √âNERG√âTIQUE MAJEURE",
            "description": f"Co√ªt √©nerg√©tique: {annual_energy_cost:.0f}‚Ç¨/an - Potentiel d'√©conomies important",
            "impact": "R√©duction facture √©lectrique, conformit√© environnementale",
            "solutions": energy_solutions,
            "urgency": "MOD√âR√âE",
            "cost_impact": "INVESTISSEMENT RENTABLE"
        })
        treated_topics["energy_optimization"] = True
    
    # 4. COMPATIBILIT√â CHIMIQUE D√âTAILL√âE (pr√©server le contenu expert)
    if not treated_topics["chemical_compatibility"]:
        # Utiliser TOUTES les analyses d√©taill√©es existantes, pas seulement un r√©sum√©
        
        # Compatibilit√© critique avec analyse compl√®te
        if (compatibility_analysis["suction_material_status"] == "incompatible" or 
            compatibility_analysis["discharge_material_status"] == "incompatible"):
            # D√©j√† trait√© dans critical_safety, ne pas r√©p√©ter
            pass
        else:
            # Compatibilit√© normale mais avec analyses d√©taill√©es pr√©serv√©es
            chemical_solutions = []
            
            # Pr√©server toutes les recommandations d√©taill√©es d'origine
            if compatibility_analysis["recommendations"]:
                chemical_solutions.extend(compatibility_analysis["recommendations"])
            
            # Ajouter les analyses hydrauliques sp√©cifiques au fluide
            if compatibility_analysis["hydraulic_advice"]:
                chemical_solutions.append("üíß CONSEILS HYDRAULIQUES SP√âCIALIS√âS:")
                chemical_solutions.extend([f"  {advice}" for advice in compatibility_analysis["hydraulic_advice"]])
            
            # Pr√©server les recommandations de joints d√©taill√©es
            if compatibility_analysis["seal_recommendations"]:
                chemical_solutions.append("üîß SP√âCIFICATIONS JOINTS ET √âTANCH√âIT√â:")
                chemical_solutions.extend([f"  {seal}" for seal in compatibility_analysis["seal_recommendations"]])
            
            # Ajouter √©quipements sp√©cialis√©s selon le fluide
            fluid_equipment_recommendations = get_specialized_equipment_recommendations(input_data.fluid_type, input_data.temperature)
            if fluid_equipment_recommendations:
                chemical_solutions.append("‚öôÔ∏è √âQUIPEMENTS SP√âCIALIS√âS REQUIS:")
                chemical_solutions.extend([f"  {equip}" for equip in fluid_equipment_recommendations])
            
            if chemical_solutions:
                organized_recommendations["installation_guidance"].append({
                    "type": "compatibility",
                    "priority": 3, 
                    "title": f"üß™ ANALYSE CHIMIQUE COMPL√àTE - {compatibility_analysis['fluid_name']}",
                    "description": f"Analyse d√©taill√©e compatibilit√© {compatibility_analysis['fluid_name']} avec mat√©riaux s√©lectionn√©s",
                    "impact": "Dur√©e de vie maximale, conformit√© r√©glementaire, s√©curit√© process",
                    "solutions": chemical_solutions,
                    "urgency": "MOD√âR√âE",
                    "cost_impact": "FAIBLE √Ä MOYEN"
                })
        
        treated_topics["chemical_compatibility"] = True
    
    # 5. RECOMMANDATIONS D'INSTALLATION ET √âQUIPEMENTS (nouveau - pr√©server le contenu expert)
    
    installation_solutions = []
    
    # √âquipements de s√©curit√© selon fluide
    safety_equipment = get_safety_equipment_recommendations(input_data.fluid_type)
    if safety_equipment:
        installation_solutions.append("üõ°Ô∏è √âQUIPEMENTS S√âCURIT√â OBLIGATOIRES:")
        installation_solutions.extend([f"  {equip}" for equip in safety_equipment])
    
    # √âquipements d'optimisation hydraulique
    hydraulic_equipment = get_hydraulic_equipment_recommendations(npshd_result, hmt_result, overall_efficiency)
    if hydraulic_equipment:
        installation_solutions.append("üîß √âQUIPEMENTS OPTIMISATION:")
        installation_solutions.extend([f"  {equip}" for equip in hydraulic_equipment])
    
    # Singularit√©s √† supprimer ou ajouter
    singularity_recommendations = get_singularity_recommendations(npshd_result, hmt_result)
    if singularity_recommendations:
        installation_solutions.append("‚öôÔ∏è MODIFICATION INSTALLATION:")
        installation_solutions.extend([f"  {sing}" for sing in singularity_recommendations])
    
    # Instrumentation et contr√¥le
    control_equipment = get_control_equipment_recommendations(input_data.fluid_type, annual_energy_cost, overall_efficiency)
    if control_equipment:
        installation_solutions.append("üìä INSTRUMENTATION RECOMMAND√âE:")
        installation_solutions.extend([f"  {ctrl}" for ctrl in control_equipment])
    
    if installation_solutions:
        organized_recommendations["installation_guidance"].append({
            "type": "installation",
            "priority": 4,
            "title": "üèóÔ∏è RECOMMANDATIONS INSTALLATION & √âQUIPEMENTS",
            "description": "√âquipements et modifications d'installation pour performance optimale",
            "impact": "Fiabilit√© syst√®me, facilit√© maintenance, s√©curit√© op√©rateur",
            "solutions": installation_solutions,
            "urgency": "MOD√âR√âE",
            "cost_impact": "VARIABLE SELON √âQUIPEMENTS"
        })
    
    # Convertir en format liste finale prioris√©e
    final_recommendations = []
    
    # Ordre de priorit√©
    for category in ["critical_safety", "hydraulic_optimization", "energy_efficiency", "installation_guidance", "maintenance_prevention"]:
        final_recommendations.extend(organized_recommendations[category])
    
    # Limiter √† 10 recommandations max (augment√© pour le contenu d√©taill√©)
    return final_recommendations[:10]

def get_specialized_equipment_recommendations(fluid_type, temperature):
    """Retourne les √©quipements sp√©cialis√©s requis selon le fluide"""
    equipment = []
    
    if fluid_type in ["acid", "base"]:
        equipment.extend([
            "üöø Douche de d√©contamination d'urgence (EN 15154)",
            "üëÅÔ∏è Lave-≈ìil d'urgence (< 10m du poste)",
            "üìû Syst√®me d'alarme chimique",
            "üå°Ô∏è Sonde pH en continu si T>50¬∞C",
            "üí® Ventilation forc√©e (20 vol/h min)"
        ])
    
    elif fluid_type in ["gasoline", "diesel"]:
        equipment.extend([
            "‚ö° √âquipements ATEX Zone 1 (moteur antid√©flagrant)",
            "üî• D√©tecteur vapeurs hydrocarbures", 
            "‚ö° Mise √† la terre obligatoire (< 10Œ©)",
            "üå™Ô∏è R√©cup√©rateur vapeurs en bout de ligne",
            "üîß Soupape de s√©curit√© tarage 1.1x pression service"
        ])
    
    elif fluid_type in ["milk", "wine", "honey", "fruit_juice"]:
        equipment.extend([
            "üßΩ Raccords d√©montables pour nettoyage CIP",
            "üå°Ô∏è Purgeur manuel points hauts (√©viter stagnation)",
            "üîÑ Vanne √©chantillonnage contr√¥le qualit√©",
            "üìä D√©bitm√®tre magn√©tique (pas d'obstruction)",
            "üå°Ô∏è Compensation temp√©rature si T variable"
        ])
    
    elif fluid_type == "seawater":
        equipment.extend([
            "‚öóÔ∏è Anode sacrificielle magn√©sium (renouvellement annuel)",
            "üî¨ Analyseur chlore r√©siduel en continu",
            "üåä Filtre 100¬µm avant pompe (protection particules)",
            "üíß Purge manuelle dessalage (maintenance)"
        ])
    
    return equipment

def get_safety_equipment_recommendations(fluid_type):
    """Retourne les √©quipements de s√©curit√© obligatoires selon le fluide"""
    safety = []
    
    if fluid_type in ["acid", "base"]:
        safety.extend([
            "EPI: Combinaison chimique + gants nitrile + lunettes √©tanches",
            "Neutralisant d'urgence (calcaire si acide, acide si base)",
            "Kit anti-pollution (absorbants chimiques)"
        ])
    elif fluid_type in ["gasoline", "diesel"]:
        safety.extend([
            "Extincteur CO2 ou poudre BC (pas d'eau !)",
            "D√©tecteur portable vapeurs (LEL/LIE)",
            "Kit anti-pollution hydrocarbures"
        ])
    elif fluid_type == "seawater":
        safety.extend([
            "Protection cathodique si pr√©sence autres m√©taux",
            "Rin√ßage eau douce apr√®s arr√™t prolong√©"
        ])
    
    return safety

def get_hydraulic_equipment_recommendations(npshd_result, hmt_result, overall_efficiency):
    """Retourne les √©quipements d'optimisation hydraulique"""
    equipment = []
    
    # Variateur si efficacit√© faible
    if overall_efficiency < 70:
        equipment.append("üîß Variateur de vitesse (√©conomie 20-40% si d√©bit variable)")
    
    # Surpresseur si HMT tr√®s √©lev√©e
    if hmt_result.hmt > 100:
        equipment.append("üìà Pompe surpresseur √©tag√©e (> 100m HMT)")
    
    # R√©servoir d'aspiration si NPSH critique
    if npshd_result.cavitation_risk:
        equipment.extend([
            "üèóÔ∏è B√¢che d'aspiration (am√©lioration NPSH)",
            "üå™Ô∏è D√©gazeur si fluide a√©r√©"
        ])
    
    return equipment

def get_singularity_recommendations(npshd_result, hmt_result):
    """Retourne les modifications de singularit√©s"""
    modifications = []
    
    if npshd_result.velocity > 2.0:
        modifications.extend([
            "‚ùå SUPPRIMER: Coudes 90¬∞ non essentiels (remplacer par courbes)",
            "‚ùå SUPPRIMER: Vannes d'isolement redondantes aspiration",
            "‚úÖ AJOUTER: Cr√©pine large maillage (√©viter obstruction)"
        ])
    
    if hmt_result.discharge_velocity > 3.0:
        modifications.extend([
            "‚úÖ AJOUTER: Clapet anti-retour √† battant (pas √† bille)",
            "‚úÖ AJOUTER: Compensateur de dilatation si L>50m"
        ])
    
    return modifications

def get_control_equipment_recommendations(fluid_type, annual_energy_cost, overall_efficiency):
    """Retourne l'instrumentation recommand√©e"""
    control = []
    
    # Instrumentation √©nerg√©tique si co√ªt √©lev√©
    if annual_energy_cost > 5000:
        control.extend([
            "üìä Wattm√®tre permanent (suivi consommation)",
            "üìà Enregistreur d√©bit/pression (optimisation)"
        ])
    
    # Instrumentation process selon fluide
    if fluid_type in ["acid", "base"]:
        control.append("üß™ pH-m√®tre continu (alarme haut/bas)")
    elif fluid_type in ["milk", "wine"]:
        control.append("üå°Ô∏è Thermom√®tre contact alimentaire")
    
    return control

def calculate_expert_analysis(input_data: ExpertAnalysisInput) -> ExpertAnalysisResult:
    """
    Analyse compl√®te d'expert avec tous les calculs hydrauliques et √©lectriques
    """
    
    # D√©termination du type d'aspiration
    suction_type = input_data.suction_type
    hasp = abs(input_data.suction_height)
    
    # Construction des raccords ASPIRATION
    suction_fittings = []
    
    # Coudes
    if input_data.suction_elbow_90 > 0:
        suction_fittings.append({"fitting_type": "elbow_90", "quantity": input_data.suction_elbow_90})
    if input_data.suction_elbow_45 > 0:
        suction_fittings.append({"fitting_type": "elbow_45", "quantity": input_data.suction_elbow_45})
    if input_data.suction_elbow_30 > 0:
        suction_fittings.append({"fitting_type": "elbow_30", "quantity": input_data.suction_elbow_30})
    
    # T√©s
    if input_data.suction_tee_flow > 0:
        suction_fittings.append({"fitting_type": "tee_flow", "quantity": input_data.suction_tee_flow})
    if input_data.suction_tee_branch > 0:
        suction_fittings.append({"fitting_type": "tee_branch", "quantity": input_data.suction_tee_branch})
    
    # R√©ductions
    if input_data.suction_reducer_gradual > 0:
        suction_fittings.append({"fitting_type": "reducer_gradual", "quantity": input_data.suction_reducer_gradual})
    if input_data.suction_reducer_sudden > 0:
        suction_fittings.append({"fitting_type": "reducer_sudden", "quantity": input_data.suction_reducer_sudden})
    
    # Vannes
    if input_data.suction_gate_valve > 0:
        suction_fittings.append({"fitting_type": "gate_valve", "quantity": input_data.suction_gate_valve})
    if input_data.suction_globe_valve > 0:
        suction_fittings.append({"fitting_type": "globe_valve", "quantity": input_data.suction_globe_valve})
    if input_data.suction_ball_valve > 0:
        suction_fittings.append({"fitting_type": "ball_valve", "quantity": input_data.suction_ball_valve})
    if input_data.suction_butterfly_valve > 0:
        suction_fittings.append({"fitting_type": "butterfly_valve", "quantity": input_data.suction_butterfly_valve})
    
    # Accessoires
    if input_data.suction_check_valve > 0:
        suction_fittings.append({"fitting_type": "check_valve", "quantity": input_data.suction_check_valve})
    if input_data.suction_strainer > 0:
        suction_fittings.append({"fitting_type": "strainer", "quantity": input_data.suction_strainer})
    if input_data.suction_foot_valve > 0:
        suction_fittings.append({"fitting_type": "foot_valve", "quantity": input_data.suction_foot_valve})
    
    # Construction des raccords REFOULEMENT
    discharge_fittings = []
    
    # Coudes
    if input_data.discharge_elbow_90 > 0:
        discharge_fittings.append({"fitting_type": "elbow_90", "quantity": input_data.discharge_elbow_90})
    if input_data.discharge_elbow_45 > 0:
        discharge_fittings.append({"fitting_type": "elbow_45", "quantity": input_data.discharge_elbow_45})
    if input_data.discharge_elbow_30 > 0:
        discharge_fittings.append({"fitting_type": "elbow_30", "quantity": input_data.discharge_elbow_30})
    
    # T√©s
    if input_data.discharge_tee_flow > 0:
        discharge_fittings.append({"fitting_type": "tee_flow", "quantity": input_data.discharge_tee_flow})
    if input_data.discharge_tee_branch > 0:
        discharge_fittings.append({"fitting_type": "tee_branch", "quantity": input_data.discharge_tee_branch})
    
    # R√©ductions
    if input_data.discharge_reducer_gradual > 0:
        discharge_fittings.append({"fitting_type": "reducer_gradual", "quantity": input_data.discharge_reducer_gradual})
    if input_data.discharge_reducer_sudden > 0:
        discharge_fittings.append({"fitting_type": "reducer_sudden", "quantity": input_data.discharge_reducer_sudden})
    
    # Vannes
    if input_data.discharge_gate_valve > 0:
        discharge_fittings.append({"fitting_type": "gate_valve", "quantity": input_data.discharge_gate_valve})
    if input_data.discharge_globe_valve > 0:
        discharge_fittings.append({"fitting_type": "globe_valve", "quantity": input_data.discharge_globe_valve})
    if input_data.discharge_ball_valve > 0:
        discharge_fittings.append({"fitting_type": "ball_valve", "quantity": input_data.discharge_ball_valve})
    if input_data.discharge_butterfly_valve > 0:
        discharge_fittings.append({"fitting_type": "butterfly_valve", "quantity": input_data.discharge_butterfly_valve})
    
    # Accessoires
    if input_data.discharge_check_valve > 0:
        discharge_fittings.append({"fitting_type": "check_valve", "quantity": input_data.discharge_check_valve})
    if input_data.discharge_strainer > 0:
        discharge_fittings.append({"fitting_type": "strainer", "quantity": input_data.discharge_strainer})
    if input_data.discharge_flow_meter > 0:
        discharge_fittings.append({"fitting_type": "flow_meter", "quantity": input_data.discharge_flow_meter})
    if input_data.discharge_pressure_gauge > 0:
        discharge_fittings.append({"fitting_type": "pressure_gauge", "quantity": input_data.discharge_pressure_gauge})
    
    # Calcul NPSHd
    npshd_input = NPSHdCalculationInput(
        suction_type=suction_type,
        hasp=hasp,
        flow_rate=input_data.flow_rate,
        fluid_type=input_data.fluid_type,
        temperature=input_data.temperature,
        pipe_diameter=input_data.suction_pipe_diameter,
        pipe_material=input_data.suction_material,
        pipe_length=input_data.suction_length,
        suction_fittings=[FittingInput(**f) for f in suction_fittings],
        npsh_required=input_data.npsh_required
    )
    npshd_result = calculate_npshd_enhanced(npshd_input)
    
    # Calcul HMT avec pression utile
    hmt_input = HMTCalculationInput(
        installation_type=input_data.installation_type,
        suction_type=suction_type,
        hasp=hasp,
        discharge_height=input_data.discharge_height,
        useful_pressure=input_data.useful_pressure,  # Pression utile int√©gr√©e
        suction_pipe_diameter=input_data.suction_pipe_diameter,
        discharge_pipe_diameter=input_data.discharge_pipe_diameter,
        suction_pipe_length=input_data.suction_length,
        discharge_pipe_length=input_data.discharge_length,
        suction_pipe_material=input_data.suction_material,
        discharge_pipe_material=input_data.discharge_material,
        suction_fittings=[FittingInput(**f) for f in suction_fittings],
        discharge_fittings=[FittingInput(**f) for f in discharge_fittings],
        fluid_type=input_data.fluid_type,
        temperature=input_data.temperature,
        flow_rate=input_data.flow_rate
    )
    hmt_result = calculate_hmt_enhanced(hmt_input)
    
    # Calcul Performance
    perf_input = PerformanceAnalysisInput(
        flow_rate=input_data.flow_rate,
        hmt=hmt_result.hmt,
        pipe_diameter=input_data.suction_pipe_diameter,
        fluid_type=input_data.fluid_type,
        pipe_material=input_data.suction_material,
        pump_efficiency=input_data.pump_efficiency,
        motor_efficiency=input_data.motor_efficiency,
        starting_method=input_data.starting_method,
        power_factor=input_data.power_factor,
        cable_length=input_data.cable_length,
        cable_material=input_data.cable_material,
        voltage=input_data.voltage
    )
    perf_result = calculate_performance_analysis(perf_input)
    
    # Analyse globale
    overall_efficiency = perf_result.overall_efficiency
    total_head_loss = npshd_result.total_head_loss + hmt_result.total_head_loss
    
    # Stabilit√© du syst√®me
    system_stability = not npshd_result.cavitation_risk and overall_efficiency > 60
    
    # Consommation √©nerg√©tique (kWh/m¬≥)
    hydraulic_power = perf_result.power_calculations.get("hydraulic_power", 0)
    energy_consumption = hydraulic_power / input_data.flow_rate if input_data.flow_rate > 0 else 0
    
    # Co√ªt √©nerg√©tique annuel
    annual_energy_consumption = hydraulic_power * input_data.operating_hours
    annual_energy_cost = annual_energy_consumption * input_data.electricity_cost
    
    # Recommandations d'expert enrichies
    expert_recommendations = []
    
    # Analyse critique de cavitation
    if npshd_result.cavitation_risk:
        # Calculer diam√®tre optimal pour √©viter la cavitation
        optimal_suction_diameter_cavitation = input_data.suction_pipe_diameter * 1.3
        current_suction_dn = get_closest_dn(input_data.suction_pipe_diameter)
        recommended_suction_dn_cavitation = get_closest_dn(optimal_suction_diameter_cavitation)
        
        # Debug pour voir les valeurs de cavitation
        print(f"üîç DEBUG DIAM√àTRES CAVITATION:")
        print(f"  Aspiration s√©lectionn√©e: {input_data.suction_pipe_diameter}mm ‚Üí DN{input_data.suction_dn or get_closest_dn(input_data.suction_pipe_diameter)}")
        print(f"  Aspiration recommand√©e: {optimal_suction_diameter_cavitation:.1f}mm ‚Üí DN{recommended_suction_dn_cavitation}")
        print(f"  NPSHd calcul√©: {npshd_result.npshd:.2f}m vs NPSH requis: {input_data.npsh_required:.2f}m")
        
        # Utiliser la valeur DN s√©lectionn√©e par l'utilisateur si disponible
        current_suction_dn_selected = input_data.suction_dn if input_data.suction_dn is not None else get_closest_dn(input_data.suction_pipe_diameter)
        
        solutions = [
            f"R√©duire hauteur d'aspiration de {hasp:.1f}m √† {max(0, hasp - abs(npshd_result.npsh_margin) - 0.5):.1f}m",
        ]
        
        # NOUVELLES RECOMMANDATIONS GRADU√âES POUR CAVITATION
        if current_suction_dn_selected < recommended_suction_dn_cavitation:
            # Utiliser les recommandations gradu√©es pour la cavitation
            cavitation_diameter_options = calculate_graduated_diameter_recommendations(
                input_data.suction_pipe_diameter,
                input_data.flow_rate,
                npshd_result.velocity,
                input_data.suction_length,
                is_suction_pipe=True
            )
            
            if cavitation_diameter_options and len(cavitation_diameter_options) > 1:
                solutions.append("DIAM√àTRE ASPIRATION - Options gradu√©es anti-cavitation:")
                # Prendre les 3 meilleures options pour cavitation critique
                solutions.extend([f"  {option}" for option in cavitation_diameter_options[1:4]])
            else:
                # Fallback vers ancienne m√©thode si pas d'options
                solutions.append(f"Augmenter diam√®tre aspiration: DN{current_suction_dn_selected} ‚Üí DN{recommended_suction_dn_cavitation}")
        else:
            solutions.append(f"Diam√®tre aspiration DN{current_suction_dn_selected} appropri√© - optimiser autre param√®tres")
            
        solutions.extend([
            f"R√©duire longueur aspiration de {input_data.suction_length:.0f}m √† {input_data.suction_length * 0.7:.0f}m",
            "Supprimer raccords non essentiels sur aspiration",
            "Installer pompe en charge si possible",
            "Augmenter temp√©rature pour r√©duire pression vapeur",
            "Installer pompe plus proche du r√©servoir"
        ])
        
        expert_recommendations.append({
            "type": "critical",
            "priority": 1,
            "title": "üö® CAVITATION CRITIQUE",
            "description": f"NPSHd ({npshd_result.npshd:.2f}m) ‚â§ NPSH requis ({input_data.npsh_required:.2f}m)",
            "impact": "DESTRUCTION DE LA POMPE - Arr√™t imm√©diat requis",
            "solutions": solutions,
            "urgency": "IMM√âDIATE",
            "cost_impact": "√âLEV√â"
        })
    
    # Recommandations d'installation hydraulique sp√©cifiques
    installation_recommendations = []
    
    # Recommandations selon le type d'aspiration
    if suction_type == "suction_lift":
        installation_recommendations.extend([
            "Configuration aspiration en d√©pression d√©tect√©e",
            "Installer cr√©pine foot valve pour maintenir l'amor√ßage",
            "Pr√©voir syst√®me d'amor√ßage automatique",
            "√âviter les points hauts sur la ligne d'aspiration",
            "Installer clapet anti-retour sur aspiration",
            "Hauteur aspiration maximale: 7m en pratique",
            "Pr√©voir purgeur d'air en point haut"
        ])
    else:  # flooded
        installation_recommendations.extend([
            "Configuration aspiration en charge optimale",
            "Vanne d'arr√™t sur aspiration pour maintenance",
            "Pr√©voir by-pass pour continuit√© de service",
            "√âviter r√©duction de section sur aspiration",
            "Installer manom√®tre aspiration pour surveillance"
        ])
    
    # Recommandations pour les vitesses d'√©coulement
    velocity_recommendations = []
    if npshd_result.velocity > 3.0:
        # Calculer diam√®tre optimal pour vitesse raisonnable
        optimal_suction_diameter_velocity = input_data.suction_pipe_diameter * 1.2
        current_suction_dn_velocity = get_closest_dn(input_data.suction_pipe_diameter)
        recommended_suction_dn_velocity = get_closest_dn(optimal_suction_diameter_velocity)
        
        # Debug pour voir les valeurs de vitesse
        print(f"üîç DEBUG VITESSE ASPIRATION:")
        print(f"  Aspiration s√©lectionn√©e: {input_data.suction_pipe_diameter}mm ‚Üí DN{input_data.suction_dn or get_closest_dn(input_data.suction_pipe_diameter)}")
        print(f"  Aspiration recommand√©e: {optimal_suction_diameter_velocity:.1f}mm ‚Üí DN{recommended_suction_dn_velocity}")
        print(f"  Vitesse calcul√©e: {npshd_result.velocity:.2f} m/s")
        
        # Utiliser la valeur DN s√©lectionn√©e par l'utilisateur si disponible
        current_suction_dn_selected = input_data.suction_dn if input_data.suction_dn is not None else get_closest_dn(input_data.suction_pipe_diameter)
        
        velocity_solutions = [f"Vitesse aspiration excessive: {npshd_result.velocity:.2f} m/s"]
        
        # NOUVELLES RECOMMANDATIONS GRADU√âES POUR OPTIMISATION VITESSES
        if current_suction_dn_selected < recommended_suction_dn_velocity:
            # Utiliser les recommandations gradu√©es pour l'optimisation des vitesses
            velocity_diameter_options = calculate_graduated_diameter_recommendations(
                input_data.suction_pipe_diameter,
                input_data.flow_rate,
                npshd_result.velocity,
                input_data.suction_length,
                is_suction_pipe=True
            )
            
            if velocity_diameter_options and len(velocity_diameter_options) > 1:
                velocity_solutions.append("OPTIMISATION DIAM√àTRE - Options gradu√©es:")
                # Prendre les 3 meilleures options pour optimisation vitesses
                velocity_solutions.extend([f"  {option}" for option in velocity_diameter_options[1:4]])
            else:
                # Fallback vers ancienne m√©thode
                velocity_solutions.append(f"Augmenter diam√®tre aspiration: DN{current_suction_dn_selected} ‚Üí DN{recommended_suction_dn_velocity}")
        else:
            velocity_solutions.append(f"Diam√®tre aspiration DN{current_suction_dn_selected} adapt√© - optimiser trac√©")
            
        velocity_solutions.extend([
            "Utiliser courbes √† grand rayon (3D minimum)",
            "Installer supports anti-vibratoires",
            "Pr√©voir isolation acoustique"
        ])
        
        velocity_recommendations.extend(velocity_solutions)
    elif npshd_result.velocity < 0.8:
        velocity_recommendations.extend([
            f"Vitesse aspiration faible: {npshd_result.velocity:.2f} m/s",
            "Risque de s√©dimentation et d√©p√¥ts",
            "Pr√©voir nettoyage p√©riodique des conduites",
            "Consid√©rer r√©duction de diam√®tre si possible"
        ])
    
    # Recommandations pour les pertes de charge
    head_loss_recommendations = []
    if npshd_result.total_head_loss > 5.0:
        head_loss_recommendations.extend([
            f"Pertes de charge aspiration √©lev√©es: {npshd_result.total_head_loss:.2f} m",
            "Optimiser trac√© hydraulique (√©viter coudes)",
            "Utiliser raccords progressive au lieu de brusques",
            "V√©rifier √©tat int√©rieur des conduites",
            "Consid√©rer mat√©riau plus lisse",
            "R√©duire nombre de singularit√©s"
        ])
    
    # Recommandations mat√©riaux selon le fluide - ANALYSE COMPL√àTE DE COMPATIBILIT√â CHIMIQUE
    material_recommendations = []
    
    # Nouvelle analyse compl√®te de compatibilit√© chimique
    compatibility_analysis = analyze_chemical_compatibility(
        input_data.fluid_type,
        input_data.suction_material,
        input_data.discharge_material,
        input_data.temperature
    )
    
    # ===============================================================================================
    # ANALYSE CRITIQUE APPROFONDIE DU CHOIX MAT√âRIAU-FLUIDE - POINT DE VUE EXPERT
    # ===============================================================================================
    
    critical_analysis = []
    
    # Analyse critique sp√©cifique selon le fluide pomp√©
    if input_data.fluid_type == "acid":
        critical_analysis.extend([
            "üß™ CRITIQUE EXPERT - FLUIDE ACIDE:",
            "‚ùå ERREUR FR√âQUENTE: Utiliser l'acier standard (catastrophique - corrosion rapide)",
            "‚ùå SOUS-ESTIMATION: PVC standard insuffisant pour acides concentr√©s >70%",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "steel_galvanized", "cast_iron"]:
            critical_analysis.extend([
                "üö® CHOIX INAD√âQUAT: Mat√©riau ferreux avec acide = D√âSASTRE GARANTI",
                "üíÄ RISQUE: Corrosion perforante en 3-6 mois maximum",
                "üí∞ CO√õT: Remplacement complet + d√©contamination = x10 du prix initial",
                "üèóÔ∏è  OBLIGATION: Inox 316L minimum ou PTFE/PFA pour acides forts"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üü° CHOIX DISCUTABLE: PVC limit√© √† 60¬∞C et pH 2-12",
                "‚ö†Ô∏è  ATTENTION: Fluage du PVC sous pression + temp√©rature",
                "üìä RECOMMANDATION: PVDF ou Inox 316L plus fiables",
                "üî¨ V√âRIFICATION: Tester compatibilit√© avec √©chantillon fluide r√©el"
            ])
        elif input_data.suction_material in ["stainless_steel_316", "stainless_steel_304"]:
            critical_analysis.extend([
                "‚úÖ CHOIX PERTINENT: Inox adapt√© mais attention aux d√©tails",
                "‚ö†Ô∏è  NUANCE CRITIQUE: 316L > 304L pour r√©sistance chlorures",
                "üîß ASSEMBLAGE: Soudures TIG obligatoires, pas de vis acier standard",
                "üí° OPTIMISATION: Finition √©lectropolie recommand√©e (rugosit√© <0.4¬µm)"
            ])
    
    elif input_data.fluid_type == "seawater":
        critical_analysis.extend([
            "üåä CRITIQUE EXPERT - EAU DE MER:",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "steel":
            critical_analysis.extend([
                "üö® CHOIX CATASTROPHIQUE: Acier + eau de mer = corrosion galvanique massive",
                "‚è±Ô∏è  DUR√âE DE VIE: 2-4 mois avant perforation",
                "üí∞ ERREUR CO√õTEUSE: Maintenance corrective permanente",
                "üèóÔ∏è  OBLIGATION: Duplex 2205 minimum ou rev√™tement √©poxy"
            ])
        elif input_data.suction_material == "cast_iron":
            critical_analysis.extend([
                "‚ùå ERREUR MAJEURE: Fonte + chlorures marins = destruction rapide",
                "üß™ R√âALIT√â CHIMIQUE: Piq√ªres de corrosion en 30-60 jours",
                "üîß SOLUTION FORC√âE: Rev√™tement c√©ramique ou remplacement complet",
                "üí° CONSEIL: Inox duplex ou PEHD PE100 selon la pression"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üü¢ CHOIX ACCEPTABLE mais avec r√©serves importantes:",
                "‚ö†Ô∏è  LIMITE TEMP√âRATURE: PVC fragile >40¬∞C (climats tropicaux)",
                "üå°Ô∏è  DILATATION: Coefficient 8x sup√©rieur √† l'acier - pr√©voir joints",
                "üîß ASSEMBLAGE: Collage PVC sensible √† la temp√©rature de mise en ≈ìuvre",
                "üí° AM√âLIORATION: PEHD PE100 plus r√©sistant aux chocs thermiques"
            ])
        elif input_data.suction_material == "stainless_steel_316":
            critical_analysis.extend([
                "‚úÖ EXCELLENT CHOIX avec optimisations possibles:",
                "‚öôÔ∏è  D√âTAIL CRITIQUE: Inox 316L sup√©rieur au 316 standard",
                "üî¨ COMPOSITION: Mo >2% obligatoire pour r√©sistance chlorures",
                "üèóÔ∏è  ASSEMBLAGE: √âviter contact galvanique avec autres m√©taux",
                "üíé PERFECTION: Duplex 2507 pour conditions extr√™mes"
            ])
    
    elif input_data.fluid_type in ["gasoline", "diesel"]:
        fuel_name = "Essence" if input_data.fluid_type == "gasoline" else "Diesel"
        critical_analysis.extend([
            f"‚õΩ CRITIQUE EXPERT - {fuel_name.upper()}:",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üö® ERREUR DANGEREUSE: PVC gonfl√© et fragilis√© par hydrocarbures",
                "üíÄ S√âCURIT√â: Risque fuite + incendie/explosion",
                "üìè D√âFORMATION: Gonflement PVC jusqu'√† 15% en volume",
                "üèóÔ∏è  OBLIGATION: Acier ou composite sp√©cialis√© hydrocarbures"
            ])
        elif input_data.suction_material == "steel":
            critical_analysis.extend([
                "‚úÖ CHOIX STANDARD mais attention aux d√©tails:",
                "‚ö†Ô∏è  REV√äTEMENT: Acier nu sensible √† corrosion par eau contenue",
                "üîß ASSEMBLAGE: Soudures continues obligatoires - pas de filetage",
                "üí° OPTIMISATION: Rev√™tement √©poxy ou galvanisation √† chaud",
                "üìä NORME: API 650 pour stockage, ATEX pour pompage"
            ])
        elif input_data.suction_material in ["aluminum", "copper"]:
            critical_analysis.extend([
                "‚ùå INCOMPATIBILIT√â CHIMIQUE: M√©taux non-ferreux + hydrocarbures",
                "üß™ PROBL√àME: Formation de compos√©s organom√©talliques",
                "‚ö° √âLECTROSTATIQUE: Accumulation charges + risque √©tincelles",
                "üèóÔ∏è  REMPLACEMENT: Acier rev√™tu ou inox 316L obligatoire"
            ])
    
    elif input_data.fluid_type in ["milk", "honey", "wine", "fruit_juice"]:
        food_type = {"milk": "LAIT", "honey": "MIEL", "wine": "VIN", "fruit_juice": "JUS DE FRUIT"}[input_data.fluid_type]
        critical_analysis.extend([
            f"üçØ CRITIQUE EXPERT - {food_type} (AGRO-ALIMENTAIRE):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "steel_galvanized"]:
            critical_analysis.extend([
                "‚ùå INACCEPTABLE ALIMENTAIRE: Acier standard INTERDIT contact alimentaire",
                "ü¶† CONTAMINATION: Corrosion + d√©veloppement bact√©rien",
                "‚öñÔ∏è  R√âGLEMENTATION: Non-conforme FDA/CE/HACCP",
                "üèóÔ∏è  OBLIGATION: Inox 316L poli sanitaire (Ra <0.8¬µm) minimum"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üü° CHOIX LIMIT√â: PVC standard inad√©quat contact alimentaire",
                "üìú CERTIFICATION: PVC-U alimentaire obligatoire (sans plomb/cadmium)",
                "üå°Ô∏è  LIMITATION: PVC fragile aux nettoyages haute temp√©rature",
                "üí° AM√âLIORATION: Inox 316L ou PEHD alimentaire plus adapt√©"
            ])
        elif input_data.suction_material == "stainless_steel_316":
            critical_analysis.extend([
                "‚úÖ EXCELLENT CHOIX avec finitions critiques:",
                "üî¨ √âTAT SURFACE: Polissage √©lectrolytique Ra <0.4¬µm OBLIGATOIRE",
                "üßΩ NETTOYAGE: Compatible CIP/SIP (150¬∞C max)",
                "üìú CERTIFICATIONS: 3.1B + FDA/CE alimentaire obligatoires",
                "üíé PERFECTION: 316L avec finition miroir pour produits sensibles"
            ])
    
    elif input_data.fluid_type == "hydraulic_oil":
        critical_analysis.extend([
            "üîß CRITIQUE EXPERT - HUILE HYDRAULIQUE:",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚ùå INCOMPATIBILIT√â MAJEURE: PVC d√©grad√© par additifs d'huile",
                "‚öóÔ∏è  R√âACTION CHIMIQUE: Plastifiants PVC dissous dans l'huile",
                "üîß CONS√âQUENCE: Durcissement + fissuration du PVC",
                "üèóÔ∏è  SOLUTION: Acier inox ou tubes hydrauliques haute pression"
            ])
        elif input_data.suction_material == "steel":
            critical_analysis.extend([
                "‚úÖ CHOIX ADAPT√â avec pr√©cautions d'usage:",
                "üíß CONTAMINATION: √âviter traces d'eau (corrosion interne)",
                "üå°Ô∏è  TEMP√âRATURE: Pr√©voir dilatation diff√©rentielle acier/huile",
                "üîß FILTRATION: Filtre 25¬µm obligatoire protection pompe",
                "üí° OPTIMISATION: Passivation acier pour huiles haute performance"
            ])
    
    elif input_data.fluid_type == "bleach":
        critical_analysis.extend([
            "üßΩ CRITIQUE EXPERT - EAU DE JAVEL (Agent de blanchiment):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "cast_iron", "steel_galvanized"]:
            critical_analysis.extend([
                "üö® CHOIX CATASTROPHIQUE: M√©taux ferreux + chlore = corrosion par piq√ªres",
                "‚öóÔ∏è  R√âACTION CHIMIQUE: Hypochlorite + fer = formation FeCl3 (rouille active)",
                "‚è±Ô∏è  D√âGRADATION: Perforations en 15-30 jours selon concentration",
                "üíÄ RISQUE SANITAIRE: Contamination par ions ferriques",
                "üèóÔ∏è  SOLUTION OBLIGATOIRE: PVC-U ou PEHD exclusivement pour eau de javel"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚úÖ CHOIX OPTIMAL: PVC r√©sistant au chlore jusqu'√† 1000 ppm",
                "üî¨ CHIMIE: PVC-U non-plastifi√© obligatoire (pas PVC souple)",
                "üå°Ô∏è  TEMP√âRATURE: Limit√© √† 40¬∞C avec eau de javel (d√©gagement Cl2)",
                "üí° PR√âCAUTION: Ventilation obligatoire - gaz chlor√© toxique",
                "üîß ASSEMBLAGE: Joints EPDM sp√©cial chlore, √©viter NBR"
            ])
        elif input_data.suction_material == "stainless_steel_316":
            critical_analysis.extend([
                "üü° CHOIX ACCEPTABLE avec r√©serves:",
                "‚ö†Ô∏è  CONCENTRATION: Inox 316L limit√© √† 200 ppm chlore libre",
                "üß™ CORROSION: Piq√ªres possibles si >500 ppm ou pH <7",
                "üèóÔ∏è  ALTERNATIVE: Duplex 2205 ou Hastelloy C-276 pour fortes concentrations",
                "üîß JOINTS: PTFE ou FKM obligatoires (pas EPDM standard)"
            ])
    
    elif input_data.fluid_type == "tomato_sauce":
        critical_analysis.extend([
            "üçÖ CRITIQUE EXPERT - SAUCE TOMATE (Produit alimentaire acide):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "steel_galvanized", "cast_iron"]:
            critical_analysis.extend([
                "‚ùå TRIPLE VIOLATION: Alimentaire + Acide + Temp√©rature",
                "ü¶† CONTAMINATION: Fer + tomate = go√ªt m√©tallique + noircissement",
                "‚öñÔ∏è  R√âGLEMENTATION: Interdit FDA/CE contact alimentaire direct",
                "üß™ pH CRITIQUE: Sauce tomate pH 4.0-4.6 (acide) attaque m√©taux ferreux",
                "üèóÔ∏è  OBLIGATION: Inox 316L poli sanitaire Ra <0.4¬µm exclusivement"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üü° CHOIX LIMIT√â: PVC alimentaire possible mais non optimal",
                "üå°Ô∏è  TEMP√âRATURE: Sauce chaude >60¬∞C probl√©matique pour PVC",
                "üìú CERTIFICATION: PVC-U alimentaire sans phtalates obligatoire",
                "üßΩ NETTOYAGE: Difficile - rugosit√© PVC retient r√©sidus",
                "üí° RECOMMANDATION: Inox 316L pr√©f√©rable pour viscosit√© + temp√©rature"
            ])
        elif input_data.suction_material == "stainless_steel_316":
            critical_analysis.extend([
                "‚úÖ CHOIX EXCELLENT: Inox 316L optimal produits alimentaires acides",
                "üî¨ R√âSISTANCE: pH 4.0-4.6 + temp√©rature + viscosit√© = parfait",
                "üßΩ NETTOYAGE: Surface lisse compatible CIP haute temp√©rature",
                "üìú CONFORMIT√â: Certifications 3.1B + FDA alimentaire disponibles",
                "üíé FINITION: √âlectropolissage Ra <0.4¬µm pour viscosit√© √©lev√©e"
            ])
    
    elif input_data.fluid_type == "soap_solution":
        critical_analysis.extend([
            "üß¥ CRITIQUE EXPERT - SOLUTION SAVONNEUSE (Agent tensioactif):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "cast_iron"]:
            critical_analysis.extend([
                "‚ö†Ô∏è  PROBL√àME DE SAPONIFICATION: Savon + m√©taux ferreux",
                "üß™ R√âACTION: Formation savons m√©talliques (pr√©cipit√©s)",
                "üîß ENCRASSEMENT: D√©p√¥ts calcaires amplifi√©s par savons m√©talliques",
                "üíß pH √âLEV√â: Solutions savonneuses basiques (pH 9-11) attaquent fonte",
                "üèóÔ∏è  AM√âLIORATION: Rev√™tement √©poxy ou passage inox 304"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚úÖ CHOIX ADAPT√â: PVC r√©sistant tensioactifs et pH basique",
                "üßΩ AVANTAGE: Surface lisse limite adh√©sion r√©sidus savonneux",
                "üå°Ô∏è  TEMP√âRATURE: Attention solutions chaudes >50¬∞C (d√©graissage)",
                "üîß ENTRETIEN: Rin√ßage p√©riodique √©viter accumulation r√©sidus"
            ])
    
    elif input_data.fluid_type == "yogurt":
        critical_analysis.extend([
            "ü•õ CRITIQUE EXPERT - YAOURT (Produit laitier ferment√©):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material in ["steel", "steel_galvanized"]:
            critical_analysis.extend([
                "‚ùå INACCEPTABLE: Acier standard + acide lactique = contamination",
                "ü¶† BACT√âRIES: Corrosion favorise d√©veloppement pathog√®nes",
                "üß™ pH ACIDE: Yaourt pH 4.0-4.4 attaque m√©taux ferreux",
                "‚öñÔ∏è  R√âGLEMENTATION: Non conforme HACCP et FDA/CE",
                "üèóÔ∏è  OBLIGATION: Inox 316L poli sanitaire obligatoire"
            ])
        elif input_data.suction_material == "stainless_steel_316":
            critical_analysis.extend([
                "‚úÖ CHOIX PARFAIT: Inox 316L optimal produits laitiers ferment√©s",
                "üî¨ R√âSISTANCE: Acide lactique + viscosit√© + nettoyage vapeur",
                "üßΩ HYGI√àNE: Surface √©lectropolie compatible ferments lactiques",
                "üå°Ô∏è  TEMP√âRATURE: R√©sistant st√©rilisation 135¬∞C (UHT/CIP)"
            ])
    
    elif input_data.fluid_type == "glycerol":
        critical_analysis.extend([
            "üçØ CRITIQUE EXPERT - GLYC√âROL (Viscosit√© extr√™me):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üü° CHOIX DISCUTABLE: PVC + viscosit√© √©lev√©e = contraintes m√©caniques",
                "üîß PRESSION: Glyc√©rol visqueux g√©n√®re surpressions - PVC fragile",
                "üå°Ô∏è  TEMP√âRATURE: Glyc√©rol chauff√© (fluidification) > limite PVC",
                "üí° AM√âLIORATION: Acier ou inox pour applications glyc√©rol concentr√©"
            ])
        elif input_data.suction_material in ["steel", "stainless_steel_316"]:
            critical_analysis.extend([
                "‚úÖ CHOIX OPTIMAL: M√©taux r√©sistants viscosit√© + pression",
                "üîß DIMENSIONNEMENT: Pr√©voir surpressions dues viscosit√©",
                "üå°Ô∏è  CHAUFFAGE: Tra√ßage thermique pour fluidification si n√©cessaire",
                "üí° CONSEIL: Pompes volum√©triques pr√©f√©rables au centrifuge"
            ])
    
    elif input_data.fluid_type == "methanol":
        critical_analysis.extend([
            "üß™ CRITIQUE EXPERT - M√âTHANOL (Alcool toxique):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚ùå INCOMPATIBILIT√â: PVC gonfl√© par m√©thanol (solvant)",
                "üíÄ S√âCURIT√â: M√©thanol + PVC d√©grad√© = fuite toxique",
                "‚ö° √âLECTROSTATIQUE: M√©thanol conducteur + PVC isolant = charges",
                "üèóÔ∏è  OBLIGATION: Acier inox ou PTFE exclusivement"
            ])
        elif input_data.suction_material in ["steel", "stainless_steel_316"]:
            critical_analysis.extend([
                "‚úÖ CHOIX ADAPT√â: M√©taux r√©sistants m√©thanol",
                "üíÄ S√âCURIT√â: M√©thanol tr√®s toxique - √©tanch√©it√© parfaite obligatoire",
                "‚ö° √âLECTROSTATIQUE: Mise √† terre compl√®te installation",
                "üîß JOINTS: FKM (Viton) exclusivement, pas NBR"
            ])
    
    elif input_data.fluid_type == "ethanol":
        critical_analysis.extend([
            "üç∫ CRITIQUE EXPERT - √âTHANOL (Alcool √©thylique):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚ö†Ô∏è  GONFLEMENT: PVC + √©thanol = d√©formation progressive",
                "üîß ASSEMBLAGE: Colles PVC dissoutes par √©thanol concentr√©",
                "üå°Ô∏è  √âVAPORATION: √âthanol volatile - pertes par perm√©ation PVC",
                "üèóÔ∏è  AM√âLIORATION: Acier inox si √©thanol >70% concentration"
            ])
        elif input_data.suction_material in ["steel", "stainless_steel_316"]:
            critical_analysis.extend([
                "‚úÖ CHOIX EXCELLENT: M√©taux parfaitement compatibles √©thanol",
                "üç∫ ALIMENTAIRE: Inox 316L si usage alimentaire (spiritueux)",
                "üîß JOINTS: NBR acceptable, FKM optimal",
                "‚ö° ATEX: Zone Ex si √©thanol >40% - √©quipements antid√©flagrants"
            ])
    
    elif input_data.fluid_type == "palm_oil":
        critical_analysis.extend([
            "üå¥ CRITIQUE EXPERT - HUILE DE PALME (Huile v√©g√©tale):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚ùå INCOMPATIBILIT√â: Huile de palme dissout plastifiants PVC",
                "üîß D√âGRADATION: Durcissement + fissuration PVC au contact huile",
                "üå°Ô∏è  TEMP√âRATURE: Huile de palme chaude (fluidification) d√©truit PVC",
                "üèóÔ∏è  SOLUTION: Acier inox exclusivement pour huiles v√©g√©tales"
            ])
        elif input_data.suction_material in ["steel", "stainless_steel_316"]:
            critical_analysis.extend([
                "‚úÖ CHOIX OPTIMAL: M√©taux compatibles huiles v√©g√©tales",
                "üå°Ô∏è  CHAUFFAGE: Tra√ßage thermique n√©cessaire (solidification 35¬∞C)",
                "üßΩ ENTRETIEN: Nettoyage d√©graissants alcalins p√©riodique",
                "üìú ALIMENTAIRE: Inox 316L si usage alimentaire obligatoire"
            ])
    
    elif input_data.fluid_type == "water":
        critical_analysis.extend([
            "üíß CRITIQUE EXPERT - EAU (apparemment simple mais...):",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        if input_data.suction_material == "steel":
            critical_analysis.extend([
                "üü° CHOIX CLASSIQUE mais attention aux d√©tails:",
                "ü¶† PROBL√àME SOUS-ESTIM√â: Corrosion biologique (bact√©ries sulfato-r√©ductrices)",
                "üìä QUALIT√â EAU: pH, O2, CO2, chlorures d√©terminants pour dur√©e de vie",
                "üîß PROTECTION: Rev√™tement √©poxy ou cathodique selon contexte",
                "üí° CONSEIL: Analyse eau compl√®te avant dimensionnement d√©finitif"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "‚úÖ CHOIX PERTINENT avec r√©serves de temp√©rature:",
                "üå°Ô∏è  LIMITE CRITIQUE: PVC ramollit >60¬∞C (eau chaude sanitaire)",
                "‚òÄÔ∏è  D√âGRADATION UV: Tubes PVC ext√©rieurs noircissent + fragilisent",
                "üí° AM√âLIORATION: PVC surdimensionn√© ou PEHD selon temp√©rature",
                "üîß ASSEMBLAGE: Colle PVC sensible temp√©rature - respecter temps s√©chage"
            ])
        elif input_data.suction_material == "cast_iron":
            critical_analysis.extend([
                "üü° CHOIX TRADITIONNEL avec surveillance n√©cessaire:",
                "ü¶† BIOFILM: Fonte rugueuse favorise d√©veloppement bact√©ries",
                "üíß QUALIT√â EAU: Eau douce agressive (pH <7) attaque fonte",
                "üîß PROTECTION: Rev√™tement ciment ou √©poxy recommand√©",
                "üìä SURVEILLANCE: Contr√¥le qualit√© eau et √©paisseur fonte r√©gulier"
            ])
    
    # CAS PAR D√âFAUT - ANALYSE OBLIGATOIRE POUR TOUS LES FLUIDES NON COUVERTS
    else:
        # S'assurer qu'une analyse appara√Æt toujours
        fluid_name_display = input_data.fluid_type.replace('_', ' ').upper()
        critical_analysis.extend([
            f"üî¨ ANALYSE CRITIQUE - {fluid_name_display}:",
            f"‚ö†Ô∏è  √âVALUATION MAT√âRIAU CHOISI ({input_data.suction_material}):",
        ])
        
        # Analyse g√©n√©rique bas√©e sur les propri√©t√©s du mat√©riau
        if input_data.suction_material in ["steel", "steel_galvanized", "cast_iron"]:
            critical_analysis.extend([
                "‚ö†Ô∏è  MAT√âRIAUX FERREUX: Sensibilit√© corrosion selon fluide",
                "üíß HUMIDIT√â: √âviter stagnation - favorise corrosion",
                "üîß PROTECTION: Rev√™tement ou traitement anti-corrosion recommand√©",
                "üìä SURVEILLANCE: Contr√¥le √©paisseur et √©tat surface p√©riodique"
            ])
        elif input_data.suction_material == "pvc":
            critical_analysis.extend([
                "üå°Ô∏è  PVC - LIMITATIONS G√âN√âRALES:",
                "‚ö†Ô∏è  TEMP√âRATURE: Limite 60¬∞C - v√©rifier compatibilit√© fluide chaud",
                "üß™ SOLVANTS: PVC sensible hydrocarbures et solvants organiques", 
                "‚òÄÔ∏è  UV: Protection n√©cessaire exposition ext√©rieure",
                "üîß ASSEMBLAGE: Technique collage critique pour √©tanch√©it√©"
            ])
        elif input_data.suction_material in ["stainless_steel_316", "stainless_steel_304"]:
            critical_analysis.extend([
                "‚úÖ INOX - CHOIX POLYVALENT:",
                "üî¨ NUANCE: 316L sup√©rieur √† 304 pour r√©sistance corrosion",
                "üßΩ √âTAT SURFACE: Polissage am√©liore r√©sistance et nettoyage",
                "üí∞ CO√õT: Investissement initial √©lev√© mais durabilit√© sup√©rieure",
                "üîß ASSEMBLAGE: Soudage TIG recommand√© pour applications critiques"
            ])
        elif input_data.suction_material == "pehd":
            critical_analysis.extend([
                "üí™ PEHD - PLASTIQUE TECHNIQUE:",
                "‚úÖ R√âSISTANCE: Chimique sup√©rieure au PVC",
                "üå°Ô∏è  TEMP√âRATURE: Meilleure tenue que PVC (-40¬∞C √† +80¬∞C)",
                "üîß SOUDAGE: Techniques sp√©cialis√©es (bout √† bout, √©lectrosoudage)",
                "‚ö° √âLECTROSTATIQUE: Mise √† terre si fluides conducteurs"
            ])
        
        # Ajouter toujours des recommandations g√©n√©rales
        critical_analysis.extend([
            "",  # Ligne vide pour s√©paration
            "üìã RECOMMANDATIONS G√âN√âRALES COMPATIBILIT√â:",
            "üß™ TEST: Essai de compatibilit√© sur √©chantillon recommand√©",
            "üìä ANALYSE: V√©rifier composition chimique exacte du fluide",
            "üå°Ô∏è  TEMP√âRATURE: Consid√©rer variations saisonni√®res/process",
            "‚öñÔ∏è  NORMES: V√©rifier conformit√© r√©glementaire selon application"
        ])
    
    # Analyse critique de la temp√©rature de fonctionnement
    if input_data.temperature > 60:
        critical_analysis.extend([
            f"üå°Ô∏è  ANALYSE TEMP√âRATURE CRITIQUE ({input_data.temperature}¬∞C):",
        ])
        if input_data.suction_material == "pvc" and input_data.temperature > 60:
            critical_analysis.extend([
                f"üö® DANGER IMMINENT: PVC √† {input_data.temperature}¬∞C = RUPTURE PROGRAMM√âE",
                "üìâ PROPRI√âT√âS: R√©sistance m√©canique divis√©e par 3 √† 70¬∞C",
                "‚è±Ô∏è  DUR√âE DE VIE: 50-80% r√©duite au-del√† de 60¬∞C",
                "üèóÔ∏è  REMPLACEMENT URGENT: PEHD PE100 ou inox selon pression"
            ])
        elif input_data.temperature > 80:
            critical_analysis.extend([
                "‚ö†Ô∏è  HAUTE TEMP√âRATURE: Tous mat√©riaux affect√©s >80¬∞C",
                "üîß JOINTS: Graphite ou PTFE obligatoires (EPDM insuffisant)",
                "üìè DILATATION: Calcul des contraintes thermiques obligatoire",
                "üèóÔ∏è  SUPPORTS: Compensateurs et guides de dilatation n√©cessaires"
            ])
    
    # Recommandations d'am√©lioration critiques
    improvement_recommendations = []
    
    # Analyse du contexte d'installation
    if input_data.fluid_type in ["acid", "seawater", "gasoline", "diesel"]:
        improvement_recommendations.extend([
            "üèóÔ∏è  RECOMMANDATIONS AM√âLIORATION CRITIQUES:",
            "üîç AUDIT: Analyse de d√©faillance sur installations similaires",
            "üìä TESTS: Essais de corrosion acc√©l√©r√©e sur √©chantillons",
            "‚öñÔ∏è  CONFORMIT√â: V√©rification r√©glementaire (ATEX, alimentaire, etc.)",
            "üë∑ FORMATION: Personnel sensibilis√© aux risques sp√©cifiques du fluide",
            "üìã MAINTENANCE: Plan pr√©ventif adapt√© √† l'agressivit√© du fluide"
        ])
    
    if input_data.temperature > 40:
        improvement_recommendations.extend([
            "üå°Ô∏è  SP√âCIFICATIONS TEMP√âRATURE:",
            f"üß™ MAT√âRIAU: Coefficient de dilatation critique √† {input_data.temperature}¬∞C",
            "üîß SUPPORTS: Compensateurs de dilatation tous les 15-20m",
            "üìè CALCULS: Contraintes thermiques selon Eurocode EN1993",
            "üå°Ô∏è  ISOLATION: R√©duire d√©perditions et prot√©ger personnel"
        ])
        
    # Ajouter l'analyse critique aux recommandations (OBLIGATOIRE POUR TOUS LES FLUIDES)
    if critical_analysis:
        material_recommendations.extend([""] + critical_analysis)  # Ligne vide pour s√©parer
    else:
        # Cas de s√©curit√© - ne devrait jamais arriver avec le cas par d√©faut
        material_recommendations.extend([
            "‚ö†Ô∏è  ANALYSE CRITIQUE: √âvaluation de compatibilit√© requise",
            "üß™ RECOMMANDATION: Consulter expert mat√©riaux pour cette application"
        ])
    
    if improvement_recommendations:
        material_recommendations.extend([""] + improvement_recommendations)
    
    # Recommandations √©lectriques d'installation
    electrical_recommendations = []
    if perf_result.starting_current > 150:
        electrical_recommendations.extend([
            f"Courant de d√©marrage √©lev√©: {perf_result.starting_current:.0f}A",
            "D√©marreur progressif recommand√©",
            "V√©rifier capacit√© du transformateur",
            "Pr√©voir compensation d'√©nergie r√©active",
            "Installer protection thermique renforc√©e"
        ])
    
    # Recommandations de maintenance pr√©ventive
    maintenance_recommendations = [
        "Maintenance pr√©ventive recommand√©e:",
        "- V√©rification alignement pompe-moteur (6 mois)",
        "- Contr√¥le vibrations et bruit (mensuel)",
        "- Inspection √©tanch√©it√© (trimestriel)",
        "- Analyse d'huile roulement (annuel)",
        "- V√©rification serrage boulonnage (6 mois)",
        "- Contr√¥le isolement √©lectrique (annuel)"
    ]
    
    # Ajout des recommandations sp√©cialis√©es
    if len(installation_recommendations) > 0:
        expert_recommendations.append({
            "type": "installation",
            "priority": 2,
            "title": "üèóÔ∏è INSTALLATION HYDRAULIQUE",
            "description": f"Optimisations sp√©cifiques pour configuration {suction_type}",
            "impact": "Am√©lioration fiabilit√© et performance",
            "solutions": installation_recommendations,
            "urgency": "MOYENNE",
            "cost_impact": "MOD√âR√â"
        })
    
    if len(velocity_recommendations) > 0:
        expert_recommendations.append({
            "type": "velocity",
            "priority": 3,
            "title": "üåä OPTIMISATION VITESSES",
            "description": "Ajustement des vitesses d'√©coulement",
            "impact": "R√©duction usure et optimisation √©nerg√©tique",
            "solutions": velocity_recommendations,
            "urgency": "MOYENNE",
            "cost_impact": "MOD√âR√â"
        })
    
    if len(head_loss_recommendations) > 0:
        expert_recommendations.append({
            "type": "head_loss",
            "priority": 4,
            "title": "‚ö° R√âDUCTION PERTES DE CHARGE",
            "description": "Optimisation circuit hydraulique",
            "impact": "√âconomie d'√©nergie et performance",
            "solutions": head_loss_recommendations,
            "urgency": "FAIBLE",
            "cost_impact": "RENTABLE"
        })
    
    if len(material_recommendations) > 0:
        expert_recommendations.append({
            "type": "materials",
            "priority": 5,
            "title": "üîß MAT√âRIAUX ET TEMP√âRATURE",
            "description": "Compatibilit√© mat√©riaux/fluide/temp√©rature",
            "impact": "Durabilit√© et s√©curit√© installation",
            "solutions": material_recommendations,
            "urgency": "MOYENNE",
            "cost_impact": "VARIABLE"
        })
    
    if len(electrical_recommendations) > 0:
        expert_recommendations.append({
            "type": "electrical",
            "priority": 6,
            "title": "üîå OPTIMISATION √âLECTRIQUE",
            "description": "Am√©liorations syst√®me √©lectrique",
            "impact": "Fiabilit√© d√©marrage et protection",
            "solutions": electrical_recommendations,
            "urgency": "MOYENNE",
            "cost_impact": "MOD√âR√â"
        })
    
    expert_recommendations.append({
        "type": "maintenance",
        "priority": 7,
        "title": "üîç MAINTENANCE PR√âVENTIVE",
        "description": "Plan de maintenance pour fiabilit√© optimale",
        "impact": "Prolongation dur√©e de vie √©quipement",
        "solutions": maintenance_recommendations,
        "urgency": "FAIBLE",
        "cost_impact": "RENTABLE"
    })
    
    # Analyse de performance √©nerg√©tique
    if overall_efficiency < 65:
        potential_savings = (75 - overall_efficiency) * 0.01 * annual_energy_cost
        expert_recommendations.append({
            "type": "energy",
            "priority": 2,
            "title": "‚ö° EFFICACIT√â √âNERG√âTIQUE FAIBLE",
            "description": f"Rendement global {overall_efficiency:.1f}% - Potentiel d'√©conomie de {potential_savings:.0f}‚Ç¨/an",
            "impact": f"Surconsommation: {potential_savings * 10:.0f}‚Ç¨ sur 10 ans",
            "solutions": [
                "Pompe haute efficacit√© (gain 5-10%)",
                "Moteur haut rendement Premium (gain 2-5%)",
                "Variateur de vitesse (gain 10-30%)",
                "Optimisation point de fonctionnement",
                "Maintenance pr√©ventive r√©guli√®re"
            ],
            "urgency": "MOYENNE",
            "cost_impact": "RENTABLE"
        })
    
    # Analyse hydraulique avanc√©e
    if npshd_result.velocity > 3.0:
        # Calculer les diam√®tres optimaux
        optimal_suction_diameter = input_data.suction_pipe_diameter * math.sqrt(npshd_result.velocity / 2.5)
        optimal_discharge_diameter = input_data.discharge_pipe_diameter * math.sqrt(npshd_result.velocity / 3.0)
        
        # Convertir en DN normalis√©s
        current_suction_dn = get_closest_dn(input_data.suction_pipe_diameter)
        recommended_suction_dn = get_closest_dn(optimal_suction_diameter)
        current_discharge_dn = get_closest_dn(input_data.discharge_pipe_diameter)
        recommended_discharge_dn = get_closest_dn(optimal_discharge_diameter)
        
        # Debug pour voir les valeurs exactes utilis√©es
        print(f"üîç DEBUG DIAM√àTRES VITESSE:")
        print(f"  Aspiration s√©lectionn√©e: {input_data.suction_pipe_diameter}mm ‚Üí DN{input_data.suction_dn or get_closest_dn(input_data.suction_pipe_diameter)}")
        print(f"  Aspiration recommand√©e: {optimal_suction_diameter:.1f}mm ‚Üí DN{recommended_suction_dn}")
        print(f"  Refoulement s√©lectionn√©: {input_data.discharge_pipe_diameter}mm ‚Üí DN{input_data.discharge_dn or get_closest_dn(input_data.discharge_pipe_diameter)}")
        print(f"  Refoulement recommand√©: {optimal_discharge_diameter:.1f}mm ‚Üí DN{recommended_discharge_dn}")
        print(f"  Vitesse calcul√©e: {npshd_result.velocity:.2f}m/s")
        
        # Utiliser les valeurs DN s√©lectionn√©es par l'utilisateur si disponibles
        current_suction_dn_selected = input_data.suction_dn if input_data.suction_dn is not None else get_closest_dn(input_data.suction_pipe_diameter)
        current_discharge_dn_selected = input_data.discharge_dn if input_data.discharge_dn is not None else get_closest_dn(input_data.discharge_pipe_diameter)
        
        # V√©rifier si les recommandations sont vraiment n√©cessaires
        # (√©viter de recommander un changement si le DN s√©lectionn√© est d√©j√† appropri√©)
        need_suction_change = current_suction_dn_selected < recommended_suction_dn
        need_discharge_change = current_discharge_dn_selected < recommended_discharge_dn
        
        solutions = []
        
        # NOUVELLES RECOMMANDATIONS GRADU√âES POUR VITESSES √âLEV√âES
        if need_suction_change:
            # Recommandations gradu√©es pour l'aspiration
            suction_velocity_options = calculate_graduated_diameter_recommendations(
                input_data.suction_pipe_diameter,
                input_data.flow_rate,
                hmt_result.suction_velocity,
                input_data.suction_length,
                is_suction_pipe=True
            )
            
            if suction_velocity_options and len(suction_velocity_options) > 1:
                solutions.append("ASPIRATION - Options gradu√©es vitesses √©lev√©es:")
                solutions.extend([f"  {option}" for option in suction_velocity_options[1:3]])  # 2 meilleures options
            else:
                solutions.append(f"Diam√®tre aspiration: DN{current_suction_dn_selected} ‚Üí DN{recommended_suction_dn}")
        
        if need_discharge_change:
            # Recommandations gradu√©es pour le refoulement
            discharge_velocity_options = calculate_graduated_diameter_recommendations(
                input_data.discharge_pipe_diameter,
                input_data.flow_rate,
                hmt_result.discharge_velocity,
                input_data.discharge_length,
                is_suction_pipe=False
            )
            
            if discharge_velocity_options and len(discharge_velocity_options) > 1:
                solutions.append("REFOULEMENT - Options gradu√©es vitesses √©lev√©es:")
                solutions.extend([f"  {option}" for option in discharge_velocity_options[1:3]])  # 2 meilleures options
            else:
                solutions.append(f"Diam√®tre refoulement: DN{current_discharge_dn_selected} ‚Üí DN{recommended_discharge_dn}")
            
        # Ajouter recommandations g√©n√©rales seulement si changement n√©cessaire
        if need_suction_change or need_discharge_change:
            solutions.extend([
                "Mat√©riaux anti-√©rosion (inox, fonte)",
                "Supports anti-vibratoires", 
                "R√©duction d√©bit si possible"
            ])
        else:
            # Pas de changement de diam√®tre n√©cessaire mais vitesse encore √©lev√©e
            solutions.extend([
                f"Diam√®tres actuels (DN{current_suction_dn_selected}/DN{current_discharge_dn_selected}) appropri√©s",
                "Optimiser trac√© hydraulique (courbes 3D)",
                "Mat√©riaux r√©sistants √† l'√©rosion",
                "Supports anti-vibratoires renforc√©s"
            ])
        
        expert_recommendations.append({
            "type": "hydraulic",
            "priority": 3,
            "title": "üåä VITESSE EXCESSIVE",
            "description": f"Vitesse {npshd_result.velocity:.2f}m/s > 3m/s - Risque d'√©rosion et cavitation",
            "impact": "Usure pr√©matur√©e, bruit, vibrations, perte de performance",
            "solutions": solutions,
            "urgency": "MOYENNE",
            "cost_impact": "MOD√âR√â"
        })
    
    # Analyse des singularit√©s
    total_singularities = sum([
        input_data.suction_elbow_90, input_data.suction_elbow_45, input_data.suction_elbow_30,
        input_data.suction_tee_flow, input_data.suction_tee_branch,
        input_data.suction_reducer_gradual, input_data.suction_reducer_sudden,
        input_data.suction_gate_valve, input_data.suction_globe_valve, input_data.suction_ball_valve,
        input_data.suction_butterfly_valve, input_data.suction_check_valve, input_data.suction_strainer,
        input_data.suction_foot_valve,
        input_data.discharge_elbow_90, input_data.discharge_elbow_45, input_data.discharge_elbow_30,
        input_data.discharge_tee_flow, input_data.discharge_tee_branch,
        input_data.discharge_reducer_gradual, input_data.discharge_reducer_sudden,
        input_data.discharge_gate_valve, input_data.discharge_globe_valve, input_data.discharge_ball_valve,
        input_data.discharge_butterfly_valve, input_data.discharge_check_valve, input_data.discharge_strainer,
        input_data.discharge_flow_meter, input_data.discharge_pressure_gauge
    ])
    
    if total_singularities > 15:
        expert_recommendations.append({
            "type": "complexity",
            "priority": 4,
            "title": "üîß INSTALLATION COMPLEXE",
            "description": f"{total_singularities} singularit√©s - Pertes de charge √©lev√©es",
            "impact": "R√©duction du rendement, maintenance accrue, co√ªts d'exploitation",
            "solutions": [
                "Simplification du circuit hydraulique",
                "R√©duction nombre de raccords",
                "Tuyauterie rectiligne privil√©gi√©e",
                "Raccords √† rayon large",
                "Maintenance pr√©ventive renforc√©e"
            ],
            "urgency": "FAIBLE",
            "cost_impact": "LONG TERME"
        })
    
    # Potentiel d'optimisation
    optimization_potential = {
        "energy_savings": max(0, 80 - overall_efficiency),  # Potentiel d'√©conomie d'√©nergie
        "npsh_margin": npshd_result.npsh_margin,
        "velocity_optimization": max(0, npshd_result.velocity - 2.0),  # R√©duction de vitesse possible
        "head_loss_reduction": max(0, total_head_loss - (total_head_loss * 0.7)),  # R√©duction pertes possible
        "annual_cost_savings": potential_savings if overall_efficiency < 65 else 0
    }
    
    # ========================================================================================================
    # NOUVELLES RECOMMANDATIONS INTELLIGENTES ORGANIS√âES POUR EXPERT
    # ========================================================================================================
    
    # Analyse de compatibilit√© chimique pour l'organisation intelligente
    compatibility_analysis = analyze_chemical_compatibility(
        input_data.fluid_type,
        input_data.suction_material,
        input_data.discharge_material,
        input_data.temperature
    )
    
    # Remplacer toutes les recommandations existantes par une organisation intelligente
    expert_recommendations = organize_expert_recommendations_intelligently(
        expert_recommendations,  # Recommandations existantes
        npshd_result,
        hmt_result, 
        perf_result,
        compatibility_analysis,
        overall_efficiency,
        annual_energy_cost,
        input_data
    )
    
    # Courbes de performance √©tendues
    performance_curves = generate_performance_curves(perf_input)
    
    # Courbes syst√®me
    system_curves = {
        "flow_points": performance_curves["flow"],
        "system_curve": [flow**2 * (total_head_loss / input_data.flow_rate**2) for flow in performance_curves["flow"]],
        "operating_point": {
            "flow": input_data.flow_rate,
            "head": hmt_result.hmt,
            "efficiency": overall_efficiency,
            "power": hydraulic_power
        }
    }
    
    return ExpertAnalysisResult(
        input_data=input_data,
        npshd_analysis={
            "npshd": npshd_result.npshd,
            "npsh_required": npshd_result.npsh_required,
            "npsh_margin": npshd_result.npsh_margin,
            "cavitation_risk": npshd_result.cavitation_risk,
            "velocity": npshd_result.velocity,
            "reynolds_number": npshd_result.reynolds_number,
            "total_head_loss": npshd_result.total_head_loss,
            "warnings": npshd_result.warnings,
            "recommendations": npshd_result.recommendations
        },
        hmt_analysis={
            "hmt": hmt_result.hmt,
            "static_head": hmt_result.static_head,
            "total_head_loss": hmt_result.total_head_loss,
            "suction_velocity": hmt_result.suction_velocity,
            "discharge_velocity": hmt_result.discharge_velocity,
            "useful_pressure_head": hmt_result.useful_pressure_head,
            "warnings": hmt_result.warnings
        },
        performance_analysis={
            "overall_efficiency": perf_result.overall_efficiency,
            "pump_efficiency": perf_result.pump_efficiency,
            "motor_efficiency": perf_result.motor_efficiency,
            "hydraulic_power": hydraulic_power,
            "electrical_power": perf_result.power_calculations.get("absorbed_power", 0),
            "nominal_current": perf_result.nominal_current,
            "starting_current": perf_result.starting_current,
            "power_calculations": perf_result.power_calculations,
            "warnings": perf_result.warnings,
            "alerts": perf_result.alerts
        },
        electrical_analysis={
            "voltage": input_data.voltage,
            "power_factor": input_data.power_factor,
            "starting_method": input_data.starting_method,
            "cable_length": input_data.cable_length,
            "cable_section": perf_result.recommended_cable_section,
            "annual_energy_cost": annual_energy_cost,
            "daily_energy_cost": annual_energy_cost / 365,
            "energy_consumption_per_m3": energy_consumption,
            "operating_hours": input_data.operating_hours,
            "electricity_cost": input_data.electricity_cost
        },
        overall_efficiency=overall_efficiency,
        total_head_loss=total_head_loss,
        system_stability=system_stability,
        energy_consumption=energy_consumption,
        expert_recommendations=expert_recommendations,
        optimization_potential=optimization_potential,
        performance_curves=performance_curves,
        system_curves=system_curves
    )

@api_router.post("/expert-analysis", response_model=ExpertAnalysisResult)
async def expert_analysis(input_data: ExpertAnalysisInput):
    """
    Analyse compl√®te d'expert avec tous les calculs hydrauliques et √©lectriques
    """
    try:
        result = calculate_expert_analysis(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur dans l'analyse expert: {str(e)}")

# Legacy functions for backward compatibility
def calculate_cable_section(current: float, cable_length: float, voltage: int) -> float:
    """Calculate required cable section"""
    if voltage == 230:
        base_section = current / 6  # A/mm¬≤
    else:  # 400V
        base_section = current / 8  # A/mm¬≤
    
    length_factor = 1 + (cable_length / 100) * 0.2
    required_section = base_section * length_factor
    
    standard_sections = [1.5, 2.5, 4, 6, 10, 16, 25, 35, 50, 70, 95, 120, 150, 185, 240, 300]
    for section in standard_sections:
        if section >= required_section:
            return section
    
    return 300

def perform_hydraulic_calculation(input_data: CalculationInput) -> CalculationResult:
    """Legacy hydraulic calculation function"""
    warnings = []
    
    # Get fluid properties
    fluid_props = get_fluid_properties(input_data.fluid_type, input_data.temperature)
    
    # Convert units
    flow_rate_m3s = input_data.flow_rate / 3600
    pipe_diameter_m = input_data.pipe_diameter / 1000
    pipe_area = math.pi * (pipe_diameter_m / 2) ** 2
    
    # Calculate flow velocity
    flow_velocity = flow_rate_m3s / pipe_area
    
    # Calculate Reynolds number
    reynolds_number = calculate_reynolds_number(
        flow_velocity, pipe_diameter_m, fluid_props.density, fluid_props.viscosity
    )
    
    # Calculate friction factor
    friction_factor = calculate_friction_factor(reynolds_number)
    
    # Calculate pressure losses
    linear_pressure_loss = friction_factor * (input_data.pipe_length / pipe_diameter_m) * (fluid_props.density * flow_velocity**2 / 2)
    total_pressure_loss = linear_pressure_loss * 1.2
    
    # Calculate HMT
    static_head = input_data.suction_height if input_data.suction_height > 0 else 0
    pressure_head = total_pressure_loss / (fluid_props.density * 9.81)
    hmt_meters = static_head + pressure_head
    hmt_bar = hmt_meters * fluid_props.density * 9.81 / 100000
    
    # Calculate NPSH
    npsh_required = 2.0 + (input_data.flow_rate / 100) ** 0.8
    npsh_available_calc = 10.3 - abs(input_data.suction_height) - (total_pressure_loss / (fluid_props.density * 9.81))
    cavitation_risk = npsh_available_calc <= npsh_required
    
    # Calculate power
    hydraulic_power = (flow_rate_m3s * hmt_meters * fluid_props.density * 9.81) / 1000
    total_efficiency = (input_data.pump_efficiency * input_data.motor_efficiency) / 10000
    absorbed_power = hydraulic_power / total_efficiency
    
    # Calculate electrical parameters
    if input_data.voltage == 230:
        nominal_current = (absorbed_power * 1000) / (input_data.voltage * 0.8)
    else:
        nominal_current = (absorbed_power * 1000) / (input_data.voltage * 1.732 * 0.8)
    
    cable_section = calculate_cable_section(nominal_current, input_data.cable_length, input_data.voltage)
    starting_method = "Direct start" if absorbed_power < 3 else "Star-delta"
    
    if cavitation_risk:
        warnings.append("RISQUE DE CAVITATION: NPSHd ‚â§ NPSHr")
    
    return CalculationResult(
        input_data=input_data,
        fluid_properties=fluid_props,
        flow_velocity=flow_velocity,
        reynolds_number=reynolds_number,
        friction_factor=friction_factor,
        linear_pressure_loss=linear_pressure_loss,
        total_pressure_loss=total_pressure_loss,
        hmt_meters=hmt_meters,
        hmt_bar=hmt_bar,
        npsh_required=npsh_required,
        npsh_available_calc=npsh_available_calc,
        cavitation_risk=cavitation_risk,
        hydraulic_power=hydraulic_power,
        absorbed_power=absorbed_power,
        total_efficiency=total_efficiency * 100,
        nominal_current=nominal_current,
        cable_section=cable_section,
        starting_method=starting_method,
        warnings=warnings
    )

# ============================================================================
# ENHANCED API ENDPOINTS FOR THREE TABS
# ============================================================================

@api_router.get("/")
async def root():
    return {"message": "API de Calcul Hydraulique pour Pompes Centrifuges"}

@api_router.get("/fluids")
async def get_available_fluids():
    """Obtenir la liste des fluides disponibles"""
    return {
        "fluids": [
            {"id": key, "name": value["name"]} 
            for key, value in FLUID_PROPERTIES.items()
        ]
    }

@api_router.get("/pipe-materials")
async def get_pipe_materials():
    """Obtenir la liste des mat√©riaux de tuyauterie"""
    return {
        "materials": [
            {
                "id": key, 
                "name": value["name"], 
                "description": value["description"],
                "roughness": value["roughness"]
            }
            for key, value in PIPE_MATERIALS.items()
        ]
    }

@api_router.get("/fittings")
async def get_fittings():
    """Obtenir la liste des raccords disponibles"""
    return {
        "fittings": [
            {"id": key, "name": value["name"], "k_coefficient": value["k"]}
            for key, value in FITTING_COEFFICIENTS.items()
        ]
    }

@api_router.post("/calculate-npshd")
async def calculate_npshd_endpoint(input_data: NPSHdCalculationInput):
    """Calcul NPSHd - Onglet 1"""
    try:
        result = calculate_npshd_enhanced(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@api_router.post("/calculate-hmt")
async def calculate_hmt_endpoint(input_data: HMTCalculationInput):
    """Calcul HMT - Onglet 2"""
    try:
        result = calculate_hmt_enhanced(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@api_router.post("/calculate-performance")
async def calculate_performance_endpoint(input_data: PerformanceAnalysisInput):
    """Analyse de performance - Onglet 3"""
    try:
        result = calculate_performance_analysis(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

# Legacy endpoint for backward compatibility
@api_router.post("/calculate")
async def calculate_pump_performance(input_data: CalculationInput):
    """Calcul de performance de pompe (compatibilit√© ancienne version)"""
    try:
        result = perform_hydraulic_calculation(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@api_router.post("/save-calculation", response_model=PumpHistory)
async def save_calculation(input_data: PumpHistoryCreate):
    """Save calculation to history"""
    history_obj = PumpHistory(**input_data.dict())
    await db.pump_history.insert_one(history_obj.dict())
    return history_obj

@api_router.get("/history", response_model=List[PumpHistory])
async def get_calculation_history():
    """Get calculation history"""
    history = await db.pump_history.find().sort("timestamp", -1).to_list(100)
    return [PumpHistory(**item) for item in history]

@api_router.delete("/history/{history_id}")
async def delete_calculation(history_id: str):
    """Delete calculation from history"""
    result = await db.pump_history.delete_one({"id": history_id})
    if result.deleted_count == 0:
        raise HTTPException(status_code=404, detail="Calculation not found")
    return {"message": "Calculation deleted successfully"}

# ============================================================================
# EXPERT SOLAIRE - DIMENSIONNEMENT POMPAGE SOLAIRE
# ============================================================================

# Base de donn√©es d'irradiation solaire par r√©gion (kWh/m¬≤/jour)
SOLAR_IRRADIATION_DATABASE = {
    "france": {
        "nord": {"name": "Nord de la France", "irradiation_annual": 3.2, "peak_month": 5.8, "min_month": 1.1},
        "centre": {"name": "Centre de la France", "irradiation_annual": 3.8, "peak_month": 6.5, "min_month": 1.4},
        "sud": {"name": "Sud de la France", "irradiation_annual": 4.6, "peak_month": 7.2, "min_month": 2.1},
        "corse": {"name": "Corse", "irradiation_annual": 4.9, "peak_month": 7.5, "min_month": 2.4}
    },
    "afrique": {
        "maroc_nord": {"name": "Maroc Nord", "irradiation_annual": 5.2, "peak_month": 8.1, "min_month": 2.8},
        "maroc_sud": {"name": "Maroc Sud", "irradiation_annual": 6.8, "peak_month": 9.2, "min_month": 4.1},
        "algerie": {"name": "Alg√©rie", "irradiation_annual": 5.8, "peak_month": 8.5, "min_month": 3.2},
        "tunisie": {"name": "Tunisie", "irradiation_annual": 5.4, "peak_month": 8.0, "min_month": 2.9},
        "senegal": {"name": "S√©n√©gal", "irradiation_annual": 6.2, "peak_month": 7.8, "min_month": 4.8},
        "burkina": {"name": "Burkina Faso", "irradiation_annual": 6.5, "peak_month": 7.2, "min_month": 5.1},
        "mali": {"name": "Mali", "irradiation_annual": 6.8, "peak_month": 7.5, "min_month": 5.4},
        "niger": {"name": "Niger", "irradiation_annual": 7.1, "peak_month": 7.8, "min_month": 5.8},
        "tchad": {"name": "Tchad", "irradiation_annual": 6.9, "peak_month": 7.4, "min_month": 5.2},
        "cote_ivoire": {"name": "C√¥te d'Ivoire", "irradiation_annual": 5.1, "peak_month": 6.8, "min_month": 3.9},
        "egypte": {"name": "√âgypte", "irradiation_annual": 6.4, "peak_month": 8.9, "min_month": 3.8}
    },
    "moyen_orient": {
        "arabie": {"name": "Arabie Saoudite", "irradiation_annual": 6.2, "peak_month": 8.7, "min_month": 3.9},
        "emirats": {"name": "√âmirats Arabes Unis", "irradiation_annual": 5.9, "peak_month": 8.2, "min_month": 3.6},
        "jordanie": {"name": "Jordanie", "irradiation_annual": 5.8, "peak_month": 8.5, "min_month": 3.1}
    },
    "asie": {
        "inde_nord": {"name": "Inde Nord", "irradiation_annual": 5.1, "peak_month": 7.8, "min_month": 2.9},
        "inde_sud": {"name": "Inde Sud", "irradiation_annual": 5.8, "peak_month": 6.9, "min_month": 4.2},
        "chine": {"name": "Chine", "irradiation_annual": 4.2, "peak_month": 6.8, "min_month": 1.8},
        "vietnam": {"name": "Vietnam", "irradiation_annual": 4.6, "peak_month": 6.1, "min_month": 2.8}
    }
}

# Base de donn√©es des pompes solaires - APPROCHE GRUNDFOS R√âALISTE
SOLAR_PUMP_DATABASE = {
    # ===== POMPES SQF (Solar avec convertisseur int√©gr√©) - Petits d√©bits =====
    "sqf_0_6": {
        "name": "Grundfos SQF 0.6-2",
        "power_range": [90, 280],  # Watts
        "flow_range": [0.1, 2.5],  # m¬≥/h
        "head_range": [15, 75],  # m√®tres
        "efficiency": 0.38,
        "voltage": [24],  # DC volts
        "price_eur": 890,
        "type": "submersible",
        "category": "sqf_integrated"
    },
    "sqf_2_5": {
        "name": "Grundfos SQF 2.5-2",
        "power_range": [180, 450],  # Watts
        "flow_range": [0.5, 6],  # m¬≥/h
        "head_range": [20, 110],  # m√®tres
        "efficiency": 0.42,
        "voltage": [24, 48],  # DC volts
        "price_eur": 1250,
        "type": "submersible",
        "category": "sqf_integrated"
    },
    "sqf_5_7": {
        "name": "Grundfos SQF 5-7",
        "power_range": [350, 850],  # Watts
        "flow_range": [1, 12],  # m¬≥/h
        "head_range": [25, 140],  # m√®tres
        "efficiency": 0.48,
        "voltage": [48, 96],  # DC volts
        "price_eur": 1890,
        "type": "submersible",
        "category": "sqf_integrated"
    },
    "sqf_8_5": {
        "name": "Grundfos SQF 8.5-5",
        "power_range": [500, 1200],  # Watts
        "flow_range": [2, 18],  # m¬≥/h
        "head_range": [30, 120],  # m√®tres
        "efficiency": 0.52,
        "voltage": [48, 96],  # DC volts
        "price_eur": 2350,
        "type": "submersible",
        "category": "sqf_integrated"
    },
    
    # ===== POMPES SP + RSI (Standard + Convertisseur externe) - Gros d√©bits =====
    "sp_3a_15_rsi": {
        "name": "Grundfos SP 3A-15 + RSI",
        "power_range": [1000, 2200],  # Watts
        "flow_range": [8, 25],  # m¬≥/h
        "head_range": [40, 180],  # m√®tres
        "efficiency": 0.58,
        "voltage": [96, 192],  # DC volts
        "price_eur": 3450,  # SP (1850‚Ç¨) + RSI (1600‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 1850,
        "rsi_cost": 1600
    },
    "sp_5a_18_rsi": {
        "name": "Grundfos SP 5A-18 + RSI",
        "power_range": [1500, 3200],  # Watts
        "flow_range": [12, 40],  # m¬≥/h
        "head_range": [50, 220],  # m√®tres
        "efficiency": 0.62,
        "voltage": [192, 384],  # DC volts
        "price_eur": 4850,  # SP (2650‚Ç¨) + RSI (2200‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 2650,
        "rsi_cost": 2200
    },
    "sp_8a_22_rsi": {
        "name": "Grundfos SP 8A-22 + RSI",
        "power_range": [2500, 5500],  # Watts
        "flow_range": [20, 65],  # m¬≥/h
        "head_range": [60, 280],  # m√®tres
        "efficiency": 0.65,
        "voltage": [192, 384],  # DC volts
        "price_eur": 7200,  # SP (3800‚Ç¨) + RSI (3400‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 3800,
        "rsi_cost": 3400
    },
    "sp_11a_25_rsi": {
        "name": "Grundfos SP 11A-25 + RSI",
        "power_range": [4000, 8500],  # Watts
        "flow_range": [35, 95],  # m¬≥/h
        "head_range": [70, 350],  # m√®tres
        "efficiency": 0.68,
        "voltage": [384, 600],  # DC volts
        "price_eur": 11500,  # SP (6200‚Ç¨) + RSI (5300‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 6200,
        "rsi_cost": 5300
    },
    "sp_17a_30_rsi": {
        "name": "Grundfos SP 17A-30 + RSI",
        "power_range": [6000, 12000],  # Watts
        "flow_range": [60, 150],  # m¬≥/h
        "head_range": [80, 400],  # m√®tres
        "efficiency": 0.72,
        "voltage": [384, 800],  # DC volts
        "price_eur": 16800,  # SP (9200‚Ç¨) + RSI (7600‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 9200,
        "rsi_cost": 7600
    },
    "sp_25a_35_rsi": {
        "name": "Grundfos SP 25A-35 + RSI",
        "power_range": [8000, 18000],  # Watts
        "flow_range": [100, 220],  # m¬≥/h
        "head_range": [90, 480],  # m√®tres
        "efficiency": 0.75,
        "voltage": [600, 1000],  # DC volts
        "price_eur": 24500,  # SP (14200‚Ç¨) + RSI (10300‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi",
        "pump_cost": 14200,
        "rsi_cost": 10300
    },
    
    # ===== POMPES SP TR√àS GROSSES + RSI INDUSTRIEL - Applications industrielles =====
    "sp_46a_40_rsi": {
        "name": "Grundfos SP 46A-40 + RSI Industriel",
        "power_range": [15000, 30000],  # Watts
        "flow_range": [180, 350],  # m¬≥/h
        "head_range": [100, 600],  # m√®tres
        "efficiency": 0.78,
        "voltage": [800, 1200],  # DC volts
        "price_eur": 42000,  # SP (26000‚Ç¨) + RSI Industriel (16000‚Ç¨)
        "type": "submersible",
        "category": "sp_rsi_industrial",
        "pump_cost": 26000,
        "rsi_cost": 16000
    },
    
    # ===== POMPES DE SURFACE POUR APPLICATIONS SP√âCIALES =====
    "cr_3_rsi": {
        "name": "Grundfos CR 3 + RSI Surface",
        "power_range": [750, 2200],  # Watts
        "flow_range": [5, 30],  # m¬≥/h
        "head_range": [20, 120],  # m√®tres
        "efficiency": 0.55,
        "voltage": [96, 384],  # DC volts
        "price_eur": 3200,  # CR (1800‚Ç¨) + RSI (1400‚Ç¨)
        "type": "surface",
        "category": "cr_rsi_surface",
        "pump_cost": 1800,
        "rsi_cost": 1400
    },
    "cr_10_rsi": {
        "name": "Grundfos CR 10 + RSI Surface",
        "power_range": [2200, 5500],  # Watts
        "flow_range": [20, 85],  # m¬≥/h
        "head_range": [25, 180],  # m√®tres
        "efficiency": 0.62,
        "voltage": [384, 600],  # DC volts
        "price_eur": 6800,  # CR (3800‚Ç¨) + RSI (3000‚Ç¨)
        "type": "surface",
        "category": "cr_rsi_surface",
        "pump_cost": 3800,
        "rsi_cost": 3000
    }
}

# Base de donn√©es des panneaux solaires
SOLAR_PANEL_DATABASE = {
    "polycristallin_270w": {
        "name": "Panneau Polycristallin 270W",
        "power_nominal": 270,  # Watts
        "voltage_nominal": 24,  # Volts
        "current_nominal": 11.25,  # Amp√®res
        "efficiency": 0.17,  # 17%
        "size": [1.65, 0.99],  # m√®tres [longueur, largeur]
        "price_eur": 175,
        "warranty": 20,  # ann√©es
        "temperature_coefficient": -0.43  # %/¬∞C
    },
    "polycristallin_320w": {
        "name": "Panneau Polycristallin 320W",
        "power_nominal": 320,  # Watts
        "voltage_nominal": 24,  # Volts
        "current_nominal": 13.33,  # Amp√®res
        "efficiency": 0.18,  # 18%
        "size": [1.96, 0.99],  # m√®tres [longueur, largeur]
        "price_eur": 195,
        "warranty": 20,  # ann√©es
        "temperature_coefficient": -0.42  # %/¬∞C
    },
    "monocristallin_400w": {
        "name": "Panneau Monocristallin 400W",
        "power_nominal": 400,  # Watts
        "voltage_nominal": 24,  # Volts
        "current_nominal": 16.67,  # Amp√®res
        "efficiency": 0.21,  # 21%
        "size": [2.0, 1.0],  # m√®tres [longueur, largeur]
        "price_eur": 280,
        "warranty": 25,  # ann√©es
        "temperature_coefficient": -0.38  # %/¬∞C
    },
    "monocristallin_550w": {
        "name": "Panneau Monocristallin 550W",
        "power_nominal": 550,  # Watts
        "voltage_nominal": 48,  # Volts
        "current_nominal": 11.46,  # Amp√®res
        "efficiency": 0.22,  # 22%
        "size": [2.3, 1.1],  # m√®tres [longueur, largeur]
        "price_eur": 380,
        "warranty": 25,  # ann√©es
        "temperature_coefficient": -0.35  # %/¬∞C
    }
}

# Base de donn√©es des batteries solaires
SOLAR_BATTERY_DATABASE = {
    "lithium_100ah": {
        "name": "Batterie Lithium LiFePO4 100Ah",
        "capacity": 100,  # Ah
        "voltage": 12,  # Volts
        "energy": 1.2,  # kWh
        "efficiency": 0.95,  # 95%
        "cycles": 6000,
        "price_eur": 450,
        "weight": 13,  # kg
        "discharge_depth": 0.95  # 95% DOD
    },
    "lithium_200ah": {
        "name": "Batterie Lithium LiFePO4 200Ah",
        "capacity": 200,  # Ah
        "voltage": 12,  # Volts
        "energy": 2.4,  # kWh
        "efficiency": 0.96,  # 96%
        "cycles": 6000,
        "price_eur": 850,
        "weight": 24,  # kg
        "discharge_depth": 0.95  # 95% DOD
    },
    "gel_150ah": {
        "name": "Batterie Gel 150Ah",
        "capacity": 150,  # Ah
        "voltage": 12,  # Volts
        "energy": 1.8,  # kWh
        "efficiency": 0.85,  # 85%
        "cycles": 1500,
        "price_eur": 320,
        "weight": 45,  # kg
        "discharge_depth": 0.50  # 50% DOD pour long√©vit√©
    }
}

# Base de donn√©es des r√©gulateurs MPPT
MPPT_CONTROLLER_DATABASE = {
    "victron_75_15": {
        "name": "Victron MPPT 75/15",
        "max_pv_voltage": 75,  # Volts
        "max_current": 15,  # Amp√®res
        "max_power": 220,  # Watts (12V)
        "efficiency": 0.98,  # 98%
        "price_eur": 95,
        "bluetooth": True
    },
    "victron_100_30": {
        "name": "Victron MPPT 100/30",
        "max_pv_voltage": 100,  # Volts
        "max_current": 30,  # Amp√®res
        "max_power": 440,  # Watts (12V)
        "efficiency": 0.98,  # 98%
        "price_eur": 180,
        "bluetooth": True
    },
    "victron_150_45": {
        "name": "Victron MPPT 150/45",
        "max_pv_voltage": 150,  # Volts
        "max_current": 45,  # Amp√®res
        "max_power": 650,  # Watts (12V)
        "efficiency": 0.98,  # 98%
        "price_eur": 285,
        "bluetooth": True
    }
}

# Mod√®les Pydantic pour le dimensionnement solaire
class SolarPumpingInput(BaseModel):
    # Informations du projet
    project_name: str = "Syst√®me de Pompage Solaire"
    location_region: str = "france"
    location_subregion: str = "centre"
    
    # Besoins en eau et hydrauliques
    daily_water_need: float  # m¬≥/jour
    operating_hours: float = 8.0  # heures de fonctionnement par jour
    flow_rate: float = 1.25  # m¬≥/h - calcul√© automatiquement (volume/heures)
    seasonal_variation: float = 1.2  # coefficient saisonnier (1.0 = constant, 1.5 = +50% en √©t√©)
    peak_months: List[int] = [6, 7, 8]  # mois de pic (juin, juillet, ao√ªt)
    
    # Param√®tres hydrauliques pour calcul HMT restructur√©
    dynamic_level: float = 15.0  # Niveau dynamique (profondeur pompage)
    tank_height: float = 5.0  # Hauteur du ch√¢teau d'eau
    static_head: float = 20.0  # Hauteur g√©om√©trique (calcul√©e auto: niveau + ch√¢teau)
    dynamic_losses: float = 5.0  # Pertes de charge dynamiques
    useful_pressure_head: float = 0.0  # Pression utile convertie en hauteur
    total_head: float  # HMT totale (calcul√©e automatiquement dans le frontend)
    pipe_diameter: float = 100  # mm
    pipe_length: float = 50  # m√®tres
    
    # Param√®tres solaires
    panel_peak_power: float = 400  # Wc - nouveau champ puissance cr√™te panneau
    
    # Contraintes du syst√®me
    autonomy_days: int = 2  # jours d'autonomie souhait√©s
    system_voltage: int = 24  # Volts DC (12, 24, 48 ou 96)
    installation_type: str = "submersible"  # ou "surface"
    
    # Param√®tres √©conomiques
    electricity_cost: float = 0.15  # ‚Ç¨/kWh (co√ªt √©lectricit√© locale)
    project_lifetime: int = 25  # ann√©es
    maintenance_cost_annual: float = 0.02  # % du co√ªt initial par an
    
    # Contraintes d'installation
    available_surface: Optional[float] = None  # m¬≤ disponibles pour panneaux
    max_budget: Optional[float] = None  # ‚Ç¨ budget maximum
    grid_connection_available: bool = False  # connexion r√©seau disponible
    
    # Param√®tres environnementaux
    ambient_temperature_avg: float = 25  # ¬∞C temp√©rature ambiante moyenne
    dust_factor: float = 0.95  # facteur de r√©duction d√ª √† la poussi√®re (0.9-1.0)
    shading_factor: float = 1.0  # facteur d'ombrage (0.8-1.0)

class SolarSystemDimensioning(BaseModel):
    # Dimensionnement automatique des composants
    recommended_pump: Dict[str, Any]
    solar_panels: Dict[str, Any]
    batteries: Dict[str, Any]
    mppt_controller: Dict[str, Any]
    
    # Calculs de performance
    energy_production: Dict[str, float]  # kWh/jour par mois
    energy_consumption: Dict[str, float]  # kWh/jour requis
    system_sizing: Dict[str, Any]
    
    # Analyse √©conomique
    economic_analysis: Dict[str, float]
    
    # Recommandations
    technical_recommendations: List[str]
    optimization_suggestions: List[str]
    
class SolarPumpingResult(BaseModel):
    input_data: SolarPumpingInput
    dimensioning: SolarSystemDimensioning
    
    # Calculs d√©taill√©s
    solar_irradiation: Dict[str, Any]  # Chang√© de float vers Any pour accepter les dicts
    system_efficiency: float
    pump_operating_hours: Dict[str, float]  # heures/jour par mois
    
    # Graphiques et courbes
    monthly_performance: Dict[str, List[float]]
    system_curves: Dict[str, Any]
    
    # Alertes et warnings
    warnings: List[str]
    critical_alerts: List[str]

def calculate_solar_pumping_system(input_data: SolarPumpingInput) -> SolarPumpingResult:
    """
    Calcul complet du dimensionnement d'un syst√®me de pompage solaire
    """
    warnings = []
    critical_alerts = []
    
    # 1. R√©cup√©ration des donn√©es d'irradiation solaire
    try:
        region_data = SOLAR_IRRADIATION_DATABASE[input_data.location_region]
        location_data = region_data[input_data.location_subregion]
        irradiation_annual = location_data["irradiation_annual"]
        irradiation_peak = location_data["peak_month"]
        irradiation_min = location_data["min_month"]
    except KeyError:
        warnings.append("R√©gion non trouv√©e, utilisation des valeurs par d√©faut")
        irradiation_annual = 4.0
        irradiation_peak = 6.5
        irradiation_min = 2.0
    
    # 2. Calcul des besoins √©nerg√©tiques hydrauliques
    # Puissance hydraulique = (Q √ó H √ó œÅ √ó g) / 3600  [Watts]
    # Q en m¬≥/h, H en m√®tres
    daily_flow = input_data.daily_water_need  # m¬≥/jour
    peak_daily_flow = daily_flow * input_data.seasonal_variation
    
    # Estimation du d√©bit horaire (fonctionnement sur heures de soleil utile)
    useful_sun_hours = irradiation_annual  # approximation - conserv√© pour calculs batteries
    # CORRECTION: Utiliser directement le d√©bit fourni au lieu de calculer
    hourly_flow_avg = input_data.flow_rate  # m¬≥/h - d√©bit r√©el calcul√© par le frontend
    hourly_flow_peak = hourly_flow_avg * input_data.seasonal_variation  # m¬≥/h avec variation saisonni√®re
    
    print(f"üîç DEBUG SOLAR: daily_water_need={input_data.daily_water_need}, flow_rate={input_data.flow_rate}, hourly_flow_peak={hourly_flow_peak}")
    
    # Puissance hydraulique requise
    hydraulic_power_avg = (hourly_flow_avg * input_data.total_head * 1000 * 9.81) / 3600  # Watts
    hydraulic_power_peak = (hourly_flow_peak * input_data.total_head * 1000 * 9.81) / 3600  # Watts
    
    # 3. S√©lection automatique de la pompe optimale
    suitable_pumps = []
    
    for pump_id, pump_data in SOLAR_PUMP_DATABASE.items():
        if (pump_data["type"] == input_data.installation_type and
            hydraulic_power_peak <= max(pump_data["power_range"]) and
            hourly_flow_peak <= max(pump_data["flow_range"]) and
            input_data.total_head <= max(pump_data["head_range"])):
            
            # Calculer l'efficacit√© du point de fonctionnement
            power_ratio = hydraulic_power_peak / max(pump_data["power_range"])
            efficiency_penalty = 1.0 if power_ratio > 0.5 else (0.8 + 0.2 * power_ratio / 0.5)
            
            suitable_pumps.append({
                "id": pump_id,
                "data": pump_data,
                "required_power": hydraulic_power_peak / (pump_data["efficiency"] * efficiency_penalty),
                "efficiency_score": pump_data["efficiency"] * efficiency_penalty,
                "cost_score": pump_data["price_eur"] / max(pump_data["power_range"])
            })
    
    if not suitable_pumps:
        print(f"‚ùå AUCUNE POMPE TROUV√âE: hourly_flow_peak={hourly_flow_peak}, total_head={input_data.total_head}")
        critical_alerts.append("Aucune pompe compatible trouv√©e pour ces sp√©cifications. Utilisation de la pompe la plus puissante disponible.")
        # S√©lection de la pompe la plus puissante par d√©faut (SP 46A-40)
        selected_pump_id = "sp_46a_40_rsi"
        selected_pump = SOLAR_PUMP_DATABASE[selected_pump_id]
        required_electrical_power = max(selected_pump["power_range"])  # Puissance maximale de cette pompe
    else:
        print(f"‚úÖ POMPES TROUV√âES: {len(suitable_pumps)} pompes compatibles")
        # S√©lection de la pompe optimale - ALGORITHME CORRIG√â
        def pump_score(pump):
            # Crit√®res de s√©lection (plus bas = meilleur)
            efficiency_score = pump["efficiency_score"]
            base_cost = pump["data"]["price_eur"]
            max_flow = max(pump["data"]["flow_range"])
            
            # 1. P√©nalit√© forte pour surdimensionnement
            flow_adequacy = hourly_flow_peak / max_flow
            if flow_adequacy < 0.1:  # Pompe 10x trop grosse
                oversizing_penalty = 10.0
            elif flow_adequacy < 0.2:  # Pompe 5x trop grosse  
                oversizing_penalty = 5.0
            elif flow_adequacy < 0.4:  # Pompe 2.5x trop grosse
                oversizing_penalty = 2.0
            else:  # Pompe bien dimensionn√©e
                oversizing_penalty = 1.0
            
            # 2. Score final : co√ªt p√©nalis√© divis√© par efficacit√© (plus bas = meilleur)
            return (base_cost * oversizing_penalty) / efficiency_score
        
        best_pump = min(suitable_pumps, key=pump_score)
        selected_pump_id = best_pump["id"]
        selected_pump = best_pump["data"]
        required_electrical_power = best_pump["required_power"]
    
    # 4. Dimensionnement des panneaux solaires
    # Facteur de d√©gradation et pertes syst√®me
    system_losses = 0.85  # 15% pertes (c√¢blage, MPPT, temp√©rature, vieillissement)
    environmental_factor = input_data.dust_factor * input_data.shading_factor
    
    # Puissance cr√™te n√©cessaire
    peak_power_needed = required_electrical_power / (system_losses * environmental_factor)
    
    # S√©lection des panneaux optimaux
    selected_panels = {}
    for panel_id, panel_data in SOLAR_PANEL_DATABASE.items():
        if input_data.system_voltage in [12, 24] and panel_data["voltage_nominal"] <= input_data.system_voltage * 2:
            nb_panels = math.ceil(peak_power_needed / panel_data["power_nominal"])
            total_power = nb_panels * panel_data["power_nominal"]
            total_cost = nb_panels * panel_data["price_eur"]
            surface_required = nb_panels * (panel_data["size"][0] * panel_data["size"][1])
            
            selected_panels[panel_id] = {
                "panel_data": panel_data,
                "quantity": nb_panels,
                "total_power": total_power,
                "total_cost": total_cost,
                "surface_required": surface_required,
                "power_ratio": total_power / peak_power_needed
            }
    
    # S√©lection du meilleur compromis
    if selected_panels:
        best_panels_id = min(selected_panels.keys(), 
                           key=lambda x: selected_panels[x]["total_cost"] / selected_panels[x]["total_power"])
        recommended_panels = selected_panels[best_panels_id]
    else:
        warnings.append("Configuration de panneaux par d√©faut utilis√©e")
        recommended_panels = {
            "panel_data": SOLAR_PANEL_DATABASE["monocristallin_400w"],
            "quantity": math.ceil(peak_power_needed / 400),
            "total_power": math.ceil(peak_power_needed / 400) * 400,
            "total_cost": math.ceil(peak_power_needed / 400) * 280,
            "surface_required": math.ceil(peak_power_needed / 400) * 2.0,
            "power_ratio": (math.ceil(peak_power_needed / 400) * 400) / peak_power_needed
        }
    
    # 5. Dimensionnement des batteries
    # √ânergie requise pour l'autonomie
    daily_energy_need = required_electrical_power * useful_sun_hours / 1000  # kWh/jour
    autonomy_energy = daily_energy_need * input_data.autonomy_days  # kWh
    
    # S√©lection des batteries
    selected_batteries = {}
    for battery_id, battery_data in SOLAR_BATTERY_DATABASE.items():
        if battery_data["voltage"] == 12:  # Standardisation sur 12V
            usable_energy = battery_data["energy"] * battery_data["discharge_depth"]
            nb_batteries = math.ceil(autonomy_energy / usable_energy)
            
            # Configuration s√©rie/parall√®le pour atteindre la tension syst√®me
            voltage_multiplier = input_data.system_voltage // battery_data["voltage"]
            nb_series = voltage_multiplier
            nb_parallel = math.ceil(nb_batteries / nb_series)
            total_batteries = nb_series * nb_parallel
            
            selected_batteries[battery_id] = {
                "battery_data": battery_data,
                "series": nb_series,
                "parallel": nb_parallel,
                "total_quantity": total_batteries,
                "total_capacity": total_batteries * battery_data["capacity"],
                "total_energy": total_batteries * battery_data["energy"],
                "usable_energy": total_batteries * usable_energy,
                "total_cost": total_batteries * battery_data["price_eur"]
            }
    
    # S√©lection des meilleures batteries (compromis co√ªt/performance)
    if selected_batteries:
        best_battery_id = min(selected_batteries.keys(),
                            key=lambda x: selected_batteries[x]["total_cost"] / selected_batteries[x]["usable_energy"])
        recommended_batteries = selected_batteries[best_battery_id]
    else:
        warnings.append("Configuration de batteries par d√©faut utilis√©e")
        recommended_batteries = {
            "battery_data": SOLAR_BATTERY_DATABASE["lithium_100ah"],
            "series": input_data.system_voltage // 12,
            "parallel": 2,
            "total_quantity": 4,
            "total_capacity": 400,
            "total_energy": 4.8,
            "usable_energy": 4.56,
            "total_cost": 1800
        }
    
    # 6. S√©lection du syst√®me de contr√¥le adapt√© au type de pompe
    if selected_pump.get("category") == "sqf_integrated":
        # Pour les SQF : convertisseur int√©gr√©, pas de r√©gulateur s√©par√©
        recommended_mppt = {
            "mppt_data": {
                "name": "Convertisseur int√©gr√© SQF",
                "description": "Convertisseur de fr√©quence int√©gr√© dans la pompe",
                "max_power": required_electrical_power,
                "voltage_range": selected_pump.get("voltage", [48]),
                "price_eur": 0  # Inclus dans le prix de la pompe
            },
            "quantity": 1,
            "total_cost": 0
        }
    elif selected_pump.get("category") in ["sp_rsi", "sp_rsi_industrial"]:
        # Pour les SP + RSI : le RSI EST le r√©gulateur, co√ªt inclus dans la pompe
        rsi_cost = selected_pump.get("rsi_cost", 0)
        recommended_mppt = {
            "mppt_data": {
                "name": "Convertisseur RSI Grundfos",
                "description": f"RSI externe pour pompe SP - {required_electrical_power}W",
                "max_power": required_electrical_power,
                "voltage_range": selected_pump.get("voltage", [192]),
                "price_eur": rsi_cost
            },
            "quantity": 1,
            "total_cost": rsi_cost
        }
    else:
        # Pour les autres pompes : r√©gulateur MPPT solaire classique
        max_pv_current = recommended_panels["quantity"] * recommended_panels["panel_data"]["current_nominal"]
        max_pv_voltage = recommended_panels["panel_data"]["voltage_nominal"] * 1.25  # facteur de s√©curit√©
        
        suitable_mppt = []
        for mppt_id, mppt_data in MPPT_CONTROLLER_DATABASE.items():
            if (mppt_data["max_current"] >= max_pv_current * 1.25 and
                mppt_data["max_pv_voltage"] >= max_pv_voltage):
                suitable_mppt.append({
                    "id": mppt_id,
                    "data": mppt_data,
                    "cost_efficiency": mppt_data["price_eur"] / mppt_data["max_power"]
                })
        
        if suitable_mppt:
            best_mppt = min(suitable_mppt, key=lambda x: x["cost_efficiency"])
            recommended_mppt = {
                "mppt_data": best_mppt["data"],
                "quantity": 1,
                "total_cost": best_mppt["data"]["price_eur"]
            }
        else:
            # R√©gulateur par d√©faut adapt√© √† la puissance
            if required_electrical_power < 1000:
                default_cost = 180
            elif required_electrical_power < 3000:
                default_cost = 450
            elif required_electrical_power < 8000:
                default_cost = 850
            else:
                default_cost = 1500
                
            warnings.append("R√©gulateur par d√©faut utilis√© - dimensionner selon puissance r√©elle")
            recommended_mppt = {
                "mppt_data": {
                    "name": f"R√©gulateur MPPT {required_electrical_power}W",
                    "description": f"R√©gulateur adapt√© √† {required_electrical_power}W",
                    "max_power": required_electrical_power * 1.2,
                    "price_eur": default_cost
                },
                "quantity": 1,
                "total_cost": default_cost
            }
    
    # 7. Calculs de performance mensuelle
    monthly_irradiation = []
    for month in range(12):
        if month + 1 in input_data.peak_months:
            irradiation = irradiation_peak - (irradiation_peak - irradiation_annual) * 0.3
        elif month + 1 in [11, 12, 1, 2]:  # mois d'hiver
            irradiation = irradiation_min + (irradiation_annual - irradiation_min) * 0.5
        else:
            irradiation = irradiation_annual
        monthly_irradiation.append(irradiation)
    
    # Production √©nerg√©tique mensuelle
    energy_production = {}
    energy_consumption = {}
    pump_hours = {}
    
    for month, irradiation in enumerate(monthly_irradiation):
        monthly_production = (recommended_panels["total_power"] * irradiation * 
                            system_losses * environmental_factor) / 1000  # kWh/jour
        
        # Besoins saisonniers
        if month + 1 in input_data.peak_months:
            monthly_need = peak_daily_flow
        else:
            monthly_need = daily_flow
        
        # Heures de fonctionnement de la pompe
        available_energy = monthly_production
        pump_power_kw = required_electrical_power / 1000
        max_pump_hours = available_energy / pump_power_kw if pump_power_kw > 0 else 0
        
        # Limitation par les besoins en eau
        required_pump_hours = (monthly_need * input_data.total_head * 1000 * 9.81) / (
            selected_pump["efficiency"] * required_electrical_power * 3600)
        
        actual_pump_hours = min(max_pump_hours, required_pump_hours, irradiation)
        
        energy_production[f"month_{month+1}"] = monthly_production
        energy_consumption[f"month_{month+1}"] = actual_pump_hours * pump_power_kw
        pump_hours[f"month_{month+1}"] = actual_pump_hours
    
    # 8. Analyse √©conomique
    total_system_cost = (recommended_panels["total_cost"] + 
                        recommended_batteries["total_cost"] + 
                        recommended_mppt["total_cost"] + 
                        selected_pump["price_eur"] + 
                        1500)  # Installation et accessoires
    
    # √âconomies annuelles (vs pompe √©lectrique)
    annual_water_production = sum([pump_hours[f"month_{month}"] * 
                                  (hourly_flow_avg if month not in input_data.peak_months 
                                   else hourly_flow_avg * input_data.seasonal_variation) * 30.44 
                                  for month in range(1, 13)])
    
    equivalent_electrical_consumption = annual_water_production * input_data.total_head * 1000 * 9.81 / (
        0.70 * 3600 * 1000)  # kWh/an avec rendement pompe √©lectrique 70%
    
    annual_savings = equivalent_electrical_consumption * input_data.electricity_cost
    
    # Analyse de rentabilit√©
    payback_period = total_system_cost / annual_savings if annual_savings > 0 else float('inf')
    
    # Maintenance annuelle
    annual_maintenance = total_system_cost * input_data.maintenance_cost_annual
    net_annual_savings = annual_savings - annual_maintenance
    
    economic_analysis = {
        "total_system_cost": total_system_cost,
        "annual_savings": annual_savings,
        "annual_maintenance": annual_maintenance,
        "net_annual_savings": net_annual_savings,
        "payback_period": payback_period,
        "project_lifetime": input_data.project_lifetime,
        "total_lifetime_savings": net_annual_savings * input_data.project_lifetime,
        "roi_percentage": (net_annual_savings * input_data.project_lifetime / total_system_cost) * 100
    }
    
    # 9. Recommandations techniques
    technical_recommendations = []
    optimization_suggestions = []
    
    if payback_period > 10:
        optimization_suggestions.append(f"P√©riode de retour √©lev√©e ({payback_period:.1f} ans) - Consid√©rer l'optimisation du syst√®me")
    
    if recommended_panels["surface_required"] > 100:
        technical_recommendations.append(f"Surface importante requise ({recommended_panels['surface_required']:.1f} m¬≤)")
    
    if input_data.autonomy_days > 3:
        technical_recommendations.append("Autonomie √©lev√©e - Syst√®me de stockage important requis")
    
    if irradiation_annual < 3.5:
        warnings.append("Irradiation faible pour cette r√©gion - Performance r√©duite")
    
    # V√©rifications critiques
    if required_electrical_power > recommended_panels["total_power"] * 0.8:
        critical_alerts.append("Puissance des panneaux juste suffisante - Pr√©voir une marge de s√©curit√©")
    
    if autonomy_energy > recommended_batteries["usable_energy"] * 0.9:
        critical_alerts.append("Capacit√© de stockage limite atteinte")
    
    # 10. Compilation des r√©sultats
    dimensioning = SolarSystemDimensioning(
        recommended_pump={
            "model": selected_pump["name"],
            "power": required_electrical_power,
            "efficiency": selected_pump["efficiency"],
            "type": selected_pump["type"],
            "cost": selected_pump["price_eur"],
            "specifications": selected_pump
        },
        solar_panels={
            "model": recommended_panels["panel_data"]["name"],
            "quantity": recommended_panels["quantity"],
            "total_power": recommended_panels["total_power"],
            "surface_required": recommended_panels["surface_required"],
            "cost": recommended_panels["total_cost"],
            "specifications": recommended_panels
        },
        batteries={
            "model": recommended_batteries["battery_data"]["name"],
            "configuration": f"{recommended_batteries['series']}S{recommended_batteries['parallel']}P",
            "total_quantity": recommended_batteries["total_quantity"],
            "total_capacity": recommended_batteries["total_capacity"],
            "usable_energy": recommended_batteries["usable_energy"],
            "cost": recommended_batteries["total_cost"],
            "specifications": recommended_batteries
        },
        mppt_controller={
            "model": recommended_mppt["mppt_data"]["name"],
            "quantity": recommended_mppt["quantity"],
            "cost": recommended_mppt["total_cost"],
            "specifications": recommended_mppt
        },
        energy_production=energy_production,
        energy_consumption=energy_consumption,
        system_sizing={
            "total_power": recommended_panels["total_power"],
            "system_efficiency": system_losses * environmental_factor,
            "autonomy_days": input_data.autonomy_days,
            "daily_water_capacity": daily_flow,
            "peak_water_capacity": peak_daily_flow
        },
        economic_analysis=economic_analysis,
        technical_recommendations=technical_recommendations,
        optimization_suggestions=optimization_suggestions
    )
    
    # Courbes de performance pour graphiques
    monthly_performance = {
        "months": list(range(1, 13)),
        "irradiation": monthly_irradiation,
        "production": [energy_production[f"month_{m}"] for m in range(1, 13)],
        "consumption": [energy_consumption[f"month_{m}"] for m in range(1, 13)],
        "pump_hours": [pump_hours[f"month_{m}"] for m in range(1, 13)],
        "water_production": [pump_hours[f"month_{m}"] * hourly_flow_avg * 
                           (input_data.seasonal_variation if m in input_data.peak_months else 1.0) 
                           for m in range(1, 13)]
    }
    
    system_curves = {
        "power_curve": {
            "irradiation_points": [i for i in range(1, 11)],
            "power_output": [i * recommended_panels["total_power"] * system_losses / 10 for i in range(1, 11)]
        },
        "pump_curve": {
            "flow_points": [i * hourly_flow_peak / 10 for i in range(1, 11)],
            "head_points": [input_data.total_head + (i * input_data.total_head * 0.1) for i in range(1, 11)]
        }
    }
    
    return SolarPumpingResult(
        input_data=input_data,
        dimensioning=dimensioning,
        solar_irradiation={
            "annual": irradiation_annual,
            "peak_month": irradiation_peak,
            "min_month": irradiation_min,
            "monthly": {f"month_{i+1}": monthly_irradiation[i] for i in range(12)}
        },
        system_efficiency=system_losses * environmental_factor,
        pump_operating_hours=pump_hours,
        monthly_performance=monthly_performance,
        system_curves=system_curves,
        warnings=warnings,
        critical_alerts=critical_alerts
    )

@api_router.post("/solar-pumping", response_model=SolarPumpingResult)
async def calculate_solar_pumping(input_data: SolarPumpingInput):
    """
    Dimensionnement complet d'un syst√®me de pompage solaire avec calculs automatis√©s
    """
    try:
        result = calculate_solar_pumping_system(input_data)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur dans le dimensionnement solaire: {str(e)}")

@api_router.get("/solar-regions")
async def get_solar_regions():
    """Obtenir les r√©gions disponibles pour l'irradiation solaire"""
    regions = []
    for region_key, region_data in SOLAR_IRRADIATION_DATABASE.items():
        for subregion_key, subregion_data in region_data.items():
            regions.append({
                "region": region_key,
                "subregion": subregion_key,
                "name": subregion_data["name"],
                "irradiation_annual": subregion_data["irradiation_annual"]
            })
    return {"regions": regions}

@api_router.get("/solar-equipment")
async def get_solar_equipment():
    """Obtenir la liste des √©quipements solaires disponibles"""
    return {
        "pumps": SOLAR_PUMP_DATABASE,
        "panels": SOLAR_PANEL_DATABASE,
        "batteries": SOLAR_BATTERY_DATABASE,
        "mppt_controllers": MPPT_CONTROLLER_DATABASE
    }

# ========================================================================================================
# AUDIT SYSTEM - FONCTIONS SUPPORT POUR ANALYSE EXPERT
# ========================================================================================================

def generate_expert_diagnostics(input_data: AuditInput, performance_comparisons: List[AuditComparisonAnalysis]) -> List[AuditDiagnostic]:
    """G√©n√®re des diagnostics experts bas√©s sur les donn√©es d'audit"""
    diagnostics = []
    
    # Diagnostic hydraulique
    if input_data.current_flow_rate and input_data.required_flow_rate:
        deviation = ((input_data.current_flow_rate - input_data.required_flow_rate) / input_data.required_flow_rate) * 100
        if abs(deviation) > 20:
            severity = "critical" if abs(deviation) > 50 else "high"
            diagnostics.append(AuditDiagnostic(
                category="hydraulic",
                issue=f"D√©bit inad√©quat: {deviation:+.1f}% vs requis",
                severity=severity,
                root_cause="Dimensionnement incorrect ou d√©gradation performance",
                symptoms=["Performance process insuffisante", "Consommation √©nerg√©tique excessive"],
                consequences=["Perte de productivit√©", "Surco√ªt √©nerg√©tique", "Usure pr√©matur√©e"],
                urgency="immediate" if severity == "critical" else "short_term"
            ))
    
    # Diagnostic √©lectrique
    if input_data.measured_current and input_data.rated_current:
        deviation = ((input_data.measured_current - input_data.rated_current) / input_data.rated_current) * 100
        if deviation > 20:
            diagnostics.append(AuditDiagnostic(
                category="electrical",
                issue=f"Surcharge moteur: {deviation:+.1f}% vs nominal",
                severity="critical",
                root_cause="Point de fonctionnement inadapt√© ou d√©faut moteur",
                symptoms=["√âchauffement moteur", "Consommation excessive", "D√©clenchements protection"],
                consequences=["Risque de grillage moteur", "Arr√™ts production", "Co√ªts maintenance"],
                urgency="immediate"
            ))
    
    # Diagnostic m√©canique
    if input_data.vibration_level and input_data.vibration_level > 4.5:
        severity = "critical" if input_data.vibration_level > 7.1 else "high"
        diagnostics.append(AuditDiagnostic(
            category="mechanical",
            issue=f"Vibrations excessives: {input_data.vibration_level} mm/s",
            severity=severity,
            root_cause="D√©faut d'alignement, balourd, ou usure roulements",
            symptoms=["Bruit anormal", "Usure acc√©l√©r√©e", "Desserrage boulonnerie"],
            consequences=["D√©faillance catastrophique", "Arr√™t production", "Dommages collat√©raux"],
            urgency="immediate" if severity == "critical" else "short_term"
        ))
    
    return diagnostics

def generate_expert_recommendations(input_data: AuditInput, diagnostics: List[AuditDiagnostic], 
                                  performance_comparisons: List[AuditComparisonAnalysis]) -> List[AuditRecommendation]:
    """G√©n√®re des recommandations d'am√©lioration prioris√©es"""
    recommendations = []
    
    # Recommandations bas√©es sur les diagnostics
    for diagnostic in diagnostics:
        if diagnostic.severity == "critical":
            if diagnostic.category == "hydraulic":
                recommendations.append(AuditRecommendation(
                    priority="critical",
                    category="efficiency",
                    action="Redimensionnement hydraulique urgent",
                    description="Modification du syst√®me pour atteindre les performances requises",
                    technical_details=[
                        "Calcul nouveau point de fonctionnement",
                        "Modification diam√®tres tuyauteries",
                        "Remplacement pompe si n√©cessaire",
                        "Optimisation circuit hydraulique"
                    ],
                    cost_estimate_min=5000,
                    cost_estimate_max=25000,
                    timeline="2-4 semaines",
                    expected_benefits=[
                        "Performance process optimale",
                        "R√©duction consommation 15-30%",
                        "Fiabilit√© accrue"
                    ],
                    roi_months=12,
                    risk_if_not_done="Perte de productivit√© continue, surco√ªt √©nerg√©tique"
                ))
            
            elif diagnostic.category == "electrical":
                recommendations.append(AuditRecommendation(
                    priority="critical",
                    category="safety",
                    action="Intervention √©lectrique imm√©diate",
                    description="Correction surcharge moteur et protection √©lectrique",
                    technical_details=[
                        "V√©rification protection moteur",
                        "Contr√¥le isolement bobinages",
                        "Mesure d√©s√©quilibre phases",
                        "R√©glage point de fonctionnement"
                    ],
                    cost_estimate_min=1500,
                    cost_estimate_max=8000,
                    timeline="1-2 semaines",
                    expected_benefits=[
                        "S√©curit√© √©lectrique assur√©e",
                        "Dur√©e de vie moteur pr√©serv√©e",
                        "Stabilit√© fonctionnement"
                    ],
                    roi_months=6,
                    risk_if_not_done="Risque de grillage moteur, arr√™t production"
                ))
    
    # Recommandations d'am√©lioration √©nerg√©tique
    if input_data.has_vfd == False and input_data.current_flow_rate and input_data.required_flow_rate:
        if input_data.current_flow_rate > input_data.required_flow_rate * 1.2:
            recommendations.append(AuditRecommendation(
                priority="high",
                category="efficiency",
                action="Installation variateur de fr√©quence",
                description="Optimisation consommation par variation de vitesse",
                technical_details=[
                    "Dimensionnement variateur adapt√©",
                    "Installation armoire √©lectrique",
                    "Programmation courbes optimales",
                    "Syst√®me de r√©gulation automatique"
                ],
                cost_estimate_min=3000,
                cost_estimate_max=12000,
                timeline="3-6 semaines",
                expected_benefits=[
                    "√âconomie √©nerg√©tique 20-40%",
                    "D√©marrage progressif",
                    "R√©gulation automatique",
                    "R√©duction usure m√©canique"
                ],
                roi_months=18,
                risk_if_not_done="Gaspillage √©nerg√©tique continu"
            ))
    
    return recommendations

def calculate_audit_scores(input_data: AuditInput, performance_comparisons: List[AuditComparisonAnalysis], 
                          diagnostics: List[AuditDiagnostic]) -> Dict[str, int]:
    """Calcule les scores d'audit par cat√©gorie"""
    scores = {
        "hydraulic": 100,
        "electrical": 100,
        "mechanical": 100,
        "operational": 100,
        "overall": 100
    }
    
    # P√©nalit√©s bas√©es sur les diagnostics
    for diagnostic in diagnostics:
        penalty = 0
        if diagnostic.severity == "critical":
            penalty = 40
        elif diagnostic.severity == "high":
            penalty = 25
        elif diagnostic.severity == "medium":
            penalty = 15
        elif diagnostic.severity == "low":
            penalty = 5
        
        if diagnostic.category in scores:
            scores[diagnostic.category] = max(0, scores[diagnostic.category] - penalty)
    
    # P√©nalit√©s bas√©es sur les comparaisons de performance
    for comparison in performance_comparisons:
        if comparison.status == "critical":
            penalty = 30
        elif comparison.status == "problematic":
            penalty = 20
        elif comparison.status == "acceptable":
            penalty = 10
        else:
            penalty = 0
        
        if "d√©bit" in comparison.parameter_name.lower():
            scores["hydraulic"] = max(0, scores["hydraulic"] - penalty)
        elif "intensit√©" in comparison.parameter_name.lower():
            scores["electrical"] = max(0, scores["electrical"] - penalty)
    
    # Score global
    scores["overall"] = int(sum(scores[k] for k in ["hydraulic", "electrical", "mechanical", "operational"]) / 4)
    
    return scores

def generate_executive_summary(input_data: AuditInput, scores: Dict[str, int], 
                             diagnostics: List[AuditDiagnostic], 
                             recommendations: List[AuditRecommendation]) -> Dict[str, Any]:
    """G√©n√®re la synth√®se executive"""
    critical_issues = [d for d in diagnostics if d.severity == "critical"]
    high_priority_recs = [r for r in recommendations if r.priority in ["critical", "high"]]
    
    return {
        "overall_status": "critical" if scores["overall"] < 50 else ("warning" if scores["overall"] < 75 else "good"),
        "key_findings": [
            f"Score global: {scores['overall']}/100",
            f"{len(critical_issues)} probl√®me(s) critique(s) identifi√©(s)",
            f"{len(high_priority_recs)} action(s) prioritaire(s) recommand√©e(s)"
        ],
        "immediate_actions": len([r for r in recommendations if r.priority == "critical"]),
        "estimated_savings_annual": sum(r.cost_estimate_min * 12 / (r.roi_months or 12) for r in recommendations if r.roi_months),
        "risk_level": "high" if critical_issues else ("medium" if len(diagnostics) > 2 else "low")
    }

def generate_expert_installation_report(input_data: AuditInput, performance_comparisons: List[AuditComparisonAnalysis]) -> Dict[str, Any]:
    """
    G√©n√®re un rapport d'expertise exhaustif bas√© sur l'analyse crois√©e des donn√©es hydrauliques et √©lectriques
    Identifie les probl√®mes d'installation et donne des recommandations pr√©cises d'am√©lioration
    """
    
    # ========================================================================================================
    # ANALYSE CROIS√âE HYDRAULIQUE-√âLECTRIQUE
    # ========================================================================================================
    
    installation_issues = []
    critical_problems = []
    equipment_to_replace = []
    equipment_to_add = []
    immediate_actions = []
    
    # Analyse de la coh√©rence hydraulique-√©lectrique
    power_analysis = {}
    if input_data.measured_power and input_data.current_flow_rate and input_data.current_hmt:
        # Calcul puissance hydraulique th√©orique
        theoretical_hydraulic_power = (input_data.current_flow_rate * input_data.current_hmt * 1000 * 9.81) / (3600 * 1000)  # kW
        
        # Estimation rendement global actuel
        if theoretical_hydraulic_power > 0:
            actual_global_efficiency = (theoretical_hydraulic_power / input_data.measured_power) * 100
            power_analysis = {
                "theoretical_hydraulic_power": theoretical_hydraulic_power,
                "measured_electrical_power": input_data.measured_power,
                "actual_global_efficiency": actual_global_efficiency,
                "expected_efficiency": 65.0,  # Rendement global attendu pour une installation standard
                "efficiency_gap": actual_global_efficiency - 65.0
            }
    
    # ========================================================================================================
    # DIAGNOSTIC DES PROBL√àMES MAJEURS
    # ========================================================================================================
    
    # 1. PROBL√àMES HYDRAULIQUES CRITIQUES
    if input_data.current_flow_rate and input_data.required_flow_rate:
        flow_deviation = ((input_data.current_flow_rate - input_data.required_flow_rate) / input_data.required_flow_rate) * 100
        
        if flow_deviation < -20:
            critical_problems.append({
                "type": "D√âBIT INSUFFISANT CRITIQUE",
                "severity": "URGENT",
                "description": f"D√©bit actuel {input_data.current_flow_rate} m¬≥/h insuffisant de {abs(flow_deviation):.1f}% par rapport au besoin ({input_data.required_flow_rate} m¬≥/h)",
                "causes_probables": [
                    "Pompe sous-dimensionn√©e ou us√©e",
                    "Colmatage des conduites ou filtres",
                    "Fuites importantes dans le r√©seau",
                    "Vanne partiellement ferm√©e",
                    "Cavitation pompe (aspiration insuffisante)"
                ],
                "consequences": [
                    "Process industriel d√©grad√© ou arr√™t√©",
                    "Surconsommation √©nerg√©tique pour compenser",
                    "Usure pr√©matur√©e des √©quipements"
                ]
            })
            
        elif flow_deviation > 25:
            installation_issues.append({
                "type": "SURDIMENSIONNEMENT HYDRAULIQUE",
                "severity": "IMPORTANT", 
                "description": f"D√©bit actuel {input_data.current_flow_rate} m¬≥/h excessif de {flow_deviation:.1f}% (gaspillage √©nerg√©tique)",
                "causes_probables": [
                    "Pompe surdimensionn√©e",
                    "R√©gulation d√©bit absente ou d√©faillante",
                    "Point de fonctionnement inadapt√©"
                ],
                "consequences": [
                    "Gaspillage √©nerg√©tique permanent", 
                    "Usure acc√©l√©r√©e par fonctionnement hors courbe",
                    "Co√ªts exploitation major√©s"
                ]
            })
    
    # 2. PROBL√àMES √âLECTRIQUES CRITIQUES
    if input_data.measured_current and input_data.rated_current:
        current_ratio = input_data.measured_current / input_data.rated_current
        
        if current_ratio > 1.15:
            critical_problems.append({
                "type": "SURCHARGE √âLECTRIQUE CRITIQUE",
                "severity": "URGENT",
                "description": f"Intensit√© mesur√©e {input_data.measured_current}A d√©passe de {(current_ratio-1)*100:.1f}% l'intensit√© nominale ({input_data.rated_current}A)",
                "causes_probables": [
                    "Pompe en surcharge hydraulique permanente",
                    "Probl√®me d'alignement moteur-pompe",
                    "D√©faillance roulements ou paliers",
                    "Tension d'alimentation inad√©quate",
                    "Bobinage moteur d√©grad√©"
                ],
                "consequences": [
                    "RISQUE DE DESTRUCTION MOTEUR IMMINENT",
                    "D√©clenchement protections thermiques",
                    "Surconsommation √©nerg√©tique majeure",
                    "Risque d'incendie √©lectrique"
                ]
            })
            
            equipment_to_replace.extend([
                "Moteur √©lectrique (v√©rifier bobinage et isolement)",
                "Protections √©lectriques (relais thermique adapt√©)",
                "C√¢blage et contacteurs (v√©rifier √©chauffement)"
            ])
            
            immediate_actions.extend([
                "ARR√äT IMM√âDIAT si temp√©rature moteur > 80¬∞C",
                "Contr√¥le isolement moteur (>1MŒ©/phase)",
                "V√©rification serrages connexions √©lectriques",
                "Mesure tension triphas√©e (√©quilibrage)"
            ])
    
    # 3. ANALYSE RENDEMENT √âNERG√âTIQUE
    if power_analysis and power_analysis["actual_global_efficiency"] < 45:
        critical_problems.append({
            "type": "RENDEMENT √âNERG√âTIQUE CATASTROPHIQUE",
            "severity": "URGENT",
            "description": f"Rendement global mesur√© {power_analysis['actual_global_efficiency']:.1f}% tr√®s inf√©rieur aux standards (65%)",
            "causes_probables": [
                "Pompe compl√®tement inadapt√©e au point de fonctionnement",
                "Usure interne pompe (jeux hydrauliques)",
                "Cavitation permanente",
                "Moteur √©lectrique d√©faillant",
                "Pertes hydrauliques majeures (conduites)"
            ],
            "consequences": [
                "Gaspillage √©nerg√©tique de plus de 40%",
                "Co√ªts √©lectricit√© major√©s x2 √† x3",
                "Empreinte carbone excessive"
            ]
        })
    
    # 4. PROBL√àMES M√âCANIQUES
    vibration_issues = []
    if input_data.vibration_level and input_data.vibration_level > 7.1:  # ISO 10816
        vibration_issues.append({
            "type": "VIBRATIONS EXCESSIVES CRITIQUES",
            "severity": "URGENT", 
            "description": f"Niveau vibratoire {input_data.vibration_level} mm/s d√©passe largement les limites ISO 10816 (< 2.8 mm/s)",
            "causes_probables": [
                "D√©faut d'alignement pompe-moteur majeur",
                "D√©s√©quilibrage rotor",
                "Usure roulements/paliers avanc√©e",
                "D√©faut fixation socle b√©ton",
                "R√©sonance m√©canique"
            ],
            "consequences": [
                "DESTRUCTION IMMINENTE ROULEMENTS",
                "Fissuration conduites par fatigue",
                "Desserrage boulonnerie",
                "Nuisances sonores importantes"
            ]
        })
        
        equipment_to_replace.extend([
            "Roulements pompe et moteur",
            "Accouplement (v√©rifier usure)",
            "Joints d'√©tanch√©it√©",
            "Plots antivibratoires"
        ])
    
    # 5. PROBL√àMES THERMIQUES
    thermal_issues = []
    if input_data.motor_temperature and input_data.motor_temperature > 80:
        thermal_issues.append({
            "type": "SURCHAUFFE MOTEUR CRITIQUE",
            "severity": "URGENT",
            "description": f"Temp√©rature moteur {input_data.motor_temperature}¬∞C excessive (limite 80¬∞C classe F)",
            "causes_probables": [
                "Surcharge √©lectrique permanente",
                "Ventilation moteur obstru√©e",
                "Temp√©rature ambiante excessive",
                "D√©faut isolement bobinage"
            ]
        })
    
    # ========================================================================================================
    # G√âN√âRATION RECOMMANDATIONS √âQUIPEMENTS
    # ========================================================================================================
    
    # √âquipements √† ajouter selon l'analyse
    if not input_data.has_vfd and power_analysis and power_analysis["efficiency_gap"] < -15:
        equipment_to_add.append({
            "equipment": "Variateur de fr√©quence (VFD)",
            "justification": "Optimisation √©nerg√©tique et r√©gulation d√©bit",
            "expected_savings": "15-30% √©conomies √©nergie",
            "cost_estimate": "800-2500‚Ç¨",
            "priority": "HIGH"
        })
    
    if input_data.vibration_level and input_data.vibration_level > 4.5:
        equipment_to_add.append({
            "equipment": "Syst√®me surveillance vibratoire",
            "justification": "Maintenance pr√©dictive et alerte d√©faillance",
            "expected_savings": "√âviter arr√™t production impr√©vu",
            "cost_estimate": "300-800‚Ç¨",
            "priority": "MEDIUM"
        })
    
    # Conduite et hydraulique
    hydraulic_improvements = []
    if input_data.suction_pipe_diameter and input_data.current_flow_rate:
        # Calcul vitesse aspiration
        diameter_m = input_data.suction_pipe_diameter / 1000
        area = math.pi * (diameter_m/2)**2
        velocity = (input_data.current_flow_rate / 3600) / area
        
        if velocity > 1.5:  # Vitesse aspiration excessive
            hydraulic_improvements.append({
                "type": "CONDUITE ASPIRATION SOUS-DIMENSIONN√âE", 
                "current_diameter": f"DN{int(input_data.suction_pipe_diameter)}",
                "current_velocity": f"{velocity:.1f} m/s",
                "recommended_diameter": f"DN{int(input_data.suction_pipe_diameter * 1.3)}",
                "justification": "R√©duction pertes charge et risque cavitation",
                "priority": "HIGH"
            })
    
    # ========================================================================================================
    # PLAN D'ACTION PRIORITAIRE
    # ========================================================================================================
    
    action_plan = {
        "phase_immediate": {
            "timeline": "0-48h",
            "actions": immediate_actions + [
                "V√©rification niveau huile r√©ducteur",
                "Contr√¥le temp√©rature roulements au toucher",
                "Test fonctionnement protections √©lectriques"
            ]
        },
        "phase_urgente": {
            "timeline": "1-2 semaines", 
            "actions": [action for problem in critical_problems for action in [
                f"R√©soudre: {problem['type']}",
                f"Causes √† v√©rifier: {', '.join(problem['causes_probables'][:2])}"
            ]]
        },
        "phase_amelioration": {
            "timeline": "1-3 mois",
            "actions": [f"Installer: {eq['equipment']}" for eq in equipment_to_add]
        }
    }
    
    return {
        "installation_analysis": {
            "overall_condition": "CRITIQUE" if critical_problems else ("D√âGRAD√âE" if installation_issues else "ACCEPTABLE"),
            "critical_problems_count": len(critical_problems),
            "issues_count": len(installation_issues),
            "power_analysis": power_analysis
        },
        "detailed_problems": critical_problems + installation_issues + vibration_issues + thermal_issues,
        "hydraulic_improvements": hydraulic_improvements,
        "equipment_replacement_list": equipment_to_replace,
        "equipment_addition_list": equipment_to_add,
        "immediate_actions": immediate_actions,
        "action_plan": action_plan,
        "energy_waste_analysis": {
            "current_efficiency": power_analysis.get("actual_global_efficiency", 0) if power_analysis else 0,
            "potential_savings_percent": max(0, 65 - power_analysis.get("actual_global_efficiency", 65)) if power_analysis else 0,
            "annual_waste_kwh": 0,  # √Ä calculer selon heures fonctionnement
            "financial_impact": "Surconsommation estim√©e 20-40% vs installation optimale"
        }
    }

def generate_action_plan(recommendations: List[AuditRecommendation], economic_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """G√©n√®re le plan d'action prioritaire"""
    critical_actions = [r for r in recommendations if r.priority == "critical"]
    high_actions = [r for r in recommendations if r.priority == "high"]
    
    return {
        "phase_1_immediate": {
            "actions": [r.action for r in critical_actions],
            "timeline": "0-4 semaines",
            "budget": sum(r.cost_estimate_max for r in critical_actions),
            "expected_roi": min(r.roi_months for r in critical_actions) if critical_actions else 12
        },
        "phase_2_short_term": {
            "actions": [r.action for r in high_actions],
            "timeline": "1-6 mois",
            "budget": sum(r.cost_estimate_max for r in high_actions),
            "expected_roi": min(r.roi_months for r in high_actions) if high_actions else 18
        },
        "total_program": {
            "duration_months": 12,
            "total_investment": economic_analysis["total_investment_required"],
            "annual_savings": economic_analysis["annual_energy_savings"] + economic_analysis["annual_maintenance_savings"],
            "payback_months": economic_analysis["payback_period_months"]
        }
    }

@api_router.post("/audit-analysis", response_model=AuditResult)
async def perform_audit_analysis(input_data: AuditInput) -> AuditResult:
    """
    Effectue une analyse d'audit compl√®te et intelligente d'une installation de pompage
    Comparaisons ACTUEL vs REQUIS vs CONCEPTION avec diagnostic expert terrain
    """
    
    audit_id = str(uuid.uuid4())[:8]
    audit_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # ========================================================================================================
    # 1. ANALYSES COMPARATIVES D√âTAILL√âES
    # ========================================================================================================
    
    performance_comparisons = []
    
    # Analyse d√©bit
    if input_data.current_flow_rate and input_data.required_flow_rate:
        deviation_required = ((input_data.current_flow_rate - input_data.required_flow_rate) / input_data.required_flow_rate) * 100
        status = "optimal" if abs(deviation_required) <= 5 else ("acceptable" if abs(deviation_required) <= 15 else "problematic")
        
        interpretation = f"D√©bit actuel: {deviation_required:+.1f}% vs requis"
        if deviation_required > 15:
            interpretation += " - SURDIMENSIONNEMENT √âNERG√âTIQUE"
        elif deviation_required < -15:
            interpretation += " - SOUS-DIMENSIONNEMENT CRITIQUE"
        
        performance_comparisons.append(AuditComparisonAnalysis(
            parameter_name="D√©bit",
            current_value=input_data.current_flow_rate,
            required_value=input_data.required_flow_rate,
            original_design_value=input_data.original_design_flow,
            deviation_from_required=deviation_required,
            deviation_from_design=((input_data.current_flow_rate - input_data.original_design_flow) / input_data.original_design_flow * 100) if input_data.original_design_flow else None,
            status=status,
            interpretation=interpretation,
            impact="Consommation √©nerg√©tique, usure √©quipement, performance process"
        ))
    
    # Analyse HMT
    if input_data.current_hmt and input_data.required_hmt:
        deviation_required = ((input_data.current_hmt - input_data.required_hmt) / input_data.required_hmt) * 100
        status = "optimal" if abs(deviation_required) <= 10 else ("acceptable" if abs(deviation_required) <= 25 else "critical")
        
        interpretation = f"HMT actuelle: {deviation_required:+.1f}% vs requise"
        if deviation_required > 25:
            interpretation += " - GASPILLAGE √âNERG√âTIQUE MAJEUR"
        elif deviation_required < -25:
            interpretation += " - PERFORMANCE INSUFFISANTE CRITIQUE"
            
        performance_comparisons.append(AuditComparisonAnalysis(
            parameter_name="HMT",
            current_value=input_data.current_hmt,
            required_value=input_data.required_hmt,
            original_design_value=input_data.original_design_hmt,
            deviation_from_required=deviation_required,
            deviation_from_design=((input_data.current_hmt - input_data.original_design_hmt) / input_data.original_design_hmt * 100) if input_data.original_design_hmt else None,
            status=status,
            interpretation=interpretation,
            impact="Efficacit√© √©nerg√©tique globale, pression process, dur√©e de vie pompe"
        ))
    
    # Analyse intensit√©
    if input_data.measured_current and input_data.rated_current:
        deviation_rated = ((input_data.measured_current - input_data.rated_current) / input_data.rated_current) * 100
        status = "optimal" if abs(deviation_rated) <= 10 else ("acceptable" if abs(deviation_rated) <= 20 else "critical")
        
        interpretation = f"Intensit√© mesur√©e: {deviation_rated:+.1f}% vs plaque"
        if deviation_rated > 20:
            interpretation += " - SURCHARGE MOTEUR DANGEREUSE"
        elif deviation_rated < -30:
            interpretation += " - SOUS-UTILISATION MAJEURE"
            
        performance_comparisons.append(AuditComparisonAnalysis(
            parameter_name="Intensit√©",
            current_value=input_data.measured_current,
            required_value=input_data.rated_current,
            original_design_value=input_data.rated_current,
            deviation_from_required=deviation_rated,
            deviation_from_design=deviation_rated,
            status=status,
            interpretation=interpretation,
            impact="S√©curit√© √©lectrique, dur√©e de vie moteur, efficacit√© √©nerg√©tique"
        ))
    
    # ========================================================================================================
    # 2. DIAGNOSTICS EXPERTS PAR CAT√âGORIE
    # ========================================================================================================
    
    diagnostics = generate_expert_diagnostics(input_data, performance_comparisons)
    
    # ========================================================================================================
    # 3. RECOMMANDATIONS PRIORIS√âES
    # ========================================================================================================
    
    recommendations = generate_expert_recommendations(input_data, diagnostics, performance_comparisons)
    
    # ========================================================================================================
    # 4. CALCULS SCORES INTELLIGENTS
    # ========================================================================================================
    
    scores = calculate_audit_scores(input_data, performance_comparisons, diagnostics)
    
    # ========================================================================================================
    # 5. SYNTH√àSE EXECUTIVE
    # ========================================================================================================
    
    executive_summary = generate_executive_summary(input_data, scores, diagnostics, recommendations)
    
    # ========================================================================================================
    # 6. ANALYSE √âCONOMIQUE
    # ========================================================================================================
    
    economic_analysis = generate_economic_analysis(input_data, recommendations)
    
    # ========================================================================================================
    # 7. PLAN D'ACTION PRIORITAIRE
    # ========================================================================================================
    
    action_plan = generate_action_plan(recommendations, economic_analysis)
    
    # ========================================================================================================
    # 8. RAPPORT D'EXPERTISE EXHAUSTIF
    # ========================================================================================================
    
    expert_installation_report = generate_expert_installation_report(input_data, performance_comparisons)
    
    return AuditResult(
        audit_id=audit_id,
        audit_date=audit_date,
        overall_score=scores["overall"],
        hydraulic_score=scores["hydraulic"],
        electrical_score=scores["electrical"],
        mechanical_score=scores["mechanical"],
        operational_score=scores["operational"],
        performance_comparisons=performance_comparisons,
        diagnostics=diagnostics,
        recommendations=recommendations,
        executive_summary=executive_summary,
        economic_analysis=economic_analysis,
        action_plan=action_plan,
        expert_installation_report=expert_installation_report
    )

# ========================================================================================================
# AUDIT SYSTEM - FONCTIONS SUPPORT POUR ANALYSE EXPERT
# ========================================================================================================

def generate_expert_diagnostics(input_data: AuditInput, performance_comparisons: List[AuditComparisonAnalysis]) -> List[AuditDiagnostic]:
    """G√©n√®re des diagnostics experts bas√©s sur les donn√©es d'audit"""
    diagnostics = []
    
    # Diagnostic hydraulique
    if input_data.current_flow_rate and input_data.required_flow_rate:
        deviation = ((input_data.current_flow_rate - input_data.required_flow_rate) / input_data.required_flow_rate) * 100
        if abs(deviation) > 20:
            severity = "critical" if abs(deviation) > 50 else "high"
            diagnostics.append(AuditDiagnostic(
                category="hydraulic",
                issue=f"D√©bit inad√©quat: {deviation:+.1f}% vs requis",
                severity=severity,
                root_cause="Dimensionnement incorrect ou d√©gradation performance",
                symptoms=["Performance process insuffisante", "Consommation √©nerg√©tique excessive"],
                consequences=["Perte de productivit√©", "Surco√ªt √©nerg√©tique", "Usure pr√©matur√©e"],
                urgency="immediate" if severity == "critical" else "short_term"
            ))
    
    # Diagnostic √©lectrique
    if input_data.measured_current and input_data.rated_current:
        deviation = ((input_data.measured_current - input_data.rated_current) / input_data.rated_current) * 100
        if deviation > 20:
            diagnostics.append(AuditDiagnostic(
                category="electrical",
                issue=f"Surcharge moteur: {deviation:+.1f}% vs nominal",
                severity="critical",
                root_cause="Point de fonctionnement inadapt√© ou d√©faut moteur",
                symptoms=["√âchauffement moteur", "Consommation excessive", "D√©clenchements protection"],
                consequences=["Risque de grillage moteur", "Arr√™ts production", "Co√ªts maintenance"],
                urgency="immediate"
            ))
    
    # Diagnostic m√©canique
    if input_data.vibration_level and input_data.vibration_level > 4.5:
        severity = "critical" if input_data.vibration_level > 7.1 else "high"
        diagnostics.append(AuditDiagnostic(
            category="mechanical",
            issue=f"Vibrations excessives: {input_data.vibration_level} mm/s",
            severity=severity,
            root_cause="D√©faut d'alignement, balourd, ou usure roulements",
            symptoms=["Bruit anormal", "Usure acc√©l√©r√©e", "Desserrage boulonnerie"],
            consequences=["D√©faillance catastrophique", "Arr√™t production", "Dommages collat√©raux"],
            urgency="immediate" if severity == "critical" else "short_term"
        ))
    
    return diagnostics

def generate_expert_recommendations(input_data: AuditInput, diagnostics: List[AuditDiagnostic], 
                                  performance_comparisons: List[AuditComparisonAnalysis]) -> List[AuditRecommendation]:
    """G√©n√®re des recommandations d'am√©lioration prioris√©es"""
    recommendations = []
    
    # Recommandations bas√©es sur les diagnostics
    for diagnostic in diagnostics:
        if diagnostic.severity == "critical":
            if diagnostic.category == "hydraulic":
                recommendations.append(AuditRecommendation(
                    priority="critical",
                    category="efficiency",
                    action="Redimensionnement hydraulique urgent",
                    description="Modification syst√®me pour atteindre performances requises",
                    technical_details=[
                        "Analyse compl√®te courbes pompe vs point fonctionnement",
                        "Redimensionnement diam√®tres selon vitesses optimales",
                        "Ajustement caract√©ristiques hydrauliques"
                    ],
                    cost_estimate_min=15000,
                    cost_estimate_max=50000,
                    timeline="2-6 semaines",
                    expected_benefits=[
                        "Performances process optimales",
                        "R√©duction consommation 20-40%",
                        "Fiabilit√© √©quipement am√©lior√©e"
                    ],
                    roi_months=18,
                    risk_if_not_done="Perte productivit√© continue, surco√ªts √©nerg√©tiques majeurs"
                ))
            elif diagnostic.category == "electrical":
                recommendations.append(AuditRecommendation(
                    priority="critical",
                    category="safety",
                    action="Correction surcharge moteur imm√©diate",
                    description="Intervention urgente pour √©viter grillage moteur",
                    technical_details=[
                        "V√©rification point de fonctionnement pompe",
                        "Contr√¥le protection thermique moteur",
                        "Ajustement param√®tres √©lectriques"
                    ],
                    cost_estimate_min=2000,
                    cost_estimate_max=8000,
                    timeline="1-2 semaines",
                    expected_benefits=[
                        "S√©curit√© √©lectrique restaur√©e",
                        "Pr√©vention panne moteur",
                        "Dur√©e de vie √©quipement pr√©serv√©e"
                    ],
                    roi_months=6,
                    risk_if_not_done="Risque de grillage moteur et arr√™t production"
                ))
            elif diagnostic.category == "mechanical":
                recommendations.append(AuditRecommendation(
                    priority="critical",
                    category="reliability",
                    action="Intervention m√©canique d'urgence",
                    description="Correction d√©fauts m√©caniques critiques",
                    technical_details=[
                        "Alignement pompe-moteur",
                        "√âquilibrage rotor",
                        "Remplacement roulements si n√©cessaire"
                    ],
                    cost_estimate_min=3000,
                    cost_estimate_max=12000,
                    timeline="1-3 semaines",
                    expected_benefits=[
                        "√âlimination vibrations excessives",
                        "R√©duction bruit",
                        "Fiabilit√© m√©canique restaur√©e"
                    ],
                    roi_months=8,
                    risk_if_not_done="D√©faillance catastrophique imminente"
                ))
    
    # Recommandations maintenance pr√©ventive
    if input_data.vibration_level and input_data.vibration_level > 2.8:
        recommendations.append(AuditRecommendation(
            priority="high",
            category="maintenance",
            action="Programme maintenance pr√©dictive",
            description="Mise en place suivi vibratoire et thermique",
            technical_details=[
                "Installation capteurs vibration permanents",
                "Surveillance thermique paliers et moteur",
                "Planning maintenance conditionnelle"
            ],
            cost_estimate_min=5000,
            cost_estimate_max=15000,
            timeline="1-2 semaines",
            expected_benefits=[
                "Pr√©vention pannes 90%",
                "R√©duction co√ªts maintenance 30%",
                "Disponibilit√© √©quipement >95%"
            ],
            roi_months=12,
            risk_if_not_done="Pannes impr√©visibles, co√ªts maintenance correctifs √©lev√©s"
        ))
    
    # Recommandations bas√©es sur les √©carts de performance
    for comparison in performance_comparisons:
        if comparison.status in ["problematic", "critical"]:
            if comparison.parameter_name == "D√©bit" and comparison.deviation_from_required and comparison.deviation_from_required < -20:
                recommendations.append(AuditRecommendation(
                    priority="high",
                    category="efficiency",
                    action="Optimisation d√©bit syst√®me",
                    description="Am√©lioration performances hydrauliques pour atteindre d√©bit requis",
                    technical_details=[
                        "V√©rification √©tat impulseur pompe",
                        "Nettoyage circuit hydraulique",
                        "Optimisation diam√®tres conduites"
                    ],
                    cost_estimate_min=8000,
                    cost_estimate_max=25000,
                    timeline="2-4 semaines",
                    expected_benefits=[
                        "D√©bit nominal restaur√©",
                        "Performance process optimis√©e",
                        "Efficacit√© √©nerg√©tique am√©lior√©e"
                    ],
                    roi_months=15,
                    risk_if_not_done="Sous-performance continue du process"
                ))
            elif comparison.parameter_name == "HMT" and comparison.deviation_from_required and comparison.deviation_from_required > 30:
                recommendations.append(AuditRecommendation(
                    priority="high",
                    category="efficiency",
                    action="R√©duction HMT excessive",
                    description="Optimisation syst√®me pour √©liminer gaspillage √©nerg√©tique",
                    technical_details=[
                        "R√©vision point de fonctionnement",
                        "Installation variateur de vitesse",
                        "Optimisation r√©seau hydraulique"
                    ],
                    cost_estimate_min=12000,
                    cost_estimate_max=35000,
                    timeline="3-6 semaines",
                    expected_benefits=[
                        "R√©duction consommation 25-40%",
                        "HMT adapt√©e aux besoins r√©els",
                        "Dur√©e de vie √©quipement prolong√©e"
                    ],
                    roi_months=20,
                    risk_if_not_done="Gaspillage √©nerg√©tique majeur continu"
                ))
    
    # Recommandations √©nerg√©tiques
    if input_data.energy_consumption_increase:
        recommendations.append(AuditRecommendation(
            priority="medium",
            category="efficiency",
            action="Audit √©nerg√©tique approfondi",
            description="Analyse d√©taill√©e consommation et optimisation √©nerg√©tique",
            technical_details=[
                "Mesures √©nerg√©tiques d√©taill√©es",
                "Analyse rendements globaux",
                "√âtude variateur de vitesse"
            ],
            cost_estimate_min=3000,
            cost_estimate_max=8000,
            timeline="2-3 semaines",
            expected_benefits=[
                "Identification gisements d'√©conomie",
                "Plan d'optimisation √©nerg√©tique",
                "ROI projets d'am√©lioration"
            ],
            roi_months=24,
            risk_if_not_done="Surco√ªts √©nerg√©tiques non ma√Ætris√©s"
        ))
    
    return recommendations

def calculate_audit_scores(input_data: AuditInput, performance_comparisons: List[AuditComparisonAnalysis], 
                          diagnostics: List[AuditDiagnostic]) -> Dict[str, int]:
    """Calcule les scores d'audit par cat√©gorie"""
    
    # Score hydraulique
    hydraulic_score = 100
    for comp in performance_comparisons:
        if comp.parameter_name in ["D√©bit", "HMT"] and comp.status == "problematic":
            hydraulic_score -= 30
        elif comp.parameter_name in ["D√©bit", "HMT"] and comp.status == "critical":
            hydraulic_score -= 50
    
    # Score √©lectrique  
    electrical_score = 100
    for comp in performance_comparisons:
        if comp.parameter_name == "Intensit√©" and comp.status == "critical":
            electrical_score -= 40
    
    # Score m√©canique
    mechanical_score = 100
    if input_data.vibration_level:
        if input_data.vibration_level > 7.1:
            mechanical_score -= 50
        elif input_data.vibration_level > 4.5:
            mechanical_score -= 30
        elif input_data.vibration_level > 2.8:
            mechanical_score -= 15
    
    if input_data.corrosion_level == "severe":
        mechanical_score -= 30
    elif input_data.corrosion_level == "moderate":
        mechanical_score -= 20
    
    # Score op√©rationnel
    operational_score = 100
    if input_data.performance_degradation:
        operational_score -= 25
    if input_data.energy_consumption_increase:
        operational_score -= 20
    
    # Score global
    overall_score = (hydraulic_score + electrical_score + mechanical_score + operational_score) // 4
    
    return {
        "overall": max(0, overall_score),
        "hydraulic": max(0, hydraulic_score),
        "electrical": max(0, electrical_score), 
        "mechanical": max(0, mechanical_score),
        "operational": max(0, operational_score)
    }

def generate_executive_summary(input_data: AuditInput, scores: Dict[str, int], 
                              diagnostics: List[AuditDiagnostic], 
                              recommendations: List[AuditRecommendation]) -> Dict[str, Any]:
    """G√©n√®re la synth√®se executive"""
    
    critical_issues = len([d for d in diagnostics if d.severity == "critical"])
    high_issues = len([d for d in diagnostics if d.severity == "high"])
    
    overall_status = "Excellent" if scores["overall"] >= 90 else (
        "Bon" if scores["overall"] >= 75 else (
        "Acceptable" if scores["overall"] >= 60 else (
        "Probl√©matique" if scores["overall"] >= 40 else "Critique")))
    
    return {
        "overall_status": overall_status,
        "overall_score": scores["overall"],
        "critical_issues_count": critical_issues,
        "high_issues_count": high_issues,
        "total_recommendations": len(recommendations),
        "immediate_actions_required": critical_issues > 0,
        "key_findings": [d.issue for d in diagnostics[:3]],  # Top 3 issues
        "priority_investments": sum([r.cost_estimate_max for r in recommendations if r.priority in ["critical", "high"]]),
        "estimated_annual_savings": 50000 if scores["overall"] < 60 else 25000  # Estimation
    }

def generate_economic_analysis(input_data: AuditInput, recommendations: List[AuditRecommendation]) -> Dict[str, Any]:
    """G√©n√®re l'analyse √©conomique"""
    
    total_investment = sum([r.cost_estimate_max for r in recommendations])
    annual_energy_cost = (input_data.rated_power or 15) * (input_data.operating_hours_daily or 8) * (input_data.operating_days_yearly or 300) * input_data.electricity_cost_per_kwh
    
    potential_savings = annual_energy_cost * 0.3 if total_investment > 20000 else annual_energy_cost * 0.15
    
    payback_years = total_investment / potential_savings if potential_savings > 0 else 10
    
    return {
        "current_annual_energy_cost": annual_energy_cost,
        "total_investment_cost": total_investment,  # Changed field name
        "annual_savings": potential_savings,  # Changed field name
        "payback_months": int(min(payback_years, 10) * 12),  # Changed field name and converted to months
        "payback_period_years": min(payback_years, 10),
        "roi_5_years": (potential_savings * 5 - total_investment) / total_investment * 100 if total_investment > 0 else 0,
        "co2_reduction_tons_year": potential_savings * 0.5 / 1000,  # Estimation
        "investment_breakdown": [
            {"category": "Hydraulique", "amount": sum([r.cost_estimate_max for r in recommendations if r.category == "efficiency"])},
            {"category": "Maintenance", "amount": sum([r.cost_estimate_max for r in recommendations if r.category == "maintenance"])},
            {"category": "S√©curit√©", "amount": sum([r.cost_estimate_max for r in recommendations if r.category == "safety"])}
        ]
    }

def generate_action_plan(recommendations: List[AuditRecommendation], economic_analysis: Dict[str, Any]) -> Dict[str, Any]:
    """G√©n√®re le plan d'action prioritaire"""
    
    # Tri par priorit√© et ROI
    critical_actions = [r for r in recommendations if r.priority == "critical"]
    high_actions = [r for r in recommendations if r.priority == "high"]
    medium_actions = [r for r in recommendations if r.priority == "medium"]
    
    phases = [
        {
            "phase": "Phase 1 - Imm√©diate",
            "timeline": "0-3 mois",
            "actions": [r.action for r in critical_actions],
            "investment": sum([r.cost_estimate_max for r in critical_actions]),
            "expected_impact": "S√©curit√©, conformit√©, arr√™t d√©gradation"
        },
        {
            "phase": "Phase 2 - Court terme",
            "timeline": "3-12 mois", 
            "actions": [r.action for r in high_actions],
            "investment": sum([r.cost_estimate_max for r in high_actions]),
            "expected_impact": "Efficacit√© √©nerg√©tique, fiabilit√©"
        },
        {
            "phase": "Phase 3 - Moyen terme",
            "timeline": "12-24 mois",
            "actions": [r.action for r in medium_actions],
            "investment": sum([r.cost_estimate_max for r in medium_actions]),
            "expected_impact": "Optimisation performance, ROI"
        }
    ]
    
    return {
        "phases": phases,  # Added phases field for test compatibility
        "phase_1_immediate": {
            "timeline": "0-3 mois",
            "actions": [r.action for r in critical_actions],
            "investment": sum([r.cost_estimate_max for r in critical_actions]),
            "expected_impact": "S√©curit√©, conformit√©, arr√™t d√©gradation"
        },
        "phase_2_short_term": {
            "timeline": "3-12 mois", 
            "actions": [r.action for r in high_actions],
            "investment": sum([r.cost_estimate_max for r in high_actions]),
            "expected_impact": "Efficacit√© √©nerg√©tique, fiabilit√©"
        },
        "phase_3_medium_term": {
            "timeline": "12-24 mois",
            "actions": [r.action for r in medium_actions],
            "investment": sum([r.cost_estimate_max for r in medium_actions]),
            "expected_impact": "Optimisation performance, ROI"
        },
        "total_program": {
            "duration_months": 24,
            "total_investment": economic_analysis["total_investment_cost"],
            "expected_savings": economic_analysis["annual_savings"],
            "payback_years": economic_analysis["payback_period_years"]
        }
    }

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()